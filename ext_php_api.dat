a:2:{s:4:"meta";a:3:{s:5:"title";s:7:"Browser";s:5:"descr";s:554:"Publish your data in list and single views! You don't need neither any own plugin nor any line PHP-Code. The Browser - the TYPO3-Frontend-Engine - provides an indexed browser (a-z), a record browser (page browser), a search form, filters, category menus and AJAX by default. Your data will be detected as objects, i.e. images will be wrapped automatically. SEO - Search Engine Optimization - is integrated.
The Browser enables the development of TYPO3-Extensions without any line PHP. TYPO3 developers and TYPO3 integrators  will be eight times faster! ";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";s:1:"1";}}s:5:"files";a:45:{s:14:"MD5_5946d9993c";a:4:{s:8:"filename";s:41:"lib/class.tx_browser_cssstyledcontent.php";s:8:"filesize";i:33807;s:6:"header";a:5:{s:4:"text";s:116:"

Class extends tx_cssstyledcontent_pi1

See: typo3/sysext/css_styled_content/pi1/class.tx_cssstyledcontent_pi1.php
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.6.4";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.4 ";}}}s:3:"DAT";a:7:{i:1;a:8:{s:6:"header";s:67:"class tx_browser_cssstyledcontent extends tx_cssstyledcontent_pi1
{";s:5:"class";i:1;s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:4:"cDat";a:3:{s:4:"text";s:645:"

[CLASS/FUNCTION INDEX of SCRIPT]



  72: class tx_browser_cssstyledcontent extends tx_cssstyledcontent_pi1
 103:     public function render_uploads( $content, $conf )
 383:     private function render_uploads_per_language( $content, $conf )

             SECTION: Helper
 642:     private function helper_browser_linkProc( $conf, $key, $fileName )
 738:     private function helper_linkVarsWoL( )
 793:     private function helper_init_drs( )

             SECTION: SQL
 835:     public function sql_marker( $select_fields, $from_table, $llUid )

TOTAL FUNCTIONS: 6
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:247:"
    // The extension key.
  public $extKey        = 'browser';
  public $prefixId      = 'tx_browser_cssstyledcontent';
    // Path to any file in pi1 for locallang
  public $scriptRelPath = 'lib/class.tx_browser_cssstyledcontent.php';









 ";i:1;i:-1;}s:12:"content_size";i:247;s:13:"content_lines";i:15;s:6:"atLine";i:70;}i:3;a:7:{s:6:"header";s:53:"public function render_uploads( $content, $conf )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:4:"cDat";a:6:{s:4:"text";s:359:"

render_uploads(): The method enables to link to files of each language at the same time.
                  The method is based on $this->render_uploads_per_language( ). See below.
                  Conditions
                  * userFunc.renderCurrentLanguageOnly has to be true
                  * the table sys_language has to contain one record at least
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"Content input. Not used, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML output.";}s:6:"access";s:6:"public";s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"//    $this->str_developer_csvIp = '79.237.182.65';
//    $pos = strpos($this->str_developer_csvIp, t3lib_div :: getIndpEnv('REMOTE_ADDR'));
//    if ( ! ( $pos === false ) )
//    {
//      var_dump(__METHOD__. ' (' . __LINE__ . '): ' , $this->str_developer_csvIp );
//    }

    $out = null;

      //////////////////////////////////////////////////////////////////////////
[...]
///////////////////////////
      //
      // RETURN the content

    return $out;
      // RETURN the content
  }









 ";i:1;i:1;}s:12:"content_size";i:8662;s:13:"content_lines";i:250;s:6:"atLine";i:101;}i:5;a:7:{s:6:"header";s:67:"private function render_uploads_per_language( $content, $conf )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:4:"cDat";a:6:{s:4:"text";s:1274:"

render_uploads_per_language(): This method extends the origin render_uploads method (version TYPO3 4.5.0).
                               The method interprets the TypoScript of tt_content.uploads.20 in principle.
                               The origin method is limited for records from tt_content only.
                               This method extends it for using records of every table.

                   If you like to use the method, you hav to configure this TypoScript snippet:

                   tt_content.uploads.20 {
                     fields {
                       layout  (stdWrap) ->  0: link only, 1: with application icon, 2: with based icon
                                             i.e: ###TX_ORG_REPERTOIRE.DOCUMENTSLAYOUT###
                       files   (stdWrap) ->  name of the files
                                             i.e: ###TX_ORG_REPERTOIRE.DOCUMENTS###
                       caption (stdWrap) ->  caption of the files, devided by LF
                                             i.e: ###TX_ORG_REPERTOIRE.DOCUMENTSCAPTION###
                     }
                     tableField  (stdWrap) ->  current table.field.
                                               i.e. tx_org_repertoire.documents
                   }
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"Content input. Not used, ignore.";}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"HTML output.";}s:6:"access";s:6:"public";s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.6.4";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.4 ";}}}s:7:"content";a:2:{i:0;s:507:"
      // the result
    $out = '';

      // get layout type
      // 0: link only, 1: with application icon, 2: with based icon
    $type = intval( $this->cObj->stdWrap( $conf['fields.']['layout'], $conf['fields.']['layout.'] ) );

      // set default path
    $path = 'uploads/media/';

      // get tableField
    $tableField = $this->cObj->stdWrap($conf['tableField'], 
[...]
*****************************************
   *
   * Helper
   *
   **********************************************/








  ";i:1;i:1;}s:12:"content_size";i:9529;s:13:"content_lines";i:242;s:6:"atLine";i:381;}i:7;a:8:{s:6:"header";s:70:"private function helper_browser_linkProc( $conf, $key, $fileName )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:4:{s:4:"text";s:587:"

helper_browser_linkProc( ):  This method handles the linkProc configuration
                             If linkProc has an element tx_browser_pi1, this element
                             will rendered instead of the default linkProc configuration.
                             It will be allocated the path to the current icon (preview or
                             application icon) out of the linkProc result to the
                             * register ICON_REL_PATH_FROM_LINCPROC
                             The tx_browser_pi1 configuration wll have access to the register
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:36:"$conf:      TypoScript configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:40:"$key:       Position of current document";}i:2;a:2:{i:0;s:5:"array";i:1;s:40:"$fileName:  Filename of current document";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Replaced URL";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // Replace markers

      // Set marker array
    $marker['###KEY###']                = $key;
    $marker['###FILENAME###']           = $fileName;
      // Set marker array

      // Replace the marker in the TypoScript recursively
      // Workaround because of bug: $splitConf[
[...]
t
    return ( $arr_filelinks );
      // RETURN by handling the tx_browser_pi1 linkProc configuration array
  }










  ";i:1;i:1;}s:12:"content_size";i:3018;s:13:"content_lines";i:88;s:6:"atLine";i:640;}i:9;a:7:{s:6:"header";s:42:"private function helper_linkVarsWoL( )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:4:"cDat";a:4:{s:4:"text";s:60:"

helper_linkVarsWoL( ): Remove parameter 'L' from linkVars
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:38:"$str_linkVarsWoL: linkVars without 'L'";}s:6:"access";s:7:"private";}s:7:"content";a:2:{i:0;s:507:"      // Get linkVars
    $str_linkVars = $GLOBALS['TSFE']->linkVars;

      // LOOP linkVars: remove 'L'
    $arr_linkVars = explode( '&', $str_linkVars );
    foreach( $arr_linkVars as $str_linkVar )
    {
      list( $key_linkVar, $value_linkVar ) = explode( '=', $str_linkVar );
        // remove 'L'
      if( $key_linkVar != 'L' && ! empty( $key_linkVar ) )
      {
   
[...]
      // DRS - Development Reporting System

      // RETURN linkVars without 'L'
    return $str_linkVarsWoL;
  }








  ";i:1;i:1;}s:12:"content_size";i:1207;s:13:"content_lines";i:47;s:6:"atLine";i:736;}i:11;a:4:{s:6:"header";s:39:"private function helper_init_drs( )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:4:"cDat";a:4:{s:4:"text";s:67:"

helper_init_drs( ): Init the DRS - Development Reportinmg System
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:6:"access";s:7:"private";}s:6:"atLine";i:791;}i:13;a:8:{s:6:"header";s:69:"public function sql_marker( $select_fields, $from_table, $llUid )
  {";s:11:"parentClass";s:27:"tx_browser_cssstyledcontent";s:11:"sectionText";a:1:{i:0;s:3:"SQL";}s:4:"cDat";a:6:{s:4:"text";s:134:"

sql_marker( ):  The method select the values of the given table and select and
                returns the values as a marker array
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:42:"$select_fields:  fields for the SQL select";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"$from_table:     table for the SQL from";}i:2;a:2:{i:0;s:7:"integer";i:1;s:44:"$llUid:          uid of the localised record";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:65:"$marker:         Array with the elements '###FIELD###' => 'value'";}s:6:"access";s:6:"public";s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $marker = null;

      ////////////////////////////////////////////////////////////////////////////////
      //
      // Set the query

      // Values
    $enablefields   = $this->cObj->enableFields( $from_table );
    $where_clause   = 'uid = ' . intval( $llUid ) . ' ' . $enablefields;
    $groupBy        = null;
    $orderBy        = null;
    $limit          = nul
[...]
pt.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/lib/class.tx_browser_typoscript.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:3902;s:13:"content_lines";i:129;s:6:"atLine";i:833;}}}s:14:"MD5_446bfff7e5";a:4:{s:8:"filename";s:35:"lib/class.tx_browser_extmanager.php";s:8:"filesize";i:3474;s:6:"header";a:5:{s:4:"text";s:52:"

Class provides methods for the extension manager.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.6.1";i:4;s:12:"@since 3.6.1";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:29:"class tx_browser_extmanager
{";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_browser_extmanager";s:4:"cDat";a:3:{s:4:"text";s:282:"

[CLASS/FUNCTION INDEX of SCRIPT]



  50: class tx_browser_extmanager
  68:     function promptCheckUpdate()
 103:     function promptCurrIP()
 138:     function promptExternalLinks()

TOTAL FUNCTIONS: 3
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:11:"








  ";i:1;i:-1;}s:12:"content_size";i:11;s:13:"content_lines";i:9;s:6:"atLine";i:48;}i:3;a:7:{s:6:"header";s:32:"function promptCheckUpdate()
  {";s:11:"parentClass";s:21:"tx_browser_extmanager";s:4:"cDat";a:5:{s:4:"text";s:108:"

promptCheckUpdate(): Displays the update message. The message contains the current IP of the backend user
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"message wrapped in HTML";}s:5:"other";a:2:{i:0;s:12:"@since 3.6.0";i:1;s:14:"@version 3.6.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:379:"//.message-notice
//.message-information
//.message-ok
//.message-warning
//.message-error

      $str_prompt = null;

      $str_prompt = $str_prompt.'
<div class="typo3-message message-information">
  <div class="message-body">
    ' . $GLOBALS['LANG']->sL('LLL:EXT:browser/lib/locallang.xml:promptCheckUpdateBody'). '
  </div>
</div>';

    return $str_prompt;
  }









  ";i:1;i:0;}s:12:"content_size";i:379;s:13:"content_lines";i:26;s:6:"atLine";i:66;}i:5;a:4:{s:6:"header";s:27:"function promptCurrIP()
  {";s:11:"parentClass";s:21:"tx_browser_extmanager";s:4:"cDat";a:5:{s:4:"text";s:62:"

promptCurrIP(): Displays the IP of the current backend user
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"message wrapped in HTML";}s:5:"other";a:2:{i:0;s:12:"@since 3.6.0";i:1;s:14:"@version 3.6.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:6:"atLine";i:101;}i:7;a:7:{s:6:"header";s:34:"function promptExternalLinks()
  {";s:11:"parentClass";s:21:"tx_browser_extmanager";s:4:"cDat";a:5:{s:4:"text";s:59:"

promptExternalLinks(): Displays the quick start message.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"message wrapped in HTML";}s:5:"other";a:2:{i:0;s:12:"@since 3.6.1";i:1;s:14:"@version 3.6.1";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:556:"//.message-notice
//.message-information
//.message-ok
//.message-warning
//.message-error

      $str_prompt = null;

      $str_prompt = $str_prompt.'
<div class="message-body">
  ' . $GLOBALS['LANG']->sL('LLL:EXT:browser/lib/locallang.xml:promptExternalLinksBody'). '
</div>';

    return $str_prompt;
  }









}


if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/lib/class.tx_browser_extmanager.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/lib/class.tx_browser_extmanager.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:556;s:13:"content_lines";i:32;s:6:"atLine";i:136;}}}s:14:"MD5_8c01cbacc6";a:4:{s:8:"filename";s:28:"lib/class.tx_browser_tca.php";s:8:"filesize";i:4030;s:6:"header";a:5:{s:4:"text";s:38:"

Class provides methods for the TCA.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:18:"@subpackage    org";i:3;s:14:"@version 0.3.1";i:4;s:12:"@since 0.3.1";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:4:"org ";}s:8:"@version";a:1:{i:0;s:6:"0.3.1 ";}s:6:"@since";a:1:{i:0;s:6:"0.3.1 ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:22:"class tx_browser_tca
{";s:5:"class";i:1;s:11:"parentClass";s:14:"tx_browser_tca";s:4:"cDat";a:3:{s:4:"text";s:210:"

[CLASS/FUNCTION INDEX of SCRIPT]



  48: class tx_browser_tca
  73:     function static_country_zones($params)

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:46;}i:3;a:7:{s:6:"header";s:42:"function static_country_zones($params)
  {";s:11:"parentClass";s:14:"tx_browser_tca";s:4:"cDat";a:3:{s:4:"text";s:543:"

static_country_zones():  Function to use in own TCA definitions
                         Removes items, which aren't matched by the current country

                     items           reference to the array of items (label,value,icon)
                     config          The config array for the field.
                     TSconfig        The "itemsProcFunc." from fieldTSconfig of the field.
                     table           Table name
                     row             Record row
                     field           Field name
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:25:"itemsProcFunc data array:";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:39:"The $items array may have been modified";}}s:7:"content";a:2:{i:0;s:507:"
// Next line hasn't any effect outside this method
//      // Remove all static_country_zones
//    unset($params['items']);
//var_dump(__CLASS__ . ' : ' . __LINE__ , $params['items']);

      // If the user stores the country id in another field than 'static_countries'
    $str_tcaFieldForStaticCountries = $params['config']['itemsProcFunc_conf']['countries_are_in'];
    
[...]
_tca.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/org_workshops/lib/class.tx_browser_tca.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:1892;s:13:"content_lines";i:61;s:6:"atLine";i:71;}}}s:14:"MD5_613f8d2a21";a:4:{s:8:"filename";s:35:"lib/class.tx_browser_typoscript.php";s:8:"filesize";i:2731;s:6:"header";a:5:{s:4:"text";s:49:"

Class provides userfuncs based on tslib_pibase
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.6.1";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:50:"class tx_browser_typoscript extends tslib_pibase
{";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_browser_typoscript";s:4:"cDat";a:3:{s:4:"text";s:260:"

[CLASS/FUNCTION INDEX of SCRIPT]



  54: class tx_browser_typoscript extends tslib_pibase
  79:     public function numberFormat($content = '', $conf = array())

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:52;}i:3;a:7:{s:6:"header";s:64:"public function numberFormat($content = '', $conf = array())
  {";s:11:"parentClass";s:21:"tx_browser_typoscript";s:4:"cDat";a:5:{s:4:"text";s:76:"

numberFormat(): format numbers with thousands seperator and decimal point
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$content: current content of TypoScript workflow";}i:1;a:2:{i:0;s:5:"array";i:1;s:45:"$conf: current TypoScript configuration array";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"formatted number";}s:5:"other";a:2:{i:0;s:12:"@since 3.6.2";i:1;s:14:"@version 3.6.2";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.6.2 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.2 ";}}}s:7:"content";a:2:{i:0;s:581:"      // 13145, dwildt, 110217
    global $TSFE;
    $local_cObj = $TSFE->cObj;

    if (!$content)
    {
      $conf     = $conf['userFunc.'];
      $content  = $local_cObj->cObjGetSingle($conf['number'], $conf['number.']);
    }

    return number_format($content, $conf['decimal'], $conf['dec_point'], $conf['thousands_sep']);
  }









}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/lib/class.tx_browser_typoscript.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/lib/class.tx_browser_typoscript.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:581;s:13:"content_lines";i:29;s:6:"atLine";i:77;}}}s:14:"MD5_4097240a74";a:4:{s:8:"filename";s:28:"pi1/class.tx_browser_pi1.php";s:8:"filesize";i:59182;s:6:"header";a:5:{s:4:"text";s:105:"

Plugin 'Browser' for the 'browser' extension - the fastest way for your data into the TYPO3 frontend.

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 1.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:3:"DAT";a:6:{i:1;a:8:{s:6:"header";s:43:"class tx_browser_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:14:"tx_browser_pi1";s:4:"cDat";a:3:{s:4:"text";s:539:"

[CLASS/FUNCTION INDEX of SCRIPT]



  91: class tx_browser_pi1 extends tslib_pibase

             SECTION: Main Process
 331:     function main($content, $conf)

             SECTION: DRS - Development Reporting System
1087:     function init_drs()

             SECTION: Classes
1405:     function require_classes()
1531:     function init_classVars()

             SECTION: Template
1683:     function getTemplate($cObj, $conf, $arr_data)

TOTAL FUNCTIONS: 5
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:8369:"
  var $prefixId = 'tx_browser_pi1';
  // Same as class name
  var $scriptRelPath = 'pi1/class.tx_browser_pi1.php';
  // Path to this script relative to the extension dir.
  var $extKey = 'browser';
  // The extension key.
  var $pi_checkCHash = true;

  var $str_developer_name     = 'Dirk Wildt';
  var $str_developer_mail     = 'wildt[at]die-netzmacher.de';
  var $str_developer_phone    = '+49 361 21655226';
  var $str_developer_company  = 'Die Netzmacher';
  var $str_developer_web      = 'http://die-netzmacher.de';
  var $str_developer_typo3ext = 'http://typo3.org/extensions/repository/view/browser/current/';
  var $str_developer_lang     = 'german, english';
  // [Boolean] Set by init_drs()
  var $developer_contact      = false;
  // [String, csv] Csv list of IP-addresses of the developer / integrator
  //               Needed for reports in the frontend
  var $str_developer_csvIp    = null;

  var $arr_extConf            = array();
  // Array out of the extConf file

  var $arrModeItems           = array();
  // Array for the mode selector


  var $tsStrftime;
  // The human readable format for timestamps out of the TS
  var $view;
  // [String] The current view type: list || single
  // #9659, 101010 fsander
  var $segment;
  // [Array] contains for each segment wether it should be shown or not (needed for AJAX)
  var $lang;
  // [Object] System language Object. $lang->lang cotain the current language.
  var $boolFirstVisit;
  // [Boolean] Is it the first call of the plugin?

  var $pidList;
  // [String/CSV] List with pids of the records of the local table
  var $singlePid;
  // [Integer] Uid of the current singlePid. Is set in list view only.
  var $csvSelect;
  // [String/CSV] List of fields for the SQL select query
  var $csvSelectWoFunc;
  // [String/CSV] List of fields for the SQL select query, cleaned up from any function
  var $csvOrderBy;  // 090628, depricated. See $conf_sql
  // [String/CSV] List of fields for the SQL query orderBy
  var $conf_sql;
  // [Array] Array with the SQL query parts from the TypoScript.
  //         LF and CR are cleaned up.
  //         tableFields and functions got an alias
  //         Elements
  //         - select:   select clause
  //         - search:   list with fields from db, in which search is enabled
  //         - groupBy:  group-by-clause NOT FOR SQL but for php multisort and consolidation
  //         - orderBy:  order-by-clause NOT FOR SQL but for php multisort
  //         - andWhere: and where clause
  var $arr_andWhereFilter;
  // [Array] Array with andWhere statements generated by the Filter class
  var $arrLinkToSingle = array();
  // [Array] Array with fieldnames, which should wrapped as a link to a single view


  var $piVar_mode   = false;
  // [Integer] The current mode (view). We need $piVar_mode, if there is only one view. Then we don't want the
  // piVars[mode] because of a nice real url path
  var $piVar_azTab  = false;
  // [String] The current tab of the A-Z-Browser. We need $piVar_azTab, if the current tab is the default tab. Then we don't want the
  // piVars[azTab] because of a nice real url path
  var $piVar_sword  = false;
  // [String] The current piVar Sword in secure mode
  var $piVar_alias_showUid  = false;
  // [String] Alias of the showUid

  var $template;
  // [String] Current HTML Template
  var $str_template_raw;
  // [String] Raw HTML Template
  var $str_wrap_grouptitle;
  // [String] The wrap for the group title in listr views (i.e <h2>|</h2)

  var $uploadFolder;
  // [String] Path to an uplod folder

  var $elements;
  // [Array] The elements of the current SQL row
  var $rows;
  // [Array] The rows of the SQL result: $uids_of_all_rows[uid_of_the_plugin][rows]
  var $uids_of_all_rows;
  // [Array] Uids of all rows (after consolidation but before limitation)

  var $arr_swordPhrases;
  // [Array] Array with sword phrases. Example: My Word "My Phrase" will be [0] My, [1] Word, [2] My Phrase
  var $arr_swordToShort;
  // [Array] Array with swords, which are shorter then len in
  var $arr_resultphrase;
  // [Array] Array with elements for the result phrase
  var $arr_swordPhrasesTableField;
  // [Array] Array with tableField elements with sword phrases.
  // Example:
  // ['tx_juridat_pi1.reg_num'][0]  = 'Einkünfte'
  // ['tx_juridat_pi1.reg_num'][1]  = 'Berufsverband'
  // ['tx_juridat_pi1.issue'][0]    = 'Einkünfte'
  // ['tx_juridat_pi1.issue'][1]    = 'Berufsverband'


  // processing views
  var $boolFirstRow = true;
  // [Boolean] true if current row is the first row, false if not; Don't change the value!
  var $lDisplayType;
  // [String] Possible values: displaySingle || displayList.
  var $lDisplay;
  // [Array] Local array with the configuration of displaySingle.display or displayList.display


  // Relation building
  var $recordTS;
  // The local or global record array from the TS
  var $arrSelectRow = array();
  // [Array] Array with the field names for the SQL select statement, but without uid and some other special cases
  var $localTable = '';
  // [String] The local table out of TS record.uid
  var $arrLocalTable = '';
  // [Array] Array with the table.uid and table.pid of the localtable. Syntax: array[uid] = table.field, array[pid] = table.field
  var $arr_realTables_arrFields;
  // [Array] Array with tables for an autmatic relation building, Syntax [table][] = field.
  var $arrConsolidate;
  // [Array] Array with consolidating information. Syntax [addedTableFields][] = table.field.
  var $arr_realTables_localised;
  // [Array] Array with localised tables
  var $arr_realTables_notLocalised;
  // [Array] Array with tables, which aren't localised
  var $arr_children_to_devide;
  // [Array] Array with the tables.fields of children records, which have to devide while stdWrap


  // Booleans for DRS - Development Reporting System
  var $b_drs_all          = false;
  var $b_drs_error        = false;
  var $b_drs_warn         = false;
  var $b_drs_info         = false;
  var $b_drs_browser      = false;
  var $b_drs_discover     = false;
  var $b_drs_filter       = false;
  var $b_drs_flexform     = false;
  var $b_drs_javascript   = false;
  var $b_drs_localisation    = false;
  var $b_drs_perform      = false;
  var $b_drs_realurl      = false;
  var $b_drs_seo          = false;
  var $b_drs_session      = false;
  var $b_drs_socialmedia  = false;
  var $b_drs_sql          = false;
  var $b_drs_statistics   = false;
  var $b_drs_templating   = false;
  var $b_drs_tca          = false;
  var $b_drs_tsUpdate     = false;

  // DRS properties
  var $i_drs_max_sql_result_len = 100;
  // Value will be overriden, if there is a value in $conf

  // Development
  var $boolCache = true;
  // Use cache: FALSE || TRUE; If you develope this extension, it can be helpfull to set this var on FALSE (no cache)
  var $bool_typo3_43 = false;
  // [Boolean] If true, the current version is TYPO3 4.3 at least
  var $bool_dontUseDRS = false;
  // [Boolean] If true, the current plugin won't be report any log to the DRS. It is configured by the plugin sheet [development]
  var $bool_debugJSS = false;
  // [Boolean] If true, Javascript is running in debugging mode. It is configured by the plugin sheet [development]


  // Auto Discover
  var $boolFirstElement = true;
  // TRUE, if the current element is the first in the row
  var $boolFirstTimeAutodiscover = true;
  // TRUE, if method autodiscConfig is used the first time. Don't change the value TRUE!
  var $boolArrHandleAsProcessed = false;
  // FALSE, if array arrHandleAs isn't processed completly. Don't change the value FALSE!
  var $confAutodiscover;
  // Array with the autodiscover configuration
  var $arrDontDiscoverFields;
  // Array with the names of that fields, which shouldn't wrapped automatically
  var $arrHandleAs;
  // Array with detected fields for arrHandleAs automatically
  var $TShandleAs;
  // Array with fields in the array handleAs in the TS


  // SQL configuration
  var $b_sql_manual = false;
  // FALSE: User defined a select statement only, Browser should build the full query automatically
  // TRUE: User has defined a SELECT, FROM, WHERE and maybe JOINS. Browser should use a manual configured SQL query
























  /***********************************************
   *
   * Main Process
   *
   **********************************************/




  ";i:1;i:-1;}s:12:"content_size";i:8369;s:13:"content_lines";i:231;s:6:"atLine";i:89;}i:3;a:8:{s:6:"header";s:34:"function main($content, $conf)
  {";s:11:"parentClass";s:14:"tx_browser_pi1";s:11:"sectionText";a:1:{i:0;s:12:"Main Process";}s:4:"cDat";a:5:{s:4:"text";s:29:"

Main method of your PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:35:"$content: The content of the PlugIn";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn Configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"The content that should be displayed on the website";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.2";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.2 ";}}}s:7:"content";a:2:{i:0;s:507:"    $this->conf = $conf;

    $this->pi_setPiVarDefaults();
    $this->pi_loadLL();



      ////////////////////////////////////////////////////////////////////
      //
      // TYPO3 Version

    $str_version = TYPO3_version;
    if(!$str_version)
    {
      $str_version = '4.2.9';
    }
    $int_version = t3lib_div::int_from_ver($str_version);
    if($int_version >= 4
[...]
******************
   *
   * DRS - Development Reporting System
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:22118;s:13:"content_lines";i:749;s:6:"atLine";i:329;}i:5;a:8:{s:6:"header";s:23:"function init_drs()
  {";s:11:"parentClass";s:14:"tx_browser_pi1";s:11:"sectionText";a:1:{i:0;s:34:"DRS - Development Reporting System";}s:4:"cDat";a:3:{s:4:"text";s:79:"

Set the booleans for Warnings, Errors and DRS - Development Reporting System
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
      //////////////////////////////////////////////////////////////////////
      //
      // Prepaire the developer contact prompt

    $this->developer_contact =
        'company: '.  $this->str_developer_company.'<br />'.
        'name: '.     $this->str_developer_name   .'<br />'.
        'mail: <a href="mailto:'.$this->str_developer_mail.'" title="Send a mail">'.$th
[...]
*********************************************
   *
   * Classes
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:12481;s:13:"content_lines";i:311;s:6:"atLine";i:1085;}i:7;a:8:{s:6:"header";s:30:"function require_classes()
  {";s:11:"parentClass";s:14:"tx_browser_pi1";s:11:"sectionText";a:1:{i:0;s:7:"Classes";}s:4:"cDat";a:3:{s:4:"text";s:26:"

Init the helper classes
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////
      //
      // Require and init helper classes

      // Class with methods for get calendar values
    require_once('class.tx_browser_pi1_cal.php');
    $this->objCal = new tx_browser_pi1_cal($this);

      // Class with methods for get flexform values
    require_once('class.tx_browser_pi1_fl
[...]
zz methods
    require_once('class.tx_browser_pi1_zz.php');
    $this->objZz = new tx_browser_pi1_zz($this);

  }









  ";i:1;i:1;}s:12:"content_size";i:4609;s:13:"content_lines";i:119;s:6:"atLine";i:1403;}i:9;a:4:{s:6:"header";s:29:"function init_classVars()
  {";s:11:"parentClass";s:14:"tx_browser_pi1";s:4:"cDat";a:3:{s:4:"text";s:38:"

Set variables in the helper classes
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}}s:6:"atLine";i:1529;}i:11;a:8:{s:6:"header";s:49:"function getTemplate($cObj, $conf, $arr_data)
  {";s:11:"parentClass";s:14:"tx_browser_pi1";s:11:"sectionText";a:1:{i:0;s:8:"Template";}s:4:"cDat";a:3:{s:4:"text";s:38:"

Get the value for the var $template
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:11:"Global cObj";}i:1;a:2:{i:0;s:5:"array";i:1;s:22:"TS configuration array";}i:2;a:2:{i:0;s:5:"array";i:1;s:43:"Input array with the elements view and mode";}i:3;a:2:{i:0;s:7:"integer";i:1;s:16:"The current view";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:8:"template";}}s:7:"content";a:2:{i:0;s:507:"
    $view = $arr_data['view'];
    $mode = $arr_data['mode'];

    $viewWiDot = $view.'.';

    $arr_return = array();
    $arr_return['error']['status']  = false;
    $arr_return['data']['template'] = false;


      //////////////////////////////////////////////////////////////////////
      //
      // Catch the template

    if (!empty($conf['views.'][$viewWiDot][$mode
[...]
owser_pi1.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:1907;s:13:"content_lines";i:75;s:6:"atLine";i:1681;}}}s:14:"MD5_7f529f5f5a";a:4:{s:8:"filename";s:36:"pi1/class.tx_browser_pi1_backend.php";s:8:"filesize";i:68514;s:6:"header";a:5:{s:4:"text";s:90:"

The class tx_browser_pi1_backend bundles methods for backend support like itemsProcFunc
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 4.0.0";i:4;s:12:"@since 3.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.0 ";}}}s:3:"DAT";a:17:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi1_backend
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:3:{s:4:"text";s:1313:"

[CLASS/FUNCTION INDEX of SCRIPT]



  66: class tx_browser_pi1_backend

             SECTION: Sheets
 118:     public function evaluate_externalLinks($arr_pluginConf, $obj_TCEform)
 158:     public function evaluate_plugin($arr_pluginConf, $obj_TCEform)
 483:     public function extend_cal_ui($arr_pluginConf, $obj_TCEform)
 693:     public function extend_cal_view($arr_pluginConf, $obj_TCEform)
 958:     public function extend_cal_field_start($arr_pluginConf, $obj_TCEform)
1245:     public function extend_cal_field_end($arr_pluginConf, $obj_TCEform)
1523:     public function sDef_getArrViewsList($arr_pluginConf)
1687:     public function socialmedia_getArrBookmarks($arr_pluginConf)
1748:     public function templating_getArrDataQuery($arr_pluginConf)
1813:     public function templating_getExtensionTemplates($arr_pluginConf)
1871:     public function templating_get_jquery_ui($arr_pluginConf)

             SECTION: Helper Methods
1933:     private function getLL()
1977:     private function init($arr_pluginConf)
2019:     private function init_pageObj($arr_pluginConf)
2051:     private function init_pageUid($arr_pluginConf)
2101:     private function init_tsObj($arr_rows_of_all_pages_inRootLine)

TOTAL FUNCTIONS: 16
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:466:"



    // [Integer] Pid of the current page
  var $pid  = null;
    // [Object] Current t3-page object
  var $obj_page = null;
    // [Object] TypoScript object of current page
  var $obj_TypoScript = null;
    // [Array] one dimensional array with language strings
  var $locallang = null;

  var $maxWidth = '600px';









  /***********************************************
   *
   * Sheets
   *
   **********************************************/











  ";i:1;i:-1;}s:12:"content_size";i:466;s:13:"content_lines";i:39;s:6:"atLine";i:64;}i:3;a:8:{s:6:"header";s:73:"public function evaluate_externalLinks($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:11:"sectionText";a:1:{i:0;s:6:"Sheets";}s:4:"cDat";a:5:{s:4:"text";s:75:"

evaluate_externalLinks: HTML content with external links

Tab [evaluate]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$str_prompt: HTML prompt";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:397:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error
    $str_prompt = null;

    $str_prompt = $str_prompt.'
      <div class="message-body" style="max-width:600px;">
        ' . $GLOBALS['LANG']->sL('LLL:EXT:browser/lib/locallang.xml:promptExternalLinksBody'). '
      </div>
      ';

    return $str_prompt;
  }











  ";i:1;i:0;}s:12:"content_size";i:397;s:13:"content_lines";i:26;s:6:"atLine";i:116;}i:5;a:7:{s:6:"header";s:66:"public function evaluate_plugin($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:117:"

evaluate_plugin: Evaluates the plugin, flexform, TypoScript
                 Returns a HTML report

Tab [evaluate]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$str_prompt: HTML prompt";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);

      // RETURN error with init()
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error
    $str_prompt = null;



  
[...]
    // DRS is enabled


      // Check the plugin
    return $str_prompt . $str_prompt_info_tutorialAndForum;
  }









  ";i:1;i:1;}s:12:"content_size";i:12852;s:13:"content_lines";i:305;s:6:"atLine";i:156;}i:7;a:7:{s:6:"header";s:64:"public function extend_cal_ui($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:500:"

extend_cal_ui: Renders a TCE form select box with calendar plugins.
               Three cases will be handled:
               1. There isn't any calendar plugin available:
                  * returns a prompt only
               2. Thera are calendar plugins available, but no one isn't selected:
                  * returns a prompt with a select box
               3. Thera are calendar plugins available and one is selected:
                  * returns a select box with a prompt

Tab [extend]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:81:"$str_prompt: HTML prompt or HTML prompt and TCE select form with calendar plugins";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error

    $arr_items  = null;
    $str_prompt = null;



      ///////////////////////////////////////////////////////////////////////////////
      //
      // Reset session data

      // Get the extra from fields from the session
    $arr_session = $GLOBAL
[...]
    // RETURN the select box (TCE form)

      return $str_prompt;
        // RETURN the select box (TCE form)
  }








  ";i:1;i:1;}s:12:"content_size";i:6697;s:13:"content_lines";i:190;s:6:"atLine";i:481;}i:9;a:7:{s:6:"header";s:66:"public function extend_cal_view($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:482:"

extend_cal_view: Renders a TCE form select box with available views.
                 Three cases will be handled:
                 1. There isn't any view available:
                    * returns a prompt only
                 2. Thera are views available, but no one isn't selected:
                    * returns a prompt with a select box
                 3. Thera are views available and one is selected:
                    * returns a select box with a prompt

Tab [extend]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:81:"$str_prompt: HTML prompt or HTML prompt and TCE select form with calendar plugins";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error



      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }



    $arr_items  = null;
    $str_prompt = null;



      //
[...]
      // RETURN the select box (TCE form)

      return $str_prompt;
      // RETURN the select box (TCE form)
  }








  ";i:1;i:1;}s:12:"content_size";i:8098;s:13:"content_lines";i:245;s:6:"atLine";i:691;}i:11;a:7:{s:6:"header";s:73:"public function extend_cal_field_start($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:508:"

extend_cal_field_start:  Renders a TCE form select box with available fields.
                   Three cases will be handled:
                   1. There isn't any field available:
                      * returns a prompt only
                   2. Thera are fields available, but no one isn't selected:
                      * returns a prompt with a select box
                   3. Thera are fields available and one is selected:
                      * returns a select box with a prompt

Tab [extend]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:81:"$str_prompt: HTML prompt or HTML prompt and TCE select form with calendar plugins";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error



      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
//      var_dump( __METHOD__, __LINE__, 'RETURN', $bool_success);
      return $arr_pluginConf;
  
[...]
      // RETURN the select box (TCE form)

      return $str_prompt;
      // RETURN the select box (TCE form)
  }








  ";i:1;i:1;}s:12:"content_size";i:8638;s:13:"content_lines";i:267;s:6:"atLine";i:956;}i:13;a:7:{s:6:"header";s:71:"public function extend_cal_field_end($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:506:"

extend_cal_field_end:  Renders a TCE form select box with available fields.
                   Three cases will be handled:
                   1. There isn't any field available:
                      * returns a prompt only
                   2. Thera are fields available, but no one isn't selected:
                      * returns a prompt with a select box
                   3. Thera are fields available and one is selected:
                      * returns a select box with a prompt

Tab [extend]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:81:"$str_prompt: HTML prompt or HTML prompt and TCE select form with calendar plugins";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error



      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }



    $arr_items  = null;
    $str_prompt = null;



      //
[...]
    // RETURN the select box (TCE form)

      return $str_prompt;
      // RETURN the select box (TCE form)
  }










  ";i:1;i:1;}s:12:"content_size";i:8580;s:13:"content_lines";i:267;s:6:"atLine";i:1243;}i:15;a:7:{s:6:"header";s:57:"public function sDef_getArrViewsList($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:115:"

sDef_getArrViewsList: Get data query (and andWhere) for all list views of the current plugin.
Tab [General/sDEF]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"with the names of the views list";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.1";i:1;s:12:"@since 3.6.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }


      ///////////////////////////////////////////////////////////////////////////////
      //
      // Get Flexform

    $arr_views  = array();
    $arr_xml    = t3lib_div::xml2array(
[...]
= array('Did you configured a view?', '');
    }
      // We don't have any item

    return $arr_pluginConf;
  }









  ";i:1;i:1;}s:12:"content_size";i:4705;s:13:"content_lines";i:154;s:6:"atLine";i:1521;}i:17;a:7:{s:6:"header";s:64:"public function socialmedia_getArrBookmarks($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:77:"

socialmedia_getArrBookmarks: Get bookmarks for flexform. Tab [Socialmedia]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:18:"with the bookmarks";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.1";i:1;s:12:"@since 3.6.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      // TypoScript configuration for bookmarks
    $arr_bookmarks = $this->obj_TypoScript->setup['plugin.']['tx_browser_pi1.']['flexform.']['socialmedia.']['socialbookmarks.']['bookmar
[...]
multisort($arr_sort, $arr_pluginConf['items']);
    }
      // Order bookmarks

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:1203;s:13:"content_lines";i:50;s:6:"atLine";i:1685;}i:19;a:7:{s:6:"header";s:63:"public function templating_getArrDataQuery($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:119:"

templating_getArrDataQuery: Get data query (and andWhere) for all list views of the current plugin.
Tab [Templating]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:18:"with the bookmarks";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.1";i:1;s:12:"@since 3.6.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      // TypoScript configuration for dataQueries
    $arr_dataQuery = $this->obj_TypoScript->setup['plugin.']['tx_browser_pi1.']['flexform.']['templating.']['arrDataQuery.']['items.'];
[...]
tems'][] = array($str_defaultItem, '1');
    }
      // We don't have any item

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:1563;s:13:"content_lines";i:54;s:6:"atLine";i:1746;}i:21;a:7:{s:6:"header";s:69:"public function templating_getExtensionTemplates($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:111:"

templating_getExtensionTemplates: Get templates from the browser and third party extensions
Tab [Templating]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"$arr_pluginConf: Extended with the templates";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.1";i:1;s:12:"@since 3.6.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Default value
    $arr_pluginConf['items'][] = array('From TypoScript (old fashion)', 'typoscript');
    $arr_pluginConf['items'][] = array('Upload own Template', 'adjusted');
    $arr_pluginConf['items'][] = array('-------------------------------------------', '');


      // Require classes, init page id, page object and TypoScript object
    $bool_success = $th
[...]
abel, $value);
      }
    }
      // Loop through all extensions and templates

    return $arr_pluginConf;

  }









  ";i:1;i:1;}s:12:"content_size";i:1359;s:13:"content_lines";i:47;s:6:"atLine";i:1811;}i:23;a:7:{s:6:"header";s:61:"public function templating_get_jquery_ui($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:134:"

templating_get_jquery_ui: Get the list of jquery uis for the flexform. Tab [Templating]
                           * Feature #28562
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:12:"with the uis";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      // Init the one dimensional language array
    $this->getLL();

      // TypoScript configuration for jquery_ui
    $arr_jquery_uis = $this->obj_TypoScript->setup['plugin.']['tx_b
[...]
********************************
   *
   * Helper Methods
   *
   **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1039;s:13:"content_lines";i:53;s:6:"atLine";i:1869;}i:25;a:8:{s:6:"header";s:28:"private function getLL()
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:11:"sectionText";a:1:{i:0;s:14:"Helper Methods";}s:4:"cDat";a:5:{s:4:"text";s:62:"

getLL(): Get the locallang for class use out of an XML file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"Array of the locallang data";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 3.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $arr_extConf = unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['browser']);
    switch($arr_extConf['LLstatic'])
    {
      case('German'):
        $lang = 'de';
        break;
      default:
        $lang = 'default';
    }
      // 111126, dwildt-
    //require_once('locallang_flexform.xml');
    //$this->locallang = $LOCAL_LANG[$lang];
      // 111126, dw
[...]
bal, $mergeLocalOntoDefault );
    $this->locallang        = $LOCAL_LANG[$lang];
      // 111126, dwildt+
  }













  ";i:1;i:1;}s:12:"content_size";i:749;s:13:"content_lines";i:34;s:6:"atLine";i:1931;}i:27;a:7:{s:6:"header";s:42:"private function init($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:31:"

init(): Initiate this class.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"TRUE: success. FALSE: error.";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes
    require_once(PATH_t3lib.'class.t3lib_page.php');
    require_once(PATH_t3lib.'class.t3lib_tstemplate.php');
    require_once(PATH_t3lib.'class.t3lib_tsparser_ext.php');

      // Init page id and the page object
    $this->init_pageUid($arr_pluginConf);
    $this->init_pageObj($arr_pluginConf);

      // Init agregrated TypoScript
    $arr_rows
[...]

    }
    $this->init_tsObj($arr_rows_of_all_pages_inRootLine);

    $this->init = true;
    return true;
  }












  ";i:1;i:1;}s:12:"content_size";i:644;s:13:"content_lines";i:32;s:6:"atLine";i:1975;}i:29;a:7:{s:6:"header";s:50:"private function init_pageObj($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:43:"

init_pageObj(): Initiate an page object.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:202:"    if(!empty($this->obj_page))
    {
      return false;
    }

      // Set current page object
    $this->obj_page = t3lib_div::makeInstance('t3lib_pageSelect');

    return false;
  }












  ";i:1;i:0;}s:12:"content_size";i:202;s:13:"content_lines";i:22;s:6:"atLine";i:2017;}i:31;a:4:{s:6:"header";s:50:"private function init_pageUid($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:41:"

init_pageUid(): Initiate the page uid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:6:"atLine";i:2049;}i:33;a:7:{s:6:"header";s:66:"private function init_tsObj($arr_rows_of_all_pages_inRootLine)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_backend";s:4:"cDat";a:5:{s:4:"text";s:61:"

init_tsObj(): Initiate the TypoScript of the current page.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:87:"$arr_rows_of_all_pages_inRootLine: Agregate the TypoScript of all pages in the rootline";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:507:"    if(!empty($this->obj_TypoScript))
    {
      return false;
    }

    $this->obj_TypoScript = t3lib_div::makeInstance('t3lib_tsparser_ext');
    $this->obj_TypoScript->tt_track = 0;
    $this->obj_TypoScript->init();
    $this->obj_TypoScript->runThroughTemplates($arr_rows_of_all_pages_inRootLine);
    $this->obj_TypoScript->generateConfig();

    return false;
  }



[...]
nd.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_backend.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:633;s:13:"content_lines";i:40;s:6:"atLine";i:2099;}}}s:14:"MD5_b6adccb6cb";a:4:{s:8:"filename";s:44:"pi1/class.tx_browser_pi1_backend_wizicon.php";s:8:"filesize";i:2532;s:6:"header";a:5:{s:4:"text";s:35:"

Class that adds the wizard icon.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:38:"class tx_browser_pi1_backend_wizicon
{";s:5:"class";i:1;s:11:"parentClass";s:30:"tx_browser_pi1_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:204:"

[CLASS/FUNCTION INDEX of SCRIPT]



  46: class tx_browser_pi1_backend_wizicon
  69:     function getLL()

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:44;}i:3;a:7:{s:6:"header";s:19:"function getLL()
	{";s:11:"parentClass";s:30:"tx_browser_pi1_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:53:"

Get the locallang for class use out of an XML file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"Array of the locallang data";}}s:7:"content";a:2:{i:0;s:517:"  	$path2llXml = t3lib_extMgm::extPath('browser').'locallang_db.xml';
    $llXml 			= implode('', file($path2llXml));
		$arr_ll			= t3lib_div::xml2array($llXml, $NSprefix='', $reportDocTag=false);
    $LOCAL_LANG	= $arr_ll['data'];
    return $LOCAL_LANG;
  }
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_backend_wizicon.php'])
{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_backend_wizicon.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:517;s:13:"content_lines";i:16;s:6:"atLine";i:67;}}}s:14:"MD5_b0ed504ff0";a:4:{s:8:"filename";s:32:"pi1/class.tx_browser_pi1_cal.php";s:8:"filesize";i:94187;s:6:"header";a:5:{s:4:"text";s:129:"

The class tx_browser_pi1_cal bundles methods for rendering and processing calender based content, filters and category menues

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.6.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:3:"DAT";a:29:{i:1;a:8:{s:6:"header";s:26:"class tx_browser_pi1_cal
{";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:3:{s:4:"text";s:1934:"

[CLASS/FUNCTION INDEX of SCRIPT]



  90: class tx_browser_pi1_cal
 178:     function __construct($pObj)

             SECTION: Calendar
 217:     public function cal( $rows, $template )

             SECTION: Calendar Data
 399:     private function cal_data( )
 467:     private function cal_data_day( )
 564:     private function cal_data_day_schedule( )
 688:     private function cal_data_day_navigator( )

             SECTION: Calendar Templating
 726:     private function cal_template( )
 797:     private function cal_template_head( )
 908:     private function cal_template_body( )
1076:     private function cal_template_body_calDate( $dates, $subPrt_calDate )

             SECTION: Calendar Helper
1196:     private function cal_colours( )
1246:     private function cal_due_day( )
1348:     private function cal_eval_flexform( )
1420:     private function cal_eval_data( )
1541:     private function cal_frame( )
1680:     private function cal_frame_to_period( $arr_periods )
1836:     private function cal_group_check( )
1930:     private function cal_marker( )
1959:     private function cal_typoscript( )

             SECTION: Filter
2068:     function area_init()
2142:     function area_interval($arr_ts, $arr_values, $tableField)
2171:     function area_strings($arr_ts, $arr_values, $tableField)

             SECTION: Filter Area Helper
2245:     function area_get_urlPeriod($arr_ts, $tableField, $tsKey)
2316:     function area_get_tsKey_from_urlPeriod($tableField, $str_urlPeriod)
2373:     function area_set_hits($arr_ts, $arr_values, $tableField)
2512:     function area_set_tsPeriod($arr_ts, $tableField)

             SECTION: Helper
2782:     public function zz_strtotime( $bool_strtotime, $strtotime )
2860:     public function zz_tableFieldStdWrap( $tableField, $value, $elements, $linkToSingle=true )

TOTAL FUNCTIONS: 28
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:2762:"
    // [AREA]
    // [string] day, week, month or year
  var $str_area_case = null;
    // [array] Array with area configuration for every filter, if there is an area configured
  var $arr_area = null;
    // [array] Hits per tablefield (filter) and  item
  var $arr_hits = null;
    // [array] Array with area url and its real tsKey
  var $arr_url_tsKey = null;
    // [String/Integer] default period, if no period is selected by the category menu
  var $selected_period = null;
    // [AREA]

    // [SCHEDULE]
    // [boolean]  True: group is configured. CAL_DATE_GROUP subparts are part of HTML template
  var $bool_group     = false;
    // [array] uid. header, pi_flexform of the plugin pi5
  var $browser_pi5    = null;
    // [array] schedule's current TypoScript configuration
  var $conf_schedule  = null;
    // [array] TypoScript configuration of the current view
  var $conf_view      = null;
    // [array] colours
  var $date_colours   = null;
    // [string] date devider
  var $date_devider   = null;
    // [integer/timestamp] The current due day
  var $due_day        = null;
    // [boolean] True, if there was an error while calculating the due day
  var $due_day_error  = null;
    // [array] Array for the group filter: table.field, value
  var $groupFilter   = null;
    // [boolean] Is the calender plugin loaded?
  var $is_loaded      = false;
    // [array] Array with default markers
  var $markerArray    = null;
    // [string] HTML class for odd columns (th, td)
  var $oddClassColumns  = null;
    // [string] HTML class for odd rows (tr)
  var $oddClassRows   = null;
    // [array] periods: schedule's data, frame with time units containing the rows
  var $periods        = null;
    // [integer] Uid of the current record
  var $record_uid     = null;
    // [array] Current rows;
  var $rows           = null;
    // [integer] Time unit of the current schedule in seconds
  var $schedule_time_unit = null;
    // [integer/timestamp] Absolute beginn of the current schedule
  var $schedule_begin    = null;
    // [integer/timestamp] Absolute end of the current schedule
  var $schedule_end       = null;


    // [integer] Pid of the single view;
  var $singlePid           = null;
    // [string] Current template (HTML with marker)
  var $template       = null;
    // [SCHEDULE]

    //[sheet/extend]
    // Uid in tt_content of the Browser Calender User Interface
  var $sheet_extend_cal_ui            = null;
    // Uid of the view in the TypoScript setup
  var $sheet_extend_cal_view          = null;
    // table.field-name of the date begin field
  var $sheet_extend_cal_field_start   = null;
    // table.field-name of the date end field
  var $sheet_extend_cal_field_end     = null;
    //[sheet/extend]









  ";i:1;i:-1;}s:12:"content_size";i:2762;s:13:"content_lines";i:80;s:6:"atLine";i:88;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:171:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Calendar
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:171;s:13:"content_lines";i:25;s:6:"atLine";i:176;}i:5;a:8:{s:6:"header";s:43:"public function cal( $rows, $template )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:8:"Calendar";}s:4:"cDat";a:5:{s:4:"text";s:170:"

cal(): Returns a calendar (schedule)
       It will executed only:
       * in list views
       * if the Browser is extended with the Browser Calendar user Interface.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:24:"$rows: Consolidated rows";}i:1;a:2:{i:0;s:5:"array";i:1;s:32:"$template: Current HTML template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"$arr_return: rows, template, success";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // Set default values

    $this->rows             = $rows;
    $this->template         = $template;
    $arr_return['rows']     = $rows;
    $arr_return['template'] = $template;
    $arr_return['success']  = false;
      // Set default values



      /////////////////////
[...]
*************************************
  *
  * Calendar Data
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:4653;s:13:"content_lines";i:173;s:6:"atLine";i:215;}i:7;a:8:{s:6:"header";s:32:"private function cal_data( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:13:"Calendar Data";}s:4:"cDat";a:5:{s:4:"text";s:65:"

cal_data(): Get periods data (periods which contains the rows)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:23:"true in case of success";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get TypoScript configuration for the flexform of the plugin pi5
    $conf_flexform_pi5 = $this->conf_view['flexform.']['pi5.'];

    if( empty ( $conf_flexform_pi5 ) )
    {
      $conf_flexform_pi5 = $this->pObj->conf['flexform.']['pi5.'];
      if ($this->pObj->b_drs_cal)
      {
        t3lib_div :: devLog('[INFO/CAL/UI] There was no local flexform.pi5 configur
[...]
INFO/CAL/UI] no success in ' . __METHOD__ , $this->pObj->extKey, 0);
      }
    }

    return $bool_success;
  }









  ";i:1;i:1;}s:12:"content_size";i:1954;s:13:"content_lines";i:59;s:6:"atLine";i:397;}i:9;a:7:{s:6:"header";s:36:"private function cal_data_day( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:79:"

cal_data_day(): Get periods data for a day (periods which contains the rows)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:23:"true in case of success";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet                  = 'day';
    $conf_flexform_pi5_day  = $this->pObj->conf['flexform.']['pi5.'][$sheet . '.'];



      /////////////////////////////////////////////////////////////////
      //
      // Schedule

      // Get field day.schedule.display
    $part                 = 'schedule';
    $field                = 'display';
    $cObj_path            = $she
[...]
INFO/CAL/UI] no success in ' . __METHOD__ , $this->pObj->extKey, 0);
      }
    }

    return $bool_success;
  }









  ";i:1;i:1;}s:12:"content_size";i:2457;s:13:"content_lines";i:88;s:6:"atLine";i:465;}i:11;a:7:{s:6:"header";s:45:"private function cal_data_day_schedule( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:88:"

cal_data_day_schedule(): Get periods data for a day (periods which contains the rows)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:23:"true in case of success";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet          = 'day';
    $part           = 'schedule';
    $conf_schedule  = $this->conf_schedule;



      /////////////////////////////////////////////////////////////////
      //
      // RETURN schedule shouldn't displayed

      // field display
    $field      = 'display';
    $cObj_path  = $sheet . '.' . $part . '.' . $field;
    $cObj_name  = $conf_schedul
[...]
INFO/CAL/UI] no success in ' . __METHOD__ , $this->pObj->extKey, 0);
      }
    }

    return $bool_success;
  }









  ";i:1;i:1;}s:12:"content_size";i:3999;s:13:"content_lines";i:114;s:6:"atLine";i:562;}i:13;a:7:{s:6:"header";s:46:"private function cal_data_day_navigator( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:92:"

cal_data_day_navigator():  day's navigator
                           * ISN'T DEVELOPED *
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:323:"    if ($this->pObj->b_drs_warn)
    {
      t3lib_div :: devLog('[ERROR/CAL/UI] day\'s navigator isn\'t supported in this version.', $this->pObj->extKey, 2);
    }
  }










  /***********************************************
  *
  * Calendar Templating
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:323;s:13:"content_lines";i:29;s:6:"atLine";i:686;}i:15;a:8:{s:6:"header";s:36:"private function cal_template( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:19:"Calendar Templating";}s:4:"cDat";a:5:{s:4:"text";s:44:"

cal_template(): Returns the HTML template
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$template   The template";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $this->cal_marker( );

      /////////////////////////////////////////////////////////////////
      //
      // Get fields and set marker

      // Get fields
    $field      = 'caption';
    $cObj_name  = $this->conf_schedule['labels.'][$field . '.']['stdWrap'];
    $cObj_conf  = $this->conf_schedule['labels.'][$field . '.']['stdWrap.'];
    $caption    = $this->pObj
[...]
$template;
    $arr_return['success']  = true;

    return $template;
      // Return the row and the template
  }








  ";i:1;i:1;}s:12:"content_size";i:1857;s:13:"content_lines";i:56;s:6:"atLine";i:724;}i:17;a:7:{s:6:"header";s:41:"private function cal_template_head( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:328:"

cal_template_head(): Set up the template. Here the subpart LISTHEAD.
                     This markers will replaced:
                     * cal_date
                     * cal_period
                     * caption
                     * summary
                     Result (HTML snippet) will written to the global $template
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"


      /////////////////////////////////////////////////////////////////
      //
      // Get fields

    $field      = 'cal_date';
    $cObj_name  = $this->conf_schedule['labels.'][$field . '.']['stdWrap'];
    $cObj_conf  = $this->conf_schedule['labels.'][$field . '.']['stdWrap.'];
    $cal_date   = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);

    $field
[...]
ISTHEAD###', $listHead, true);
      // Substitute marker in the template



    $this->template = $template;
  }









  ";i:1;i:1;}s:12:"content_size";i:3480;s:13:"content_lines";i:100;s:6:"atLine";i:795;}i:19;a:7:{s:6:"header";s:41:"private function cal_template_body( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:248:"

cal_template_body(): Set up the template. Here: LISTBODYITEM.
                     Loop with periods. Allocates finished periods including the dates to LISTBODYITEM.
                     Result (HTML snippet) will written to the global $template
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // Set vars

    $template         = $this->template;
      // Set default markert array
    $markerArray      = $this->markerArray;
      // Get subparts for a period item (including dates)
    $subPrt_period    = $this->pObj->cObj->getSubpart($template,          '###LISTB
[...]
$str_periods, true );
      // Set the template
    $this->template = $template;
      // Set up the template
  }









  ";i:1;i:1;}s:12:"content_size";i:6085;s:13:"content_lines";i:156;s:6:"atLine";i:906;}i:21;a:7:{s:6:"header";s:73:"private function cal_template_body_calDate( $dates, $subPrt_calDate )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:174:"

cal_template_body_calDate(): Set up the template. Here: CAL_DATE.
                             Loop with dates (children of periods). Allocates finished dates to CAL_DATE.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:110:"$dates:           Array with the dates. This are the $rows from the sql result, consolidated for the calendar.";}i:1;a:2:{i:0;s:6:"string";i:1;s:38:"$subPrt_calDate:  The CAL_DATE subpart";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"$str_calDate   HTML snippet";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    static $bool_prompted = false;

    $markerArray = $this->markerArray;



      ///////////////////////////////////////////////////////////////////////////////
      //
      // LOOP dates

    foreach( $dates as $row => $elements )
    {
        // Set record uid
      $tableFieldUid                  = $this->pObj->arrLocalTable['uid'];
      $this->record_uid        
[...]
************************************
  *
  * Calendar Helper
  *
  **********************************************/








  ";i:1;i:1;}s:12:"content_size";i:3610;s:13:"content_lines";i:111;s:6:"atLine";i:1074;}i:23;a:8:{s:6:"header";s:35:"private function cal_colours( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:15:"Calendar Helper";}s:4:"cDat";a:5:{s:4:"text";s:42:"

cal_colours(): Initial the corlor array
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet        = 'sDEF';
    $field        = 'colours';

    $conf_flexform_pi5 = $this->conf_view['flexform.']['pi5.'];
    if( empty ( $conf_flexform_pi5 ) )
    {
      $conf_flexform_pi5 = $this->pObj->conf['flexform.']['pi5.'];
      if ($this->pObj->b_drs_cal)
      {
        t3lib_div :: devLog('[INFO/CAL/UI] There was no local flexform.pi5 configuration. The glo
[...]
'.'];
        $this->date_colours[] = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);
      }
    }
  }









  ";i:1;i:1;}s:12:"content_size";i:1028;s:13:"content_lines";i:36;s:6:"atLine";i:1194;}i:25;a:7:{s:6:"header";s:35:"private function cal_due_day( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:379:"

cal_due_day(): Set the due day (current day of the calendar request)
               Will set the global due_day as a timestamp
               Try to fetch due day from the URL.
               If there isn't any due_day, it will set it to 'today 0:00'
               The global due_day_error will set to true: Other methos will change
               the due_day to there needs.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      /////////////////////////////////////////////////////////////////
      //
      // Get due day from piVars (from the current URL)

      // Try to catch it from the start field
    $cal_field_start  = $this->pObj->objFlexform->sheet_extend_cal_field_start;
    $piVar_due_day    = $this->pObj->piVars[$cal_field_start];
      // Try to catch it from the start field

 
[...]
O_8601 . ')', $this->pObj->extKey, 0);
    }
    $this->due_day = $timestamp;
      // Set the global due day
  }









  ";i:1;i:1;}s:12:"content_size";i:2966;s:13:"content_lines";i:92;s:6:"atLine";i:1244;}i:27;a:7:{s:6:"header";s:41:"private function cal_eval_flexform( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:148:"

cal_eval_flexform(): Checks, if the flexform sheet 'extend' contains any data.
                     Set some global vars. See code at the bottom.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:54:"Returns false in case of no data, true in case of data";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // RETURN field cal_ui is false
    if( !$this->pObj->objFlexform->sheet_extend_cal_ui )
    {
      if ($this->pObj->b_drs_cal)
      {
        t3lib_div :: devLog('[INFO/CAL/UI] RETURN: flexform extend.cal_ui doesn\'t contain any data.', $this->pObj->extKey, 0);
      }
      return false;
    }
      // RETURN field cal_ui is false

      // RETURN field cal_view 
[...]
_extend_cal_field_end;
      // Set fields

      // RETURN all flexform fields have a value
    return true;
  }









  ";i:1;i:1;}s:12:"content_size";i:1944;s:13:"content_lines";i:63;s:6:"atLine";i:1346;}i:29;a:7:{s:6:"header";s:37:"private function cal_eval_data( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:82:"

cal_eval_data():  Checks, if the data of the flexform sheet 'extend' are valid.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:55:"Returns false in case of invalid, true in case of valid";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN plugin doesn't exist, isn't part of the current page, is marked as hidden or deleted

      // SQL query: Get all browser_pi5 plugins of the current page.
    $uid            = (int) $this->sheet_extend_cal_ui;
    $pid            = (int) $this->pObj->cObj->data['
[...]

      return false;
    }
      // RETURN field_end isn't part of the current TypoScript



    return true;
  }









  ";i:1;i:1;}s:12:"content_size";i:4192;s:13:"content_lines";i:112;s:6:"atLine";i:1418;}i:31;a:7:{s:6:"header";s:33:"private function cal_frame( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:85:"

cal_frame(): Building the schedules data frame (the list of all proper time units)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:43:"$arr_period:    Period (list of time units)";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet          = 'day';
    $part           = 'schedule';
    $conf_schedule  = $this->conf_schedule;

    $arr_frame = null;

      /////////////////////////////////////////////////////////////////
      //
      // Get begin, end, time_unit, format_begin, format_end, devider

      // field begin
    $field      = 'begin';
    $cObj_path  = $sheet . '.' . $part . '.
[...]
__ . '): ' . $str_unit_begin . ' - ' . $str_unit_end);
    }
      // LOOP time_units

    return $arr_frame;
  }









  ";i:1;i:1;}s:12:"content_size";i:4303;s:13:"content_lines";i:129;s:6:"atLine";i:1539;}i:33;a:7:{s:6:"header";s:56:"private function cal_frame_to_period( $arr_periods )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:111:"

cal_frame_to_period(): Set the global periods: add the rows to the frame (the list of all proper time units)
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:43:"$arr_frame:   Frame, the list of time units";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:4:"true";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $rows   = $this->rows;

      // Names of start and end field
    $begin  = $this->pObj->objFlexform->sheet_extend_cal_field_start;
    $end    = $this->pObj->objFlexform->sheet_extend_cal_field_end;


      // RETRUN rows are empty
    if( empty ( $rows ) )
    {
      //var_dump(__METHOD__, __LINE__, $rows);
      $this->periods = $arr_periods;
      return true;
   
[...]
     // Set default row
    }
      // LOOP period items

    $this->periods = $arr_periods;
    return true;
  }









  ";i:1;i:1;}s:12:"content_size";i:4551;s:13:"content_lines";i:146;s:6:"atLine";i:1678;}i:35;a:7:{s:6:"header";s:39:"private function cal_group_check( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:156:"

cal_group_check(): Check, if TypoScript and the HTML template is configured for grouping.
                   If yes, the global $bool_group becomes true.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      /////////////////////////////////////////////////////////////////
      //
      // RETURN there is no group configured

    $arr_conf_group  = $this->conf_schedule['group.'];
    if( empty ( $arr_conf_group ) )
    {
      if ($this->pObj->b_drs_cal)
      {
        t3lib_div :: devLog('[INFO/CAL/UI] RETURN: No group isn\'t configured.', $this->pObj->extKey, 0);
   
[...]
ool_group = true;
      // SUCCESS group is configured, CAL_DATE_GROUP subparts are part of the HTML template
  }









  ";i:1;i:1;}s:12:"content_size";i:2515;s:13:"content_lines";i:85;s:6:"atLine";i:1834;}i:37;a:7:{s:6:"header";s:34:"private function cal_marker( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:39:"

cal_marker(): Set some global marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:484:"      // Set marker
    $this->markerArray['###MODE###']  = $this->pObj->piVar_mode;
    $this->markerArray['###VIEW###']  = $this->pObj->view;
    $this->markerArray                = $this->pObj->objMarker->extend_marker_wi_cObjData( $this->markerArray );
    $markerArray                      = $this->pObj->objWrapper->constant_markers( );
    foreach( (array) $markerArray as $key => $value)
    {
      $this->markerArray[$key] = $value;
    }
      // Set marker
  }









  ";i:1;i:0;}s:12:"content_size";i:484;s:13:"content_lines";i:20;s:6:"atLine";i:1928;}i:39;a:7:{s:6:"header";s:38:"private function cal_typoscript( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:70:"

cal_typoscript(): Set the TypoScript depending on the flexform data
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:33:"Returns false in case of an error";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get the flexform value (XML format)
    $xml_pi_flexform = $this->browser_pi5['pi_flexform'];



      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN pi_flexform of plugin pi5 is empty

    if( empty ( $xml_pi_flexform ) )
    {
      if ($this->pObj->b_drs_error)
      {
        t3lib_div :: devLog('[ERROR
[...]
*******************************************
  *
  * Filter
  *
  **********************************************/










  ";i:1;i:1;}s:12:"content_size";i:2754;s:13:"content_lines";i:99;s:6:"atLine";i:1957;}i:41;a:8:{s:6:"header";s:24:"function area_init()
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:6:"Filter";}s:4:"cDat";a:5:{s:4:"text";s:58:"

area_init: Check configuration and init global arr_area
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:3:{i:0;s:14:"@version 3.6.0";i:1;s:12:"@since 3.6.0";i:2;s:74:"@link  http://forge.typo3.org/issues/11402  TYPO3-Browser: Filter for area";}s:11:"other_index";a:3:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}s:5:"@link";a:1:{i:0;s:66:"http://forge.typo3.org/issues/11402 TYPO3-Browser: Filter for area";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    foreach ($this->pObj->objFilter->arr_conf_tableFields as $tableField)
    {
      list ($table, $field) = explode('.', $tableField);
      $arr_ts = $conf_view['filter.'][$table . '
[...]
se take care to a proper area configuration.', $this->pObj->extKey, 1);
            }
        }
      }
    }
  }









  ";i:1;i:1;}s:12:"content_size";i:2102;s:13:"content_lines";i:60;s:6:"atLine";i:2066;}i:43;a:7:{s:6:"header";s:61:"function area_interval($arr_ts, $arr_values, $tableField)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:216:"

area_interval():  Handle the area for an interval
                  Add to the tsConf the array ['area.']['interval.']['options.']['fields.]
                  Return an array $key => $value generated by the tsConf
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:59:"$arr_ts: The TypoScript configuration of the current filter";}i:1;a:2:{i:0;s:5:"array";i:1;s:46:"$arr_values: The values for the current filter";}i:2;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:30:"Data array with $key => $value";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.0";i:1;s:12:"@since 3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:305:"    list ($table, $field) = explode('.', $tableField);

      // Get an auto generated ts configuration array
    $arr_ts = $this->area_set_tsPeriod($arr_ts, $tableField);

    $arr_return['data']['values'] = $this->area_set_hits($arr_ts, $arr_values, $tableField);
    return $arr_return;
  }









  ";i:1;i:0;}s:12:"content_size";i:305;s:13:"content_lines";i:17;s:6:"atLine";i:2140;}i:45;a:7:{s:6:"header";s:60:"function area_strings($arr_ts, $arr_values, $tableField)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:90:"

area_strings(): Handle the area for strings - manual configured array of $key => $value
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:59:"$arr_ts: The TypoScript configuration of the current filter";}i:1;a:2:{i:0;s:5:"array";i:1;s:46:"$arr_values: The values for the current filter";}i:2;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.0";i:1;s:12:"@since 3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    list ($table, $field) = explode('.', $tableField);



      /////////////////////////////////////////////////////////////////
      //
      // RETURN, array error

    if (!is_array($arr_ts['area.']['strings.']['options.']['fields.']))
    {
        // DRS - Development Reporting System
      if ($this->pObj->b_drs_warn)
      {
        t3lib_div :: devLog('[WARN/CAL
[...]
********************************
  *
  * Filter Area Helper
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1390;s:13:"content_lines";i:59;s:6:"atLine";i:2169;}i:47;a:8:{s:6:"header";s:61:"function area_get_urlPeriod($arr_ts, $tableField, $tsKey)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:18:"Filter Area Helper";}s:4:"cDat";a:5:{s:4:"text";s:271:"

area_get_urlPeriod(): Get the get parameter from TypoScript
                      From tsConf the array ['area.']['interval.' || 'string.']['options.']['fields.]
                      Return wrapped value from 'url_stdWrap'
                      #13920, 110319, dwildt
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:59:"$arr_ts: The TypoScript configuration of the current filter";}i:1;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}i:2;a:2:{i:0;s:6:"string";i:1;s:42:"$tsKey: Current tsKey like 10, 20, 30, ...";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:46:"$tsKey: I.e. 2011_Jan, 2011_Feb, 2011_Mar, ...";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.4";i:1;s:12:"@since 3.6.4";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.4 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////
      //
      // RETURN there isn't any tsKey

    if ($tsKey == null)
    {
      return $tsKey;
    }
      // RETURN there isn't any tsKey



      ///////////////////////////////////////////////////////////////
      //
      // RETURN there isn't any area for $tableField

    if (empty ($this->arr_
[...]
 // Move key (10, 20, 30, ...) to url_stdWrap (i.e: 2011_Jan, 2011_Feb, 2011_Mar, ...)

    return $tsKeyUrl;
  }









  ";i:1;i:1;}s:12:"content_size";i:1462;s:13:"content_lines";i:57;s:6:"atLine";i:2243;}i:49;a:7:{s:6:"header";s:71:"function area_get_tsKey_from_urlPeriod($tableField, $str_urlPeriod)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:289:"

area_get_tsKey_from_urlPeriod(): Get the real tsKey from TypoScript url_stdWrap
                                 I.e $str_urlPeriod: 2011M%C3%A4r, 2011Apr, 2011Mai, ...
                                 Returns i.e: 10, 20, 30, ...
                                 #13920, 110319, dwildt
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}i:1;a:2:{i:0;s:6:"string";i:1;s:37:"$str_urlPeriod: The url of the period";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:56:"$str_urlPeriod: I.e. 2011M%C3%A4r, 2011Apr, 2011Mai, ...";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.4";i:1;s:12:"@since 3.6.4";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    $tsKey = $str_urlPeriod;



      ///////////////////////////////////////////////////////////////
      //
      // RETURN there isn't any area for $tableField

    if (empty ($this->arr_area[$tableField]['key']))
    {
      return $tsKey;
    }
      // RETURN there isn't any area for $tableField



      //////////////////////////////////////////////////////////////
[...]
tableField][$str_urlPeriod];
    }
      // RETURN real tsKey

      // RETURN given tsKey
    return $tsKey;
  }









  ";i:1;i:1;}s:12:"content_size";i:897;s:13:"content_lines";i:45;s:6:"atLine";i:2314;}i:51;a:7:{s:6:"header";s:61:"function area_set_hits($arr_ts, $arr_values, $tableField)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:73:"

area_set_hits(): Recalculate the hits per item. Return updated values.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:59:"$arr_ts: The TypoScript configuration of the current filter";}i:1;a:2:{i:0;s:5:"array";i:1;s:46:"$arr_values: The values for the current filter";}i:2;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"Array with the updated values";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.0";i:1;s:12:"@since 3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    list ($table, $field) = explode('.', $tableField);
    $str_case             = $this->arr_area[$tableField]['key'];



//    $pos = strpos($this->pObj->str_developer_csvIp, t3lib_div :: getIndpEnv('REMOTE_ADDR'));
//    if (!($pos === false)) var_dump('cal 674', $str_case);



      /////////////////////////////////////////////////////////////////
      //
      // Wr
[...]
eField] = $arr_hits;
      // Set the global arr_hits

      // RETURN the result
    return $arr_values_new;
  }









  ";i:1;i:1;}s:12:"content_size";i:3628;s:13:"content_lines";i:126;s:6:"atLine";i:2371;}i:53;a:7:{s:6:"header";s:52:"function area_set_tsPeriod($arr_ts, $tableField)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:214:"

area_set_tsPeriod():  Set an auto-generated period in the TypoScript
                      Add to the tsConf the array ['area.']['interval.']['options.']['fields.]
                      Return an updated $arr_ts
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:59:"$arr_ts: The TypoScript configuration of the current filter";}i:1;a:2:{i:0;s:6:"string";i:1;s:36:"$tableField: The current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:15:"Updated $arr_ts";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.4";i:1;s:12:"@since 3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    list ($table, $field) = explode('.', $tableField);
    $arr_interval = $arr_ts['area.']['interval.'];



      ///////////////////////////////////////////////////////////////
      //
      // Get case

    switch($arr_interval['case'])
    {
      case('day'):
      case('week'):
      case('month'):
      case('year'):
        $this->str_area_case = $arr_interval['ca
[...]
*********************************************
  *
  * Helper
  *
  **********************************************/








  ";i:1;i:1;}s:12:"content_size";i:9239;s:13:"content_lines";i:259;s:6:"atLine";i:2510;}i:55;a:5:{s:6:"header";s:63:"public function zz_strtotime( $bool_strtotime, $strtotime )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:5:{s:4:"text";s:52:"

zz_strtotime(): Upgrade rows for a day's schedule
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:55:"$bool_strtotime   true: use strtotime; false: do noting";}i:1;a:2:{i:0;s:6:"string";i:1;s:43:"$strtotime: Time string in english language";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:106:"$arr_return: result: in case of success timestamp else timestring; ISO_8601: timestamp in ISO 8601 format;";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:6:"atLine";i:2780;}i:57;a:7:{s:6:"header";s:94:"public function zz_tableFieldStdWrap( $tableField, $value, $elements, $linkToSingle=true )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_cal";s:4:"cDat";a:5:{s:4:"text";s:509:"

zz_tableFieldStdWrap():  Wrap the given table.field value depending on it's TypoScript configuration.
                         If the given value is null, method won't be executed.
                         If there isn't any configuration, value will wrapped with a default configuration.
                         Value will get a link to the singleView (depending on some things, see code below).
                         Marker in the configuration will replaced recursive with values of the current row.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"$tableField:      Name of the current table.field";}i:1;a:2:{i:0;s:6:"string";i:1;s:50:"$value:           Value of the current table-field";}i:2;a:2:{i:0;s:6:"string";i:1;s:53:"$elements:        Current row (from SQL, conslidated)";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:60:"$linkToSingle:    Should value get a link to the single view";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"$value: The wrapped value";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // RETURN empty value
    if( $value == null )
    {
      return;
    }
      // RETURN empty value

    $markerArray          = $this->markerArray;
    list($table, $field)  = explode( '.', $tableField);

      // No configuration: set default cObj
    if( empty( $this->conf_view[$table . '.'][$field . '.'] ) )
    {
      $this->conf_view[$table . '.'][$field] = '
[...]
1_cal.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_cal.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:3723;s:13:"content_lines";i:115;s:6:"atLine";i:2858;}}}s:14:"MD5_8c33ed2a7e";a:4:{s:8:"filename";s:40:"pi1/class.tx_browser_pi1_consolidate.php";s:8:"filesize";i:48267;s:6:"header";a:5:{s:4:"text";s:86:"

The class tx_browser_pi1_consolidate bundles methods which are consolidating data


";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:15:"@since    3.4.4";i:2;s:15:"@version  3.6.1";i:3;s:17:"@package    TYPO3";i:4;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:10:{i:1;a:8:{s:6:"header";s:34:"class tx_browser_pi1_consolidate
{";s:5:"class";i:1;s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:3:{s:4:"text";s:716:"

[CLASS/FUNCTION INDEX of SCRIPT]



  59: class tx_browser_pi1_consolidate
  85:     function __construct($parentObj)
 106:     function consolidate($rows)
 616:     function init_arrConsolidation()
 708:     function addUidAndPid()

             SECTION: Consolidate Children (Single View and Development only)
 808:     function children_relation()
1012:     function fields_wi_relation()
1080:     function fields_wi_marker($arr_fields_wi_relation)
1131:     function tsConf_TEXT_path_wi_marker($arr_fields_wi_relation)
1245:     function manipulate_tsConf($arr_tsConf_TEXT_path_wi_marker, $arr_fields_wi_relation)

TOTAL FUNCTIONS: 9
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:375:"
  var $arr_conf_consolidation = false;
  // [Array] Array with Consolidation Information
  var $bool_conf_unique_rows = false;
  // [Boolean] Should the SQL result consolidated? Only unique rows?

  var $arr_row_current    = null;
  // [Array] The current row
  var $arr_fields_current = null;
  // [Array] The keys of the current row. Key syntax is table.field








    ";i:1;i:-1;}s:12:"content_size";i:375;s:13:"content_lines";i:18;s:6:"atLine";i:57;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:44:"    $this->pObj = $parentObj;
  }






    ";i:1;i:0;}s:12:"content_size";i:44;s:13:"content_lines";i:8;s:6:"atLine";i:83;}i:5;a:7:{s:6:"header";s:31:"function consolidate($rows)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:5:{s:4:"text";s:403:"

consolidate:   Consolidate Rows: If the localtable has more than one record per uid, we have
               a relation. This method tries to consolidate the foreign records. If we have
               more than one foreign record per localtable, the values would concatenated.
               The mothod requires a TypoScript permission:
                 autoconfig.consolidation.sql.rows.unique = true
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:35:"$rows: The rows form the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"$rows_new: Consolidated rows.";}s:5:"other";a:1:{i:0;s:16:"@version   3.4.3";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

    $arr_return['data']['uids']                 = false;
    $arr_return['data']['rows']                 = $rows;
    $arr_return['data']['rows_wo_cons']         = count($rows);
    $arr_re
[...]
(t3lib_div::_GP('dev')) var_dump('cons 534', array_keys(current($rows_new)));


    return $arr_return;
  }















  ";i:1;i:1;}s:12:"content_size";i:16788;s:13:"content_lines";i:502;s:6:"atLine";i:104;}i:7;a:7:{s:6:"header";s:36:"function init_arrConsolidation()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:3:{s:4:"text";s:129:"

init_arrConsolidation:   Inits the consolidation boolean and array.
                         Values are out of the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"False";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


    ///////////////////////////////////
    //
    // Get the local or gloabl autoconfig array

    $lAutoconf = $conf_view['autoconfig.'];
    if (!is_array($lAutoconf))
    {
      if ($
[...]
his->arr_conf_consolidation = $lAutoconf['consolidation.'];
    // Set the globals


    return false;

  }















  ";i:1;i:1;}s:12:"content_size";i:1802;s:13:"content_lines";i:84;s:6:"atLine";i:614;}i:9;a:7:{s:6:"header";s:27:"function addUidAndPid()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:3:{s:4:"text";s:168:"

addUidAndPid:    Returns an array with table.uid, which are missing in the select statement
                 It depends on the consolidation parameters in TypoScript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:73:"Array with completed arr_realTables_arrFields and with missing table.uids";}}s:7:"content";a:2:{i:0;s:507:"    ///////////////////////////////////
    //
    // Init RETURN array

    $arr_return['data']['arrFetchedTables'] = $this->pObj->arr_realTables_arrFields;
    if(isset($this->pObj->arrConsolidate['addedTableFields']))
    {
      $arr_return['data']['consolidate']['addedTableFields'] = $this->pObj->arrConsolidate['addedTableFields'];
    }
    if(!isset($this->pObj->arr
[...]
Consolidate Children (Single View and Development only)
   *
   **********************************************/









    ";i:1;i:1;}s:12:"content_size";i:2236;s:13:"content_lines";i:90;s:6:"atLine";i:706;}i:11;a:8:{s:6:"header";s:32:"function children_relation()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:11:"sectionText";a:1:{i:0;s:55:"Consolidate Children (Single View and Development only)";}s:4:"cDat";a:5:{s:4:"text";s:48:"

children_relation():     Consolidate children
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9838";i:1;s:16:"@since     3.4.4";i:2;s:16:"@version   3.4.4";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9838 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    static $bool_this_firstLoop     = true;
    static $arr_fields_wi_relation  = null;

    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

    $rows = $this->pObj->rows;
    //var_dump('cons 748', $rows);



    ///////////////////////////
[...]
e

    // Replace all marker with values from foreign table

    $bool_this_firstLoop = false;

    return;
  }









    ";i:1;i:1;}s:12:"content_size";i:5389;s:13:"content_lines";i:192;s:6:"atLine";i:806;}i:13;a:7:{s:6:"header";s:33:"function fields_wi_relation()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:5:{s:4:"text";s:210:"

fields_wi_relation():  Find every field with a relation to a foreign table.
                       Return an array with relaion information like foreign_table,
                       MM and MM_opposite_field
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:69:"$arr_fields_wi_relation : array with all table.fields with a relation";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9838";i:1;s:16:"@since     3.4.4";i:2;s:16:"@version   3.4.4";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9838 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    $arr_fields_wi_relation = null;


    ///////////////////////////////////////////////////////////////
    //
    // Store every field with a relation in the $arr_fields_wi_relation

    foreach((array) $this->arr_fields_current as $tableField)
    {
      list($table, $field) = explode('.', $tableField);

      // Load the TCA, if we don't have an table.columns array
 
[...]
   // Store every field with a relation in the $arr_fields_wi_relation

    return $arr_fields_wi_relation;
  }









    ";i:1;i:1;}s:12:"content_size";i:1846;s:13:"content_lines";i:57;s:6:"atLine";i:1010;}i:15;a:7:{s:6:"header";s:54:"function fields_wi_marker($arr_fields_wi_relation)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:5:{s:4:"text";s:72:"

fields_wi_marker(): Find marker with foreign tables in the TypoScript
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:38:"$arr_fields_wi_relation : Current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:68:"$arr_fields_wi_relation : array with fields with relation and marker";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9838";i:1;s:16:"@since     3.4.4";i:2;s:16:"@version   3.4.4";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9838 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

    foreach((array) $arr_fields_wi_relation as $tableField => $arr_relation_info)
    {
      // Get TypoScript configuration of current table.field
      list($table, $field)  = explode('.
[...]
    }
      // Remove table.field from array with relation fields
    }
    return $arr_fields_wi_relation;
  }









    ";i:1;i:1;}s:12:"content_size";i:1291;s:13:"content_lines";i:39;s:6:"atLine";i:1078;}i:17;a:4:{s:6:"header";s:64:"function tsConf_TEXT_path_wi_marker($arr_fields_wi_relation)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:5:{s:4:"text";s:172:"

tsConf_TEXT_path_wi_marker():  Return array with TypoScript paths of all TEXT arrays
                                with markers for foreign tables in the element value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_fields_wi_relation         : Array with table.fields with relations";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:61:"$arr_tsConf_TEXT_path_wi_marker : Array with TypoScript paths";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9838";i:1;s:16:"@since     3.4.4";i:2;s:16:"@version   3.4.4";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9838 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:6:"atLine";i:1129;}i:19;a:7:{s:6:"header";s:88:"function manipulate_tsConf($arr_tsConf_TEXT_path_wi_marker, $arr_fields_wi_relation)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_consolidate";s:4:"cDat";a:5:{s:4:"text";s:102:"

manipulate_tsConf(): Simplifing relation building. Enabling several relations to one foreign table.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:61:"$arr_tsConf_TEXT_path_wi_marker : Array with TypoScript paths";}i:1;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_fields_wi_relation         : Array with table.fields with relations";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9838";i:1;s:16:"@since     3.4.4";i:2;s:16:"@version   3.4.4";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9838 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot      = $view.'.';
    $conf_view      = $conf['views.'][$viewWiDot][$mode.'.'];
    $conf_view_path = 'views.'.$viewWiDot.$mode.'.';



    ////////////////////////////////////////////////////////////////////////
    //
    // Get typoscript plugin.tx_browser_
[...]
) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_consolidate.php']);
  }

?>";i:1;i:1;}s:12:"content_size";i:9780;s:13:"content_lines";i:285;s:6:"atLine";i:1243;}}}s:14:"MD5_69e08b4c01";a:4:{s:8:"filename";s:37:"pi1/class.tx_browser_pi1_download.php";s:8:"filesize";i:21699;s:6:"header";a:5:{s:4:"text";s:75:"

The class tx_browser_pi1_download bundles methods for downloading datas

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.9.3";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:3:"DAT";a:10:{i:1;a:8:{s:6:"header";s:31:"class tx_browser_pi1_download
{";s:5:"class";i:1;s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:3:{s:4:"text";s:724:"

[CLASS/FUNCTION INDEX of SCRIPT]



  65: class tx_browser_pi1_download
 101:     function __construct($pObj)

             SECTION: Main
 138:     public function download( )
 212:     private function download_check( )
 278:     private function download_init( )

             SECTION: typeNum
 356:     public function set_typeNum( )

             SECTION: Sending
 429:     private function sendFileAndExit( )

             SECTION: Statistics
 664:     private function statistics( $operator )
 712:     private function statistics_download( $operator )
 735:     private function statistics_downloadByVisit( $operator )

TOTAL FUNCTIONS: 9
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:657:"    // [Integer] Number of the current typeNum
  var $int_typeNum    = null;
    // [String] Name of the current typeNum
  var $str_typeNum    = null;

    // [Boolean] Is dwonloading allowed?
  var $bool_downloadsAllowed  = false;

    // [String] view: list || single
  var $view   = null;
    // [Integer] mode (index) of the current view
  var $mode   = null;
    // [String] table: label of the current table
  var $table  = null;
    // [Integer] uid: uid of the current record
  var $uid    = null;
    // [String] field: label of the field with the files
  var $field  = null;
    // [Integer] key: index of the file
  var $key    = null;








  ";i:1;i:-1;}s:12:"content_size";i:657;s:13:"content_lines";i:28;s:6:"atLine";i:63;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:167:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Main
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:167;s:13:"content_lines";i:25;s:6:"atLine";i:99;}i:5;a:8:{s:6:"header";s:31:"public function download( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:11:"sectionText";a:1:{i:0;s:4:"Main";}s:4:"cDat";a:5:{s:4:"text";s:256:"

download( ): Main method for downloading the requested file.
             If there is an failure, the method retirns a failure prompt.
             If there is success, this class will send the header, the file
             and will exit the PHP script.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"Prompt, in case of a failure";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN typeNum isn't the download typeNum

    if( $this->str_typeNum != 'download' )
    {
      return;
    }
      // RETURN typeNum isn't the download typeNum



      //////////////////////////////////////////////////////////////////////////
      //
      // Init global
[...]
text-align:center;padding:1em;"><h1>TYPO3 Browser</h1>' . $prompt_error . '</div>';
    return $prompt_error;
  }









  ";i:1;i:1;}s:12:"content_size";i:1453;s:13:"content_lines";i:62;s:6:"atLine";i:136;}i:7;a:7:{s:6:"header";s:38:"private function download_check( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:5:{s:4:"text";s:236:"

download_check( ): The method checks
                   * view and mode has to exist
                   * table.field has to be a part of the TypoScript select property
                   * table.field has to be configured in the TCA
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"Prompt, in case of a failure";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Does the view and the mode exist?
    if( ! isset( $this->pObj->conf['views.'][$this->view . '.'][$this->mode . '.']['select'] ) )
    {
      $prompt = ''.
      'Security check: TypoScript property ' .
      'plugin.tx_browser_pi1.views.' . $this->view . '. ' . $this->mode . '.select doesn\t exist.<br />' .
      __METHOD__ . ' (' . __LINE__ . ')';
      return 
[...]
of the TCA.<br />' .
      __METHOD__ . ' (' . __LINE__ . ')';
      return $prompt;
    }

    return false;
  }









  ";i:1;i:1;}s:12:"content_size";i:1424;s:13:"content_lines";i:46;s:6:"atLine";i:210;}i:9;a:7:{s:6:"header";s:37:"private function download_init( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:5:{s:4:"text";s:605:"

download_init( ):  The method sets some class variables
                   The method checks, if download is allowed. User have to allow the download
                   in the flexform / TypoScript
                   The method explodes the given URL.
                   Example:
                   * URL is: single.301.tx_org_doc.9.documents.0
                   * $this->view   = single
                   * $this->mode   = 301
                   * $this->table  = tx_org_doc
                   * $this->uid    = 9
                   * $this->field  = documents
                   * $this->key    = 0
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:48:"Prompt, in case of any downloading isn't allowed";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN: Downloading isn\'t allowed

    $cObj_name                    = $this->pObj->conf['flexform.']['sDEF.']['downloads.']['enabled'];
    $cObj_conf                    = $this->pObj->conf['flexform.']['sDEF.']['downloads.']['enabled.'];
    $this->bool_downloadsAllowed  =
[...]
*******************************************
  *
  * typeNum
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1979;s:13:"content_lines";i:68;s:6:"atLine";i:276;}i:11;a:8:{s:6:"header";s:34:"public function set_typeNum( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:11:"sectionText";a:1:{i:0;s:7:"typeNum";}s:4:"cDat";a:5:{s:4:"text";s:150:"

set_typeNum(): Set the class variables $int_typeNum and $str_typeNum.
               The class variables are needed by other classes while runtime.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get the typeNum from the current URL parameters
    $typeNum = (int) t3lib_div::_GP( 'type' );

      // RETURN typeNum is 0 or empty
    if( empty ( $typeNum ) )
    {
      if( $this->pObj->b_drs_download )
      {
        t3lib_div::devLog('[INFO/DOWNLOAD] typeNum is 0 or empty.', $this->pObj->extKey, 0);
      }
      return;
    }
      // RETURN typeNum is 0
[...]
*******************************************
  *
  * Sending
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1292;s:13:"content_lines";i:60;s:6:"atLine";i:354;}i:13;a:8:{s:6:"header";s:39:"private function sendFileAndExit( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:11:"sectionText";a:1:{i:0;s:7:"Sending";}s:4:"cDat";a:5:{s:4:"text";s:345:"

sendFileAndExit(): The method sends the file and exit in case of success
                   The method checks:
                   * upload folder is proper:  if there is a configuration in the TCA
                   * sql result is proper:     if result is exactly one row
                   * file is proper:           if the file does exist
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"Prompt, in case of a failure";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN: Any upload folder isn't configured

    $uploadFolder = $GLOBALS['TCA'][$this->table]['columns'][$this->field]['config']['uploadfolder'];
    if( empty( $uploadFolder ) )
    {
      $prompt_01 =  'Any upload folder is configured in the TCA.';
      $prompt_02 =  'Ple
[...]
****************************************
  *
  * Statistics
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:7363;s:13:"content_lines";i:225;s:6:"atLine";i:427;}i:15;a:8:{s:6:"header";s:44:"private function statistics( $operator )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:11:"sectionText";a:1:{i:0;s:10:"Statistics";}s:4:"cDat";a:5:{s:4:"text";s:52:"

download_statistics(): Inits the statistic module
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"$operator: operator has to be + or -";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // Set status of the statistics module and init it

    $this->pObj->objStat->statisticsIsEnabled( );
      // Set status of the statistics module and init it



      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN: statistics
[...]
 disabled



    $this->statistics_download( $operator );
    $this->statistics_downloadByVisit( $operator );
  }









  ";i:1;i:1;}s:12:"content_size";i:927;s:13:"content_lines";i:38;s:6:"atLine";i:662;}i:17;a:4:{s:6:"header";s:53:"private function statistics_download( $operator )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:5:{s:4:"text";s:39:"

statistics_download(): Count the hit
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"$operator: operator has to be + or -";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:6:"atLine";i:710;}i:19;a:7:{s:6:"header";s:60:"private function statistics_downloadByVisit( $operator )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_download";s:4:"cDat";a:5:{s:4:"text";s:55:"

statistics_downloadByVisit(): Count the hit by visit
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"$operator: operator has to be + or -";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $field = $this->pObj->objStat->fieldDownloadsByVisits;
       // RETURN: no new visit
    //$bool_newVisit = $this->pObj->objSession->statisticsNewDownload( $this->table, $field, $this->uid );
    $bool_newVisit = $this->pObj->objSession->statisticsNewVisit( $this->table, $field, $this->uid );
    if( ! $bool_newVisit )
    {
        // DRS - Development Reporting Syst
[...]
.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_download.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:1111;s:13:"content_lines";i:39;s:6:"atLine";i:733;}}}s:14:"MD5_f8c4ab576c";a:4:{s:8:"filename";s:35:"pi1/class.tx_browser_pi1_export.php";s:8:"filesize";i:6250;s:6:"header";a:5:{s:4:"text";s:71:"

The class tx_browser_pi1_export bundles methods for exporting datas

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 4.0.0";i:4;s:12:"@since 4.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:29:"class tx_browser_pi1_export
{";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_browser_pi1_export";s:4:"cDat";a:3:{s:4:"text";s:403:"

[CLASS/FUNCTION INDEX of SCRIPT]



  56: class tx_browser_pi1_export
  83:     function __construct($pObj)

             SECTION: typeNum
 118:     public function set_typeNum( )

             SECTION: CSV helper
 183:     public function csv_init_config( )
 220:     public function csv_value( $value )

TOTAL FUNCTIONS: 4
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:393:"    // [string] Devider for CSV fields. Usually: ;
  var $csv_devider    = null;
    // [string] Wrapper for CSV fields. Usually "
  var $csv_enclosure  = null;
    // [boolean] HTML tags will removed
  var $csv_striptag   = null;
    // [Integer] Number of the current typeNum
  var $int_typeNum    = null;
    // [String] Name of the current typeNum
  var $str_typeNum    = null;









  ";i:1;i:-1;}s:12:"content_size";i:393;s:13:"content_lines";i:19;s:6:"atLine";i:54;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_export";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:170:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * typeNum
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:170;s:13:"content_lines";i:25;s:6:"atLine";i:81;}i:5;a:8:{s:6:"header";s:34:"public function set_typeNum( )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_export";s:11:"sectionText";a:1:{i:0;s:7:"typeNum";}s:4:"cDat";a:5:{s:4:"text";s:134:"

set_typeNum(): Set the globals $int_typeNum and $str_typeNum.
               The globals are needed by other classes while runtime.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get the typeNum from the current URL parameters
    $typeNum = (int) t3lib_div::_GP( 'type' );

      // RETURN typeNum is 0 or empty
    if( empty ( $typeNum ) )
    {
      return;
    }
      // RETURN typeNum is 0 or empty

      // Check the proper typeNum
    $conf = $this->pObj->conf;
    switch (true)
    {
      case( $typeNum == $conf['export.']['csv.'][
[...]
****************************************
  *
  * CSV helper
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1138;s:13:"content_lines";i:56;s:6:"atLine";i:116;}i:7;a:5:{s:6:"header";s:38:"public function csv_init_config( )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_export";s:11:"sectionText";a:1:{i:0;s:10:"CSV helper";}s:4:"cDat";a:5:{s:4:"text";s:86:"

csv_init_config( ): Init the globals $csv_devider, $csv_enclosure and $csv_striptag
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:6:"atLine";i:181;}i:9;a:7:{s:6:"header";s:39:"public function csv_value( $value )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_export";s:4:"cDat";a:5:{s:4:"text";s:143:"

csv_value( ):  Change a value to a proper csv value: HTML tags will removed, value will enclosed,
               the csv devider will added.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$value: value for csv export";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$value: proper csv value";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // RETURN typeNum isn't the csv typeNum
    if( $this->str_typeNum != 'csv' )
    {
      return $value;
    }
      // RETURN typeNum isn't the csv typeNum

      // Remove HTML tags
    if( $this->csv_striptag )
    {
      $value = strip_tags( $value );
    }
      // If value contains the enclosure char, double this char. I.e: " will become ""
    $value = str_re
[...]
ort.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_export.php']);
}
?>";i:1;i:1;}s:12:"content_size";i:887;s:13:"content_lines";i:32;s:6:"atLine";i:218;}}}s:14:"MD5_5a371f7822";a:4:{s:8:"filename";s:35:"pi1/class.tx_browser_pi1_filter.php";s:8:"filesize";i:114105;s:6:"header";a:5:{s:4:"text";s:108:"

The class tx_browser_pi1_filter bundles methods for rendering and processing filters and category menues

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.6";i:4;s:12:"@since 3.0.1";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.1 ";}}}s:3:"DAT";a:29:{i:1;a:8:{s:6:"header";s:29:"class tx_browser_pi1_filter {";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:3:{s:4:"text";s:2168:"

[CLASS/FUNCTION INDEX of SCRIPT]



  86: class tx_browser_pi1_filter
 126:     function __construct($pObj)

             SECTION: Filter
 153:     function filter($template)
 374:     function filterLoop($template)
 444:     private function filter_fetch_rows( )

             SECTION: Little Helpers
 534:     function filterCondition( $tableField, $arr_ts )
 615:     function orderValues( $arr_values, $conf_tableField )
 693:     function items_order_and_addFirst($arr_ts, $arr_values, $tableField)
 871:     function andWhere_filter()
1038:     function andWhere_localTable($obj_ts, $arr_ts, $arr_piVar, $tableField)
1153:     function andWhere_foreignTable($obj_ts, $arr_ts, $arr_piVar, $tableField)
1244:     function getRows($tableField)
1636:     function wrapRows( $arr_input )
1813:     function get_nice_piVar($obj_ts, $arr_ts, $conf_tableField)

             SECTION: Rendering TS objects
1902:     private function renderHtmlFilter($obj_ts, $arr_ts, $arr_values, $tableField)

             SECTION: Rendering items
2332:     private function wrap_values_and_add_first_value($arr_ts, $arr_values, $tableField)
2478:     function wrap_objectTitle($arr_ts, $conf_tableField)
2569:     private function get_ordered( $arr_rows, $tableField )
2633:     private function get_treeOrdered( $arr_rows, $tableField )
2713:     private function set_treeOneDim( $tableField, $uid_parent )
2754:     private function get_treeRendered( $arr_ts )
2924:     function get_wrappedItemClass($arr_ts, $conf_item, $str_order)
2962:     function get_wrappedItemStyle($arr_ts, $conf_item, $str_order)
2986:     function get_wrappedItemKey($arr_ts, $uid, $conf_item)
3029:     function get_wrappedItemURL($arr_ts, $tableField, $value, $conf_item)
3131:     function get_wrappedItemSelected($uid, $value, $arr_piVar, $arr_ts, $conf_selected, $conf_item)
3199:     public function wrap_allItems($obj_ts, $arr_ts, $str_nice_piVar, $key_piVar, $number_of_items)
3263:     function get_tableFields()

             SECTION: Hits
3405:     function hits_per_filter_item( $str_devider )

TOTAL FUNCTIONS: 28
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:880:"
    // [array] Array with all table.fields, which are configured in the TypoScript views.x.filter
  var $arr_conf_tableFields = null;

    // [array] Array with the current SQL after consolidation but before any limit
    //         Will be set from outside: @views
  var $rows_wo_limit = null;

    // [array] Array with the filter conditions for PHP comparison
  var $arr_filter_condition = null;

    // [array] Hits per tablefield (filter) and item
  var $arr_hits = null;

    // [array] Rows of the SQL query after consolidation
  var $arr_rows = array( );
    // [array] Tables with a treeParentField field
  var $arr_tablesWiTreeparentfield  = array( );
    // [array] SQL rows of the current table.field
  var $arr_rowsTablefield           = array( );

    // [array] temporarily array for the recursive method setTreeOneDim( )
  var $tmpOneDim  = array( );










  ";i:1;i:-1;}s:12:"content_size";i:880;s:13:"content_lines";i:33;s:6:"atLine";i:84;}i:3;a:7:{s:6:"header";s:29:"function __construct($pObj) {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:161:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Filter
  *
  **********************************************/

  ";i:1;i:0;}s:12:"content_size";i:161;s:13:"content_lines";i:17;s:6:"atLine";i:124;}i:5;a:8:{s:6:"header";s:30:"function filter($template)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:11:"sectionText";a:1:{i:0;s:6:"Filter";}s:4:"cDat";a:5:{s:4:"text";s:239:"

filter():  Main function for handling filters and category menus.
           It returns the template with rendered filters and category menus.
           A rendered filter can be a category menu, a checkbox, radiobuttons and a selectbox
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"$template: current template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"The array with the template at least";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    if(is_array($conf_view['displayList.']['display.']))
    {
      $lDisplay = $conf_view['displayList.']['display.'];
    }
    if(!is_array($conf_view['displayList.']['display.']))

[...]
 #30912, 120127, dwildt+
    $arr_return['data']['rows']     = $this->rows_wo_limit;
    return $arr_return;
  }










  ";i:1;i:1;}s:12:"content_size";i:6781;s:13:"content_lines";i:211;s:6:"atLine";i:151;}i:7;a:7:{s:6:"header";s:34:"function filterLoop($template)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:108:"

Loop through all filters, which are configured in TypoScript.
Configuration can be: view.list.x.filter.x.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$template: the current template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"The array with the template at least";}s:5:"other";a:1:{i:0;s:14:"@version 3.5.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    //3.5.0
    $arr_rows = null;



      /////////////////////////////////////////////////////////////////
      //
      // Get rows

      // LOOP get rows per table.field
    forea
[...]
 Wrap rows



      // RETURN the result
    $arr_return['data']['marker'] = $marker;
    return $arr_return;
  }









  ";i:1;i:1;}s:12:"content_size";i:1246;s:13:"content_lines";i:61;s:6:"atLine";i:372;}i:9;a:7:{s:6:"header";s:41:"private function filter_fetch_rows( )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:82:"

filter_fetch_rows():  Remove all rows, which aren't fetched by filter selection
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"//$pos = strpos('91.23.187.149', t3lib_div :: getIndpEnv('REMOTE_ADDR'));
//if( ! ( $pos === false ) )
//{
//  var_dump(__METHOD__ . ' (' . __LINE__ . ')', $this->rows_wo_limit );
//}
//if( $pos === false )
//{
//  return;
//}
      // LOOP rows
    foreach( $this->rows_wo_limit as $key => $row)
    {
        // LOOP conditions
      foreach( $this->arr_filter_condition as
[...]
************************************
  *
  * Little Helpers
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:2176;s:13:"content_lines";i:78;s:6:"atLine";i:442;}i:11;a:8:{s:6:"header";s:52:"function filterCondition( $tableField, $arr_ts )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:11:"sectionText";a:1:{i:0;s:14:"Little Helpers";}s:4:"cDat";a:5:{s:4:"text";s:100:"

filterCondition( ):  Render the filter condition.
                     // #32117, 111127, dwildt+
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:46:"$tableField: table.field of the current filter";}i:1;a:2:{i:0;s:5:"array";i:1;s:47:"$arr_ts: typoScript array of the current filter";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:76:"True, if there isn't any condition or condition is meet. False, if it isn't.";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:14:"@since   3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      /////////////////////////////////////////////////////////////////
      //
      // Default values

    $bool_condition = true;
      // Default values



      /////////////////////////////////////////////////////////////////
      //
      // RETURN true: any condition isn't defined

    if( ! ( isset ( $arr_ts['condition'] ) ) )
    {
      if ( $this->pObj->b_drs
[...]
/////
      //
      // RETURN condition result

    return $bool_condition;
      // RETURN condition result
  }









  ";i:1;i:1;}s:12:"content_size";i:1707;s:13:"content_lines";i:72;s:6:"atLine";i:532;}i:13;a:7:{s:6:"header";s:57:"function orderValues( $arr_values, $conf_tableField )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:3:{s:4:"text";s:51:"

Order the values by uid or value and ASC or DESC
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:47:"$arr_values: Array with the values for ordering";}i:1;a:2:{i:0;s:6:"string";i:1;s:55:"$conf_tableField: table and field in table.field syntax";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"Array with ordered values";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';

    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];
    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';



      /////////////////////////////////////////////////////////////////
      //
      // RETURN there aren't values
[...]
r_ts['order.']['field'] == ('uid'))
    {
      $arr_values = array_flip($arr_values);
    }

    return $arr_values;
  }

  ";i:1;i:1;}s:12:"content_size";i:2136;s:13:"content_lines";i:66;s:6:"atLine";i:613;}i:15;a:7:{s:6:"header";s:70:"function items_order_and_addFirst($arr_ts, $arr_values, $tableField) {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:104:"

Order the items, add the first item and wrap all items
Is used by class template only. dwildt, 120121
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:5:"array";i:1;s:38:"$arr_values: The values for the object";}i:2;a:2:{i:0;s:6:"string";i:1;s:61:"$tableField: The current table.field from the ts filter array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:26:"Return the processed items";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';

    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];
    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';



    /////////////////////////////////////////////////////////////////
    //
    // Order the values and save the o
[...]
rap all items but the first item



    $arr_return['data']['values'] = $arr_values;
    return $arr_return;
  }










  ";i:1;i:1;}s:12:"content_size";i:5098;s:13:"content_lines";i:171;s:6:"atLine";i:691;}i:17;a:7:{s:6:"header";s:30:"function andWhere_filter()
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:69:"

andWhere_filter: Generate the andWhere statement, if it is needed.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"arr_andWhereFilter: NULL if there isn' any filter";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $arr_andWhereFilter = null;

    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];



      /////////////////////////////////////////////////////////////////
      //
      // Set the global $arr_conf_tableFields

    $bool_noTableField
[...]
e statement:<br /><br />' . $prompt, $this->pObj->extKey, 0);
      }
    }

    return $arr_andWhereFilter;

  }









  ";i:1;i:1;}s:12:"content_size";i:4639;s:13:"content_lines";i:151;s:6:"atLine";i:869;}i:19;a:7:{s:6:"header";s:75:"function andWhere_localTable($obj_ts, $arr_ts, $arr_piVar, $tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:233:"

andWhere_localTable: Generate the andWhere statement for a field from the localtable.
                     If there is an area, it will be handled

                       Method is enhanced with a php array for allocate conditions
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_ts: The TypoScript configuration of the SELECTBOX";}i:2;a:2:{i:0;s:5:"array";i:1;s:27:"$arr_piVar   Current piVars";}i:3;a:2:{i:0;s:6:"string";i:1;s:33:"$tableField   Current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"arr_andWhereFilter: NULL if there isn' any filter";}s:5:"other";a:2:{i:0;s:80:"@internal              #30912: Filter: count items with no relation to category:";i:1;s:14:"@version 3.6.0";}s:11:"other_index";a:2:{s:9:"@internal";a:1:{i:0;s:57:"#30912: Filter: count items with no relation to category:";}s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $str_andWhere = null;



      /////////////////////////////////////////////////////////////////
      //
      // Handle area filter

    if(is_array($this->pObj->objCal->arr_area[$tableField]))
    {
      foreach ($arr_piVar as $str_piVar)
      {
          // 13920, 110319, dwildt
          // Move url value to tsKey
        $str_piVar      = $this->pObj->objCal->a
[...]
. $str_andWhere . ')';
      }
    }
      // Handle without area filter

    return $str_andWhere;
  }



















  ";i:1;i:1;}s:12:"content_size";i:2850;s:13:"content_lines";i:98;s:6:"atLine";i:1036;}i:21;a:7:{s:6:"header";s:77:"function andWhere_foreignTable($obj_ts, $arr_ts, $arr_piVar, $tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:238:"

andWhere_foreignTable: Generate the andWhere statement for a field from a foreign table.
                       If there is an area, it will be handled

                       Method is enhanced with a php array for allocate conditions
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_ts: The TypoScript configuration of the SELECTBOX";}i:2;a:2:{i:0;s:5:"array";i:1;s:27:"$arr_piVar   Current piVars";}i:3;a:2:{i:0;s:6:"string";i:1;s:33:"$tableField   Current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"arr_andWhereFilter: NULL if there isn' any filter";}s:5:"other";a:3:{i:0;s:80:"@internal              #30912: Filter: count items with no relation to category:";i:1;s:14:"@version 3.9.6";i:2;s:14:"@since   3.6.0";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:57:"#30912: Filter: count items with no relation to category:";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    list ($table, $field) = explode('.', $tableField);
    $str_andWhere = null;



      /////////////////////////////////////////////////////////////////
      //
      // Handle area filter

    if(is_array($this->pObj->objCal->arr_area[$tableField]))
    {
      foreach ($arr_piVar as $str_piVar)
      {
          // 13920, 110319, dwildt
          // Move url value to
[...]
le . '.uid']['uid_in_list'] = $arr_piVar;
    }
      // Handle without area filter

    return $str_andWhere;
  }








  ";i:1;i:1;}s:12:"content_size";i:2669;s:13:"content_lines";i:81;s:6:"atLine";i:1151;}i:23;a:7:{s:6:"header";s:33:"function getRows($tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:83:"

getRows(): Building the SQL query. Execute the query. Return the result as rows.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:24:"$tableField: table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:20:"Data array with rows";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:13:"@ since 3.0.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:1:"@";a:1:{i:0;s:11:"since 3.0.1";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    $arr_return['error']['status'] = false;



      /////////////////////////////////////////////////////////////////
      //
      // Build the SQL query.

    list ($table, $field) 
[...]
ildt, 110309
//var_dump(__METHOD__ . ': ' . __LINE__ , $arr_return['data']['rows']);

    return $arr_return;
  }









  ";i:1;i:1;}s:12:"content_size";i:13793;s:13:"content_lines";i:383;s:6:"atLine";i:1242;}i:25;a:7:{s:6:"header";s:35:"function wrapRows( $arr_input )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:98:"

wrapRows(): Main function for filter processing. It returns the template with rendered filters.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:32:"$arr_input: array rows, template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"The array with the template at least";}s:5:"other";a:1:{i:0;s:14:"@version 3.5.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';

    $arr_rows = $arr_input['data']['rows'];
      // #32223, 120119, dwildt+
    $this->arr_rows = $arr_rows;
    $tem
[...]
eturn;
      }
    }
      // Wrap table.fields

    $arr_return['data']['marker'] = $marker;
    return $arr_return;
  }

  ";i:1;i:1;}s:12:"content_size";i:6396;s:13:"content_lines";i:167;s:6:"atLine";i:1634;}i:27;a:7:{s:6:"header";s:63:"function get_nice_piVar($obj_ts, $arr_ts, $conf_tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:3:{s:4:"text";s:60:"

Returns an array with key_piVar, arr_piVar and nice_piVar
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the Object";}i:2;a:2:{i:0;s:6:"string";i:1;s:66:"$conf_tableField: The current table.field from the ts filter array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:38:"Data array with the selectbox at least";}}s:7:"content";a:2:{i:0;s:507:"    $str_nice_piVar = $arr_ts['nice_piVar'];
    if ($str_nice_piVar == '')
    {
      $str_nice_piVar = $conf_tableField;
    }
    // #8337, 101012, dwildt
    switch ($obj_ts)
    {
      case ('CHECKBOX') :
        $conf_multiple = true;
        break;
      case ('CATEGORY_MENU') :
      case ('RADIOBUTTONS') :
        $conf_multiple = false;
        break;
      cas
[...]
**************************************
  *
  * Rendering TS objects
  *
  **********************************************/

  ";i:1;i:1;}s:12:"content_size";i:2063;s:13:"content_lines";i:76;s:6:"atLine";i:1811;}i:29;a:8:{s:6:"header";s:81:"private function renderHtmlFilter($obj_ts, $arr_ts, $arr_values, $tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:11:"sectionText";a:1:{i:0;s:20:"Rendering TS objects";}s:4:"cDat";a:5:{s:4:"text";s:55:"

renderHtmlFilter(): Returns the rendered HTML object
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_ts: The TypoScript configuration of the SELECTBOX";}i:2;a:2:{i:0;s:5:"array";i:1;s:41:"$arr_values: The values for the selectbox";}i:3;a:2:{i:0;s:6:"string";i:1;s:61:"$tableField: The current table.field from the ts filter array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:38:"Data array with the selectbox at least";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:14:"@since   3.0.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.1 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot      = $view . '.';
    $conf_view      = $conf['views.'][$viewWiDot][$mode . '.'];
    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';

    list ($table, $field) = explode('.', $tableField);
    $str_objType = $conf_view['filter.'][$table . '.']
[...]
****************************************
  *
  * Rendering items
  *
  **********************************************/




  ";i:1;i:1;}s:12:"content_size";i:14957;s:13:"content_lines";i:418;s:6:"atLine";i:1900;}i:31;a:8:{s:6:"header";s:87:"private function wrap_values_and_add_first_value($arr_ts, $arr_values, $tableField)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:11:"sectionText";a:1:{i:0;s:15:"Rendering items";}s:4:"cDat";a:5:{s:4:"text";s:90:"

wrap_values_and_add_first_value( ): Wrap values (value_stdWrap) and add the first value
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:5:"array";i:1;s:38:"$arr_values: The values for the object";}i:2;a:2:{i:0;s:6:"string";i:1;s:61:"$tableField: The current table.field from the ts filter array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"Return the wrapped values";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.0.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.1 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';

    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];
    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';

    list( $table, $field ) = explode( '.', $tableField);



      ////////////////////////////////////////////////////
[...]
the result

    $arr_return['data']['values'] = $arr_values;
    return $arr_return;
      // RETURN the result
  }







  ";i:1;i:1;}s:12:"content_size";i:4082;s:13:"content_lines";i:136;s:6:"atLine";i:2330;}i:33;a:7:{s:6:"header";s:54:"function wrap_objectTitle($arr_ts, $conf_tableField) {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:32:"

Wraps the title of the object
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:6:"string";i:1;s:66:"$conf_tableField: The current table.field from the ts filter array";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"Returns the wrapped title";}s:5:"other";a:1:{i:0;s:14:"@version 3.9.6";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';

    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];
    $conf_view_path = 'views.' . $viewWiDot . $mode . '.filter.';

    $conf_wrap = $arr_ts['wrap'];

      // Don't wrap the object title
    if ( ! is_array( $arr_ts['wrap.']['title_s
[...]
###', $str_stdWrap, $conf_wrap );
    }
      // Wrap the object title (TypoScript stdWrap)

    return $conf_wrap;
  }



  ";i:1;i:1;}s:12:"content_size";i:3338;s:13:"content_lines";i:80;s:6:"atLine";i:2476;}i:35;a:7:{s:6:"header";s:58:"private function get_ordered( $arr_rows, $tableField )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:83:"

get_ordered( ): Get rows ordered by Value DESC or ASC supported by PHP multisort
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"$arr_rows   : Result of the SQL query";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"$tableField : Current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:42:"$arr_tableFields : Array with table.fields";}s:5:"other";a:3:{i:0;s:40:"@internal        #32223, 120119, dwildt+";i:1;s:14:"@version 3.9.6";i:2;s:14:"@since   3.9.6";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:23:"#32223, 120119, dwildt+";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot  = $view . '.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode . '.'];

    list($table, $field) = explode( '.', $tableField );
    $arr_ts     = $conf_view['filter.'][$table . '.'][$field . '.'];



      /////////////////////////////////////////////////
[...]
']] = $row['value'];
    }

      // RETURN the ordered rows of the current tablefield
    return $arr_tableFields;
  }



  ";i:1;i:1;}s:12:"content_size";i:1246;s:13:"content_lines";i:52;s:6:"atLine";i:2567;}i:37;a:7:{s:6:"header";s:62:"private function get_treeOrdered( $arr_rows, $tableField )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:68:"

get_treeOrdered: Get the elements ordered to the needs of a tree.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:43:"$arr_rows         : Result of the SQL query";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"$tableField       : Current table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:83:"$arr_tableFields  : Array with the values. Values are wrapped with ul- and li-tags.";}s:5:"other";a:3:{i:0;s:40:"@internal        #32223, 120119, dwildt+";i:1;s:14:"@version 3.9.6";i:2;s:14:"@since   3.9.6";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:23:"#32223, 120119, dwildt+";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot  = $view . '.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode . '.'];

    list($table, $field) = explode( '.', $tableField );
    $arr_ts     = $conf_view['filter.'][$table . '.'][$field . '.'];

      // Parent uid of the root records: 0 of course
    
[...]
OneDim );


      // RETURN the ordered and rendered rows of the current tablefield
    return $arr_tableFields;
  }






  ";i:1;i:1;}s:12:"content_size";i:1670;s:13:"content_lines";i:63;s:6:"atLine";i:2631;}i:39;a:7:{s:6:"header";s:63:"private function set_treeOneDim( $tableField, $uid_parent )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:366:"

set_treeOneDim:  Recursive method. It generates a one dimensional array.
                 Each array has upto three elements:
                 * [obligate] uid   : uid of the record
                 * [obligate] value : value of the record
                 * [optional] array : if the record has children ...
                               It is 0 while starting.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"$tableField : Current table.field.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:69:"$uid_parent : Parent uid of the current record - for recursive calls.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:49:"Result will be allocated to the global $tmpOneDim";}s:5:"other";a:3:{i:0;s:40:"@internal        #32223, 120119, dwildt+";i:1;s:14:"@version 3.9.6";i:2;s:14:"@since   3.9.6";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:23:"#32223, 120119, dwildt+";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    static $tsPath = null;

      // LOOP rows
    foreach( $this->arr_rowsTablefield as $key => $row )
    {
        // CONTINUE current row isn't row with current $uid_parent
      if( $row['treeParentField'] != $uid_parent )
      {
        continue;
      }
        // CONTINUE current row isn't row with current $uid_parent

      $lastPath = $tsPath;
      $tsPath   = 
[...]


      $this->set_treeOneDim( $tableField, $row['uid'] );
      $tsPath   = $lastPath;
    }
      // LOOP rows
  }






  ";i:1;i:1;}s:12:"content_size";i:640;s:13:"content_lines";i:28;s:6:"atLine";i:2711;}i:41;a:7:{s:6:"header";s:48:"private function get_treeRendered( $arr_ts )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:255:"

get_treeRendered:  Method converts a one dimensional array to a multidimensional array.
                   It wraps every element of the array with ul and or li tags.
                   Wrapping depends in position and level of the element in the tree.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_ts     : configuration of the current table.field.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:46:"$arr_result : Array with the rendered elements";}s:5:"other";a:3:{i:0;s:40:"@internal        #32223, 120119, dwildt+";i:1;s:14:"@version 3.9.6";i:2;s:14:"@since   3.9.6";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:23:"#32223, 120119, dwildt+";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Render uid and value of the first item
    $first_item_uid   = $arr_ts['first_item.']['option_value'];
    $tsValue          = $arr_ts['first_item.']['value_stdWrap.']['value'];
    $tsConf           = $arr_ts['first_item.']['value_stdWrap.'];
    $first_item_value = $this->pObj->local_cObj->stdWrap( $tsValue, $tsConf );
      // Render uid and value of the first 
[...]

//      }
//      echo "</pre>";
//    }
      // Development

      // RETURN the result
    return $arr_result;
  }




  ";i:1;i:1;}s:12:"content_size";i:5398;s:13:"content_lines";i:159;s:6:"atLine";i:2752;}i:43;a:7:{s:6:"header";s:66:"function get_wrappedItemClass($arr_ts, $conf_item, $str_order)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:29:"

Get the wrapped item class
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}i:2;a:2:{i:0;s:6:"string";i:1;s:23:"$str_order: asc or desc";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the wrapped item";}s:5:"other";a:1:{i:0;s:14:"@version 3.5.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $conf_item_class = null;
    if (is_array($arr_ts['wrap.']))
    {
      if (is_array($arr_ts['wrap.']['item.']))
      {
        $conf_item_class = $arr_ts['wrap.']['item.']['class'];
      }
    }

    if ($str_order)
    {
      if (!empty ($arr_ts['wrap.']['item.']['class.'][$str_order]))
      {
        $conf_item_class = $arr_ts['wrap.']['item.']['class.'][$str_
[...]
lass . '"';
    }

    $conf_item = str_replace('###CLASS###', $conf_item_class, $conf_item);

    return $conf_item;
  }

  ";i:1;i:1;}s:12:"content_size";i:605;s:13:"content_lines";i:28;s:6:"atLine";i:2922;}i:45;a:7:{s:6:"header";s:64:"function get_wrappedItemStyle($arr_ts, $conf_item, $str_order) {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:3:{s:4:"text";s:29:"

Get the wrapped item style
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}i:2;a:2:{i:0;s:6:"string";i:1;s:23:"$str_order: asc or desc";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the wrapped item";}}s:7:"content";a:2:{i:0;s:394:"    if (!$str_order) {
      $conf_item_style = $arr_ts['wrap.']['item.']['style'];
    }
    if ($str_order) {
      $conf_item_style = $arr_ts['wrap.']['item.']['style.'][$str_order];
    }
    if ($conf_item_style) {
      $conf_item_style = ' style="' . $conf_item_style . '"';
    }
    $conf_item = str_replace('###STYLE###', $conf_item_style, $conf_item);

    return $conf_item;
  }

  ";i:1;i:0;}s:12:"content_size";i:394;s:13:"content_lines";i:14;s:6:"atLine";i:2960;}i:47;a:7:{s:6:"header";s:58:"function get_wrappedItemKey($arr_ts, $uid, $conf_item)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:56:"

get_wrappedItemKey: Wrap the key of the current value
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:7:"integer";i:1;s:18:"$uid: The item uid";}i:2;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the wrapped item";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.1";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:287:"    $str_uid = null;


    // #11844, dwildt, 110102
    if ($uid != $arr_ts['first_item.']['option_value'])
    {
      $str_uid = htmlspecialchars($uid, ENT_QUOTES);
    }
    $conf_item = str_replace('###UID###', $str_uid, $conf_item);

    return $conf_item;
  }


















  ";i:1;i:0;}s:12:"content_size";i:287;s:13:"content_lines";i:30;s:6:"atLine";i:2984;}i:49;a:7:{s:6:"header";s:73:"function get_wrappedItemURL($arr_ts, $tableField, $value, $conf_item)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:49:"

get_wrappedItemURL(): Get the URL for the item
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:1;a:2:{i:0;s:6:"string";i:1;s:46:"$tableField: table.field of the current filter";}i:2;a:2:{i:0;s:6:"string";i:1;s:35:"$value: value of the current filter";}i:3;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the wrapped item";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.4";i:1;s:12:"@since 3.6.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view . '.';
    $conf_view = $conf['views.'][$viewWiDot][$mode . '.'];

    $arr_currPiVars  = $this->pObj->piVars;

      // 13920, 110319, dwildt
      // Set value of the first item to null: it won't become an additional parameter below
    if ($value ==
[...]
rPiVars;
      // Reset $GLOBALS['TSFE']->id
    $GLOBALS['TSFE']->id  = $int_tsfeId;

    return $conf_item;
  }









  ";i:1;i:1;}s:12:"content_size";i:2750;s:13:"content_lines";i:87;s:6:"atLine";i:3027;}i:51;a:7:{s:6:"header";s:99:"function get_wrappedItemSelected($uid, $value, $arr_piVar, $arr_ts, $conf_selected, $conf_item)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:24:"

Get the item selected
";s:5:"param";a:6:{i:0;a:2:{i:0;s:7:"integer";i:1;s:18:"$uid: The item uid";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"$value: The item value";}i:2;a:2:{i:0;s:5:"array";i:1;s:46:"$arr_piVar: The array with the piVar or piVars";}i:3;a:2:{i:0;s:5:"array";i:1;s:41:"$arr_ts: Current TypoScript configuration";}i:4;a:2:{i:0;s:6:"string";i:1;s:49:"$conf_slected: The selected configuration from TS";}i:5;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:49:"Returns the wrapped item selected or not selected";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    //$pos = strpos($this->pObj->str_developer_csvIp, t3lib_div :: getIndpEnv('REMOTE_ADDR'));
    //if ( ! ( $pos === false ) )
    //{
    //  var_dump(__METHOD__ . ' (' . __LINE__ . ')', $this->pObj->objCal->selected_period, $arr_ts['area.']['interval.']['options.']['fields.'][$uid . '.']['value_stdWrap.']['value'], $arr_piVar, $this->pObj->piVars);
    //}

      // dw
[...]
   $conf_item = str_replace( '###ITEM_SELECTED###', $conf_selected, $conf_item );
      #8337

    return $conf_item;
  }

  ";i:1;i:1;}s:12:"content_size";i:1514;s:13:"content_lines";i:54;s:6:"atLine";i:3129;}i:53;a:7:{s:6:"header";s:96:"public function wrap_allItems($obj_ts, $arr_ts, $str_nice_piVar, $key_piVar, $number_of_items) {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:35:"

Wrap all items (wrap the object)
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:52:"$arr_ts: The current TS configuration of the obkject";}i:2;a:2:{i:0;s:6:"string";i:1;s:52:"$str_nice_piVar: The nice name for the current piVar";}i:3;a:2:{i:0;s:6:"string";i:1;s:38:"$key_piVar: The real name of the piVar";}i:4;a:2:{i:0;s:7:"integer";i:1;s:37:"$number_of_items: The number of items";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"Returns the wrapped items/object";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@sice    3.0.1";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:5:"@sice";a:1:{i:0;s:6:"3.0.1 ";}}}s:7:"content";a:2:{i:0;s:507:"
    // #8337, 101011, dwildt
    switch ($obj_ts) {
      case ('CHECKBOX') :
        $conf_size = null;
        $conf_multiple = true;
        break;
      case ('CATEGORY_MENU') :
      case ('RADIOBUTTONS') :
        $conf_size = null;
        $conf_multiple = false;
        break;
      case ('SELECTBOX') :
        $conf_size = $arr_ts['size'];
        #3.4.904
      
[...]
. $obj_ts, $this->pObj->extKey, 2);
      }
    }
    // DRS - Development Reporting System

    return $conf_object;
  }

  ";i:1;i:1;}s:12:"content_size";i:2032;s:13:"content_lines";i:57;s:6:"atLine";i:3197;}i:55;a:4:{s:6:"header";s:28:"function get_tableFields() {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:4:"cDat";a:5:{s:4:"text";s:57:"

get_tableFields(): Set the global arr_conf_tableFields
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:78:"FALSE: filters are set. TRUE: filters aren't set or there is a ts config error";}s:5:"other";a:1:{i:0;s:14:"@version 3.5.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:6:"atLine";i:3261;}i:57;a:8:{s:6:"header";s:49:"function hits_per_filter_item( $str_devider )
  {";s:11:"parentClass";s:21:"tx_browser_pi1_filter";s:11:"sectionText";a:1:{i:0;s:4:"Hits";}s:4:"cDat";a:5:{s:4:"text";s:138:"

hits_per_filter_item( ): Count the hits for each item of each filter.
                         Result is stored in the global $arr_hits
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:68:"$str_devider: Devider between children (multiple items in one field)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:12:"@since 3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"        // RETURN there are no rows
      if ( ! is_array( $this->rows_wo_limit ) )
      {
        return;
      }
        // RETURN there are no rows



      /////////////////////////////////////////////////////////////////
      //
      // LOOP each filter

    foreach ($this->arr_conf_tableFields as $tableField)
    {

      list ($table, $field) = explode('.', $tabl
[...]
er.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_filter.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:2677;s:13:"content_lines";i:99;s:6:"atLine";i:3403;}}}s:14:"MD5_7f2a8e6f26";a:4:{s:8:"filename";s:37:"pi1/class.tx_browser_pi1_flexform.php";s:8:"filesize";i:138842;s:6:"header";a:5:{s:4:"text";s:122:"

The class tx_browser_pi1_flexform bundles all methods for the flexform but any wizard.
See Wizards in the wizard class.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.9.6";i:4;s:14:"@since   2.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:3:"DAT";a:16:{i:1;a:8:{s:6:"header";s:31:"class tx_browser_pi1_flexform {";s:5:"class";i:1;s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:122:"

The class tx_browser_pi1_flexform bundles all methods for the flexform but any wizard.
See Wizards in the wizard class.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.9.6";i:4;s:14:"@since   2.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:4841:"  /////////////////////////////////////////////////
  //
  // Vars set by methods in the current class

  var $mode = false;
  // [integer] The ID of the current mode/view

  //[general]
  var $int_viewsListPid = false;
  // [integer] pid of the result page

  //[list view]
  var $int_singlePid = null;
  // [integer] pid of a single record, #12006

  var $bool_azBrowser = true;
  // [boolean] Display the A-Z-Browser
  var $bool_pageBrowser = true;
  // [boolean] Display the PageBrowser
  var $bool_emptyAtStart = false;
  // [boolean] Display an empty list at start
  var $bool_dontHandleEmptyValues = true;
  // [boolean] Don't handle empty records in list views and don't handle empty fields in single views
  var $bool_searchForm = true;
  // [boolean] Display the Searchbox
  var $bool_searchForm_wiPhrase = true;
  // [boolean] Display the Searchbox Phrase
  var $bool_searchForm_wiColoredSwords = true;
  // [boolean] Display Colored Swords (list view)
  var $bool_searchForm_wiColoredSwordsSingle = false;
  // [boolean] Display Colored Swords (single view)
  var $bool_searchWildcardsManual = false;
  // [boolean] Display Wildcard Phrase
  var $str_searchWildcardCharManual = '*';
  // [string] Display the Searchbox

  var $bool_linkToSingle_wi_piVar_azTab = false;
  // [boolean] Should the URL to a single view contain the parameter azTab?
  var $bool_linkToSingle_wi_piVar_mode = false;
  // [boolean] Should the URL to a single view contain the parameter mode?
  var $bool_linkToSingle_wi_piVar_pointer = false;
  // [boolean] Should the URL to a single view contain the parameter pointer?
  var $bool_linkToSingle_wi_piVar_plugin = true;
  // [boolean] Should the URL to a single view contain the parameter plugin?
  var $bool_linkToSingle_wi_piVar_sort = false;
  // [boolean] Should the URL to a single view contain the parameter sort?

  //[sheet/extend]
    // Uid in tt_content of the Browser Calender User Interface
  var $sheet_extend_cal_ui            = null;
    // Uid of the view in the TypoScript setup
  var $sheet_extend_cal_view          = null;
    // table.field-name of the date begin field
  var $sheet_extend_cal_field_start   = null;
    // table.field-name of the date end field
  var $sheet_extend_cal_field_end     = null;
  //[sheet/extend]

  //[sheet/javascript]
  // #9659, 101013 fsander
    // [boolean] AJAX enabled?
  var $bool_ajax_enabled = false;
    // [boolean] AJAX also used for single view?
  var $bool_ajax_single = false;
    // [string] AJAX transition for list view
  var $str_ajax_list_transition = false;
    // [string] AJAX transition for single view
  var $str_ajax_single_transition = false;
    // [string] AJAX mode for list in single view
  var $str_ajax_list_on_single = false;
  // #9659, 101013 fsander
  var $str_browser_libraries = 'typoscript';
  var $str_jquery_library = 'typoscript';
  // #28562, 110804, dwildt

  var $bool_jquery_ui = false;
  // [boolean] jQuery UI jss should included
  var $bool_jquery_plugins_t3browser = false;
  // [boolean] jQuery plugin t3browser jss should included
  var $bool_css_browser = false;
  // [boolean] Browser CSS should included
  var $bool_css_jqui = false;
  // [boolean] jQuery UI CSS should included

  //[sheet/socialmedia]
  var $str_socialmedia_bookmarks_enabled = false;
  // [boolean] Are socalmedia bookmarks enabled?
  var $str_socialmedia_bookmarks_tableFieldSite_list = false;
  // [string] tableField for the site of the bookmark links
  var $str_socialmedia_bookmarks_tableFieldTitle_list = false;
  // [string] tableField for the tile property of bookmark links
  var $str_socialmedia_bookmarks_tableFieldSite_single = false;
  // [string] tableField for the site of the bookmark links
  var $str_socialmedia_bookmarks_tableFieldTitle_single = false;
  // [string] tableField for the tile property of bookmark links
  var $strCsv_socialmedia_bookmarks_list = false;
  // [string] csvList with the keys of the bookmars in in the TypoScript, which should displayed in list views
  var $strCsv_socialmedia_bookmarks_single = false;
  // [string] csvList with the keys of the bookmars in in the TypoScript, which should displayed in single views
  //[sheet/socialmedia]

  //[sheet/templating]
  var $int_templating_dataQuery = false;
  // [int] key of the dataQuery in the TypoScript, which should added in list views
  var $bool_wrapInBaseClass = true;
  // [boolean] wrap the plugin in with pi_wrapInBaseClass
  //[sheet/templating]

  //[sheet/view]
    // [string] independent (default) || controlled: Calculate total hits.
  var $sheet_viewList_total_hits      = null;
    // [boolean] Enable CSV export
  var $sheet_viewList_csvexport       = null;
    // [boolean] Enable CSV export
  var $sheet_viewList_rotateviews     = null;
  //[sheet/extend]

  // Vars set by methods in the current class

  ";i:1;i:-1;}s:12:"content_size";i:4841;s:13:"content_lines";i:119;s:6:"atLine";i:67;}i:3;a:7:{s:6:"header";s:34:"function __construct($parentObj) {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:75:"    // Set the Parent Object
    $this->pObj = $parentObj;

  }









  ";i:1;i:0;}s:12:"content_size";i:75;s:13:"content_lines";i:13;s:6:"atLine";i:193;}i:5;a:7:{s:6:"header";s:19:"function main()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:128:"

main():  Process the values from the pi_flexform field.
         Process each sheet.
         Allocates values to TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 3.7.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
      //////////////////////////////////////////////////////////////////////
      //
      // Init methods for pi_flexform

    $this->pObj->pi_initPIflexForm();
      // Init methods for pi_flexform



      //////////////////////////////////////////////////////////////////////
      //
      // Development

      // Display values from pi_flexform as an tree
    if (1 
[...]
**********************************************
   *
   * piVars
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:2489;s:13:"content_lines";i:111;s:6:"atLine";i:215;}i:7;a:8:{s:6:"header";s:27:"function prepare_piVars() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:11:"sectionText";a:1:{i:0;s:6:"piVars";}s:4:"cDat";a:3:{s:4:"text";s:264:"

Changes the piVars array, if there is more than one plugin on the current page.
If there is, the piVars[plugin] with the uid of the current plugin is added to the piVars.
If the visitor of the page hasn't selected the current plugin, all piVars will be removed.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    //////////////////////////////////////////////////////////////////////
    //
    // Get the field names for sys_language_content and for l10n_parent

    $str_langField = $GLOBALS['TCA']['tt_content']['ctrl']['languageField'];
    $str_langPid = $GLOBALS['TCA']['tt_content']['ctrl']['transOrigPointerField'];
    // Get the field names for sys_language_content and for
[...]
' . $uid_plugin_selected . ' is added to the array piVars.', $this->pObj->extKey, 0);
    }
    // Add piVar[plugin]

  }

  ";i:1;i:1;}s:12:"content_size";i:7227;s:13:"content_lines";i:177;s:6:"atLine";i:335;}i:9;a:7:{s:6:"header";s:25:"function prepare_mode() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:3:{s:4:"text";s:146:"

Set the class var mode. It is the current mode/view.
The code is corresponding with the mode snippet in tx_brwoser_pi1_zz::prepairePiVars() !!!
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    //////////////////////////////////////
    //
    // Security

    $this->mode = false;
    if (isset ($this->pObj->piVars['mode'])) {
      $this->mode = $this->pObj->objZz->secure_piVar($this->pObj->piVars['mode'], 'integer');
    }
    // Security

    //////////////////////////////////////
    //
    // Set the global piVar_mode

    if (!$this->mode) {
      if (
[...]
**********************************
   *
   * Fields with Priority
   *
   **********************************************/

  ";i:1;i:1;}s:12:"content_size";i:1302;s:13:"content_lines";i:45;s:6:"atLine";i:519;}i:11;a:8:{s:6:"header";s:29:"function sheet_sDEF_views() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:11:"sectionText";a:1:{i:0;s:20:"Fields with Priority";}s:4:"cDat";a:3:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];

    //////////////////////////////////////////////////////////////////////
    //
    // Field views

    $str_views_status = $this->pObj->pi_getFFvalue($arr_piFlexform, 'views', 'sDEF', 'lDEF', 'vDEF');

    // Return, if views have the default status
    if ($str_views_status == 'all') {
      if ($this->pObj
[...]
/***********************************************
   *
   * Sheets
   *
   **********************************************/

  ";i:1;i:1;}s:12:"content_size";i:14053;s:13:"content_lines";i:324;s:6:"atLine";i:571;}i:13;a:8:{s:6:"header";s:27:"function sheet_advanced() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:11:"sectionText";a:1:{i:0;s:6:"Sheets";}s:4:"cDat";a:3:{s:4:"text";s:56:"

The Sheet advanced has properties for the performance
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $str_lang = $this->pObj->lang->lang;

    $conf = $this->pObj->conf;
    $modeWiDot = (int) $this->mode . '.';
    $viewWiDot = $this->pObj->view . '.';
    $conf_view = $this->pObj->conf['views.'][$viewWiDot][$modeWiDot];

    //////////////////////////////////////////////////////////////////////
    //
  
[...]
bool_linkToSingle_wi_piVar_sort . '\'', $this->pObj->extKey, 0);
      }
    }
    // Field searchForm

    return;
  }



  ";i:1;i:1;}s:12:"content_size";i:5745;s:13:"content_lines";i:147;s:6:"atLine";i:901;}i:15;a:7:{s:6:"header";s:30:"function sheet_evaluate( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:47:"

Sheet evaluate: Configuration for evaluation
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:14:"@since   4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet          = 'evaluate';
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];



      //////////////////////////////////////////////////////////////////////
      //
      // Field dontUseDRS

    $this->pObj->bool_dontUseDRS = $this->pObj->pi_getFFvalue($arr_piFlexform, 'dontUseDRS', $sheet, 'lDEF', 'vDEF');
    if ($this->pObj->bool_dontUseDRS)
    {
 
[...]
rm, 'debugJSS', $sheet, 'lDEF', 'vDEF');
      //var_dump('conf 1024', $this->pObj->bool_debugJSS);

    return;
  }






  ";i:1;i:1;}s:12:"content_size";i:1477;s:13:"content_lines";i:48;s:6:"atLine";i:1056;}i:17;a:7:{s:6:"header";s:28:"function sheet_extend( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

Sheet extend:  Administration of extensions for the Browser.
               New in version 4.0
               Available extension only: Browser Calendar UI
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:14:"@since   4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $sheet          = 'extend';
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];



      //////////////////////////////////////////////////////////////////////
      //
      // Field cal_ui

    $field = 'cal_ui';
    $this->sheet_extend_cal_ui = $this->pObj->pi_getFFvalue($arr_piFlexform, $field, $sheet, 'lDEF', 'vDEF');
    if ( $this->pObj->b_drs_flexfor
[...]
this->sheet_extend_cal_field_end . '\'', $this->pObj->extKey, 0);
    }
      // Field cal_field_end



    return;
  }



  ";i:1;i:1;}s:12:"content_size";i:2197;s:13:"content_lines";i:71;s:6:"atLine";i:1115;}i:19;a:7:{s:6:"header";s:29:"function sheet_javascript() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:178:"

sheet_javascript(): If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.5.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $str_lang = $this->pObj->lang->lang;
    $sheet = 'javascript';



      //////////////////////////////////////////////////////////////////////
      //
      // Field jquery_library
      // #13429, dwildt, 110519

    $field = 'jquery_library';
    $this->str_jquery_library = $this->pObj->pi_getFFvalue($a
[...]
ajax_list_on_single . '\'', $this->pObj->extKey, 0);
        }
      }
    }
    // Field list_on_single

    return;
  }

  ";i:1;i:1;}s:12:"content_size";i:13079;s:13:"content_lines";i:293;s:6:"atLine";i:1196;}i:21;a:7:{s:6:"header";s:26:"function sheet_sDEF( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:12:"@since 2.x.x";i:1;s:14:"@version 3.4.4";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"2.x.x ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $modeWiDot = (int) $this->mode . '.';
    $viewWiDot = $this->pObj->view . '.';

    $sheet = 'sDEF';


      //////////////////////////////////////////////////////////////////////
      //
      // Field relations_select

    $field      = 'relations_select';
    $relations  = false;
    $joins      = -1;
 
[...]
$this->pObj->extKey, 0);
      }
    }
      // Field statistics.adjustment.fields.downloadsByVisits


    return;
  }




  ";i:1;i:1;}s:12:"content_size";i:23468;s:13:"content_lines";i:634;s:6:"atLine";i:1498;}i:23;a:7:{s:6:"header";s:30:"function sheet_socialmedia() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:3:{s:4:"text";s:49:"

The sheet socialmedia administrates bookmarks.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $str_lang = $this->pObj->lang->lang;

    $str_enabled = $this->pObj->pi_getFFvalue($arr_piFlexform, 'enabled', 'socialmedia', 'lDEF', 'vDEF');
    switch ($str_enabled) {
      case (false) :
      case ('disabled') :
        // RETURN if bookmarks are disabled
        if ($this->pObj->b_drs_flexform || $t
[...]
 .
      $str_bookmarks_single, $this->pObj->extKey, 0);
    }
    // DRS - Development Reporting System

    return;
  }

  ";i:1;i:1;}s:12:"content_size";i:3450;s:13:"content_lines";i:55;s:6:"atLine";i:2139;}i:25;a:7:{s:6:"header";s:22:"function sheet_tca() {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@since   3.0.1";i:1;s:14:"@version 3.4.4";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.0.1 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.4 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $str_lang = $this->pObj->lang->lang;
    $modeWiDot = (int) $this->mode . '.';
    $viewWiDot = $this->pObj->view . '.';

    //////////////////////////////////////////////////////////////////////
    //
    // Field configuration

    $str_configuration = $this->pObj->pi_getFFvalue($arr_piFlexform, 'config
[...]
 tca: configuration is default. Nothing to do.', $this->pObj->extKey, 0);
        }
        break;
    }

    return;
  }

  ";i:1;i:1;}s:12:"content_size";i:2182;s:13:"content_lines";i:53;s:6:"atLine";i:2203;}i:27;a:7:{s:6:"header";s:31:"function sheet_templating()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.2";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.2 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $str_lang = $this->pObj->lang->lang;
    $modeWiDot = (int) $this->mode . '.';
    $viewWiDot = $this->pObj->view . '.';
    $sheet = 'templating';
    // #9689
    $str_path2template = false;



      //////////////////////////////////////////////////////////////////////
      //
      // Field template

 
[...]
ate.']['file'] . '\'.', $this->pObj->extKey, 0);
    }
    // DRS - Development Reporting System

    return;
  }









  ";i:1;i:1;}s:12:"content_size";i:9006;s:13:"content_lines";i:256;s:6:"atLine";i:2264;}i:29;a:4:{s:6:"header";s:30:"function sheet_viewList( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 4.0.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}}}s:6:"atLine";i:2529;}i:31;a:7:{s:6:"header";s:31:"function sheet_viewSingle()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_flexform";s:4:"cDat";a:5:{s:4:"text";s:158:"

If the current plugin has views selected, only the selected views are available for the plugin.
The method removes "unavailable" views from the TypoScript.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:12:"@since 3.7.0";i:1;s:14:"@version 3.7.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.7.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $modeWiDot = (int) $this->mode . '.';
    $viewWiDot = $this->pObj->view . '.';



      //////////////////////////////////////////////////////////////////////
      //
      // Field display_listview
      // #31156, dwildt, 110806

    $sheet = 'viewSingle';
    $field = 'display_listview';
    $display_li
[...]
m.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_flexform.php']);
}
?>";i:1;i:1;}s:12:"content_size";i:11776;s:13:"content_lines";i:293;s:6:"atLine";i:3350;}}}s:14:"MD5_ce5d79634c";a:4:{s:8:"filename";s:39:"pi1/class.tx_browser_pi1_javascript.php";s:8:"filesize";i:43330;s:6:"header";a:5:{s:4:"text";s:81:"

The class tx_browser_pi1_javascript bundles methods for javascript and AJAX.


";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:15:"@version  3.9.3";i:2;s:15:"@since    3.5.0";i:3;s:17:"@package    TYPO3";i:4;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:11:{i:1;a:8:{s:6:"header";s:33:"class tx_browser_pi1_javascript
{";s:5:"class";i:1;s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:3:{s:4:"text";s:811:"

[CLASS/FUNCTION INDEX of SCRIPT]



  66: class tx_browser_pi1_javascript
  82:     function __construct($parentObj)

             SECTION: CSS
 135:     function class_onchange($obj_ts, $arr_ts, $number_of_items)
 381:     function wrap_ajax_div($template)

             SECTION: Files
 505:     function load_jQuery()
 615:     function addJssFile( $path, $name, $keyPathTs )

             SECTION: Helper
 693:     function set_arrSegment()
 759:     public function addCssFiles()
 809:     public function addJssFiles()
1063:     public function addFile($path, $ie_condition, $name, $keyPathTs, $str_type, $bool_inline )

             SECTION: Dynamic methods
1245:     function dyn_method_load_all_modes( )

TOTAL FUNCTIONS: 10
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:12:"







    ";i:1;i:-1;}s:12:"content_size";i:12;s:13:"content_lines";i:8;s:6:"atLine";i:64;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:196:"    $this->pObj = $parentObj;
  }



























    /***********************************************
    *
    * CSS
    *
    **********************************************/




    ";i:1;i:0;}s:12:"content_size";i:196;s:13:"content_lines";i:38;s:6:"atLine";i:80;}i:5;a:8:{s:6:"header";s:63:"function class_onchange($obj_ts, $arr_ts, $number_of_items)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:11:"sectionText";a:1:{i:0;s:3:"CSS";}s:4:"cDat";a:5:{s:4:"text";s:120:"

class_wi_ajax_onchange(): Set an HTML class for AJAX onload depending on
                          some circumstances
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:63:"$obj_ts: The content object CHECKBOX, RADIOBUTTONS or SELECTBOX";}i:1;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_ts: The TypoScript configuration of the object";}i:2;a:2:{i:0;s:6:"string";i:1;s:33:"$conf_item: The current item wrap";}i:3;a:2:{i:0;s:7:"integer";i:1;s:37:"$number_of_items: The number of items";}i:4;a:2:{i:0;s:6:"string";i:1;s:23:"$str_order: asc or desc";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the wrapped item";}s:5:"other";a:2:{i:0;s:12:"@since 3.5.0";i:1;s:14:"@version 3.5.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // #9659, 101016, dwildt

      //////////////////////////////////////////////////////////////////////
      //
      // Get HTML part with AJAX onchange class

    switch($obj_ts)
    {
      case ('CATEGORY_MENU') :
        $conf_object = $arr_ts['wrap.']['item.']['class'];
//$pos = strpos($this->pObj->str_developer_csvIp, t3lib_div :: getIndpEnv('REMOTE_ADDR'));
/
[...]
 class_onchange won\'t be handled.', $this->pObj->extKey, 3);
        }
    }
    return $arr_ts;
  }



















    ";i:1;i:1;}s:12:"content_size";i:8435;s:13:"content_lines";i:236;s:6:"atLine";i:133;}i:7;a:7:{s:6:"header";s:37:"function wrap_ajax_div($template)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:5:{s:4:"text";s:81:"

wrap_ajax_div(): Wrap the template in a div AJAX tag, if segement[cObj] is set
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:46:"$template: The current content of the template";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:46:"$template unchanged or wrapped in div ajax tag";}s:5:"other";a:2:{i:0;s:12:"@since 3.5.0";i:1;s:14:"@version 3.5.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    // #9659, 101016, dwildt



      //////////////////////////////////////////////////////////////////////
      //
      // RETURN template: segment[cObj] is empty

    if (!$this->pObj->segment['cObj'])
    {
      return $template;
    }
      // RETURN template: segment[cObj] is empty



      //////////////////////////////////////////////////////////////////////
   
[...]
*********************************************
    *
    * Files
    *
    **********************************************/



";i:1;i:1;}s:12:"content_size";i:2315;s:13:"content_lines";i:114;s:6:"atLine";i:379;}i:9;a:8:{s:6:"header";s:26:"function load_jQuery()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:11:"sectionText";a:1:{i:0;s:5:"Files";}s:4:"cDat";a:5:{s:4:"text";s:129:"

load_jQuery(): Load the TYPO3 jQuery class and JSS file. If it is missed,
               load file from the browser ressources
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"True: success. False: error.";}s:5:"other";a:2:{i:0;s:12:"@since 3.5.0";i:1;s:14:"@version 3.6.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.5 ";}}}s:7:"content";a:2:{i:0;s:507:"      // name has to correspondend with similar code in tx_browser_pi1_template.php
    $name = 'jQuery';
    if(isset ($GLOBALS['TSFE']->additionalHeaderData[$this->pObj->extKey.'_'.$name]))
    {
      return true;
    }

      // checks if t3jquery is loaded
    if (t3lib_extMgm::isLoaded('t3jquery'))
    {
      require_once(t3lib_extMgm::extPath('t3jquery').'class.tx_
[...]
S] ' . $path . ' couldn\'t embedded.', $this->pObj->extKey, 3);
      }
    }

    return $bool_success;
  }
















";i:1;i:1;}s:12:"content_size";i:2789;s:13:"content_lines";i:98;s:6:"atLine";i:503;}i:11;a:7:{s:6:"header";s:51:"function addJssFile( $path, $name, $keyPathTs )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:5:{s:4:"text";s:56:"

addJssFile(): Add a JavaScript file the the HTML head
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:29:"$path: Path to the Javascript";}i:1;a:2:{i:0;s:6:"string";i:1;s:42:"$name: For the key of additionalHeaderData";}i:2;a:2:{i:0;s:6:"string";i:1;s:60:"$keyPathTs: The TypoScript element path to $path for the DRS";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"True: success. False: error.";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.5";i:1;s:12:"@since 3.5.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.5 ";}s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    if(isset ($GLOBALS['TSFE']->additionalHeaderData[$this->pObj->extKey.'_'.$name]))
    {
      return true;
    }

    if ( ! empty( $path ) )
    {
      if( substr( $path, 0, 4 ) == 'EXT:' )
      {
          // relative path to the JssFile as measured from the PATH_site (frontend)
          // #32220, uherrmann, 111202
        preg_match( '%^EXT:([a-z0-9_]*)/(.*)$%',
[...]
**************************************
    *
    * Helper
    *
    **********************************************/









";i:1;i:1;}s:12:"content_size";i:1970;s:13:"content_lines";i:69;s:6:"atLine";i:613;}i:13;a:8:{s:6:"header";s:29:"function set_arrSegment()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:5:{s:4:"text";s:58:"

set_arrSegment(): Catch the segments to output for AJAX
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:12:"@since 3.5.0";i:1;s:14:"@version 3.5.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.5.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.5.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // #9659, 101010 fsander
      // initialize all views
    $this->pObj->segment =  array
                            (
                              'header'        => true,
                              'searchform'    => true,
                              'azBrowser'     => true,
                              'list'          => true,
                              
[...]
this->pObj->segment['wrap_piBase'] = false;
        break;
    }
      // switch off views, depending on piVar

  }









";i:1;i:1;}s:12:"content_size";i:1908;s:13:"content_lines";i:57;s:6:"atLine";i:691;}i:15;a:7:{s:6:"header";s:33:"public function addCssFiles()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:5:{s:4:"text";s:59:"

addCssFiles(): Add all needed CSS files to the HTML head
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////
      //
      // css_browser

    if ($this->pObj->objFlexform->bool_css_browser)
    {
      $name         = 'css_browser';
      $path         = $this->pObj->conf['template.']['css.']['browser'];
      $bool_inline  = $this->pObj->conf['template.']['css.']['browser.']['inline'];
      $path_tsC
[...]
i';

      $this->addFile($path, false, $name, $path_tsConf, 'css', $bool_inline);
    }
      // css_jquery_ui
  }









";i:1;i:1;}s:12:"content_size";i:1049;s:13:"content_lines";i:41;s:6:"atLine";i:757;}i:17;a:7:{s:6:"header";s:33:"public function addJssFiles()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:5:{s:4:"text";s:66:"

addJssFiles(): Add all needed JavaScript files to the HTML head
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////
      //
      // jquery_ui

    if ($this->pObj->objFlexform->bool_jquery_ui)
    {
      $name         = 'jquery_ui_library';
      $path         = $this->pObj->conf['javascript.']['jquery.']['ui'];
      $bool_inline  = $this->pObj->conf['javascript.']['jquery.']['ui.']['inline'];
      $path_t
[...]
  $GLOBALS['TSFE']->additionalHeaderData[$this->pObj->extKey.'_'.$name] = $inline_jss;
      // jquery_cleanup
  }










";i:1;i:1;}s:12:"content_size";i:11616;s:13:"content_lines";i:239;s:6:"atLine";i:807;}i:19;a:4:{s:6:"header";s:94:"public function addFile($path, $ie_condition, $name, $keyPathTs, $str_type, $bool_inline )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:4:"cDat";a:5:{s:4:"text";s:56:"

addJssFile(): Add a JavaScript file the the HTML head
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:45:"$path:          Path to the Javascript or CSS";}i:1;a:2:{i:0;s:6:"string";i:1;s:56:"$ie_condition:  Optional condition for Internet Explorer";}i:2;a:2:{i:0;s:6:"string";i:1;s:51:"$name:          For the key of additionalHeaderData";}i:3;a:2:{i:0;s:6:"string";i:1;s:64:"$keyPathTs:     The TypoScript element path to $path for the DRS";}i:4;a:2:{i:0;s:6:"string";i:1;s:26:"$str_type:      css or jss";}i:5;a:2:{i:0;s:7:"boolean";i:1;s:73:"$bool_inline:   true: include css/jss inline. false: include it as a file";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"True: success. False: error.";}s:5:"other";a:2:{i:0;s:12:"@since 3.7.0";i:1;s:14:"@version 3.7.0";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}}}s:6:"atLine";i:1061;}i:21;a:8:{s:6:"header";s:41:"function dyn_method_load_all_modes( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_javascript";s:11:"sectionText";a:1:{i:0;s:15:"Dynamic methods";}s:4:"cDat";a:5:{s:4:"text";s:83:"

dyn_method_load_all_modes(): Return a script for background loading of each view
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$js_complete: JSS skript";}s:5:"other";a:2:{i:0;s:12:"@since 3.9.3";i:1;s:14:"@version 3.9.6";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf       = $this->pObj->conf;
    $mode       = $this->pObj->piVar_mode;
    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $views      = $conf['views.'][$viewWiDot];

      // RETURN script is disabled by the plugin/flexform
    if( ! $this->pObj->objFlexform->sheet_viewList_rotateviews )
    {
      $js_complete = '  // Browser method dyn_method
[...]
hp']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_javascript.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:3192;s:13:"content_lines";i:100;s:6:"atLine";i:1243;}}}s:14:"MD5_61fada8a07";a:4:{s:8:"filename";s:41:"pi1/class.tx_browser_pi1_localisation.php";s:8:"filesize";i:81624;s:6:"header";a:5:{s:4:"text";s:100:"

The class tx_browser_pi1_localisation bundles methods for localisation for the extension browser

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 2.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:3:"DAT";a:14:{i:1;a:8:{s:6:"header";s:35:"class tx_browser_pi1_localisation
{";s:5:"class";i:1;s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:3:{s:4:"text";s:1026:"

[CLASS/FUNCTION INDEX of SCRIPT]



  70: class tx_browser_pi1_localisation
 124:     function __construct($parentObj)

             SECTION: SQL query parts
 180:     function localisationFields_select($table)
 414:     function localisationFields_where($table)
 512:     function localisationSingle_where($table)

             SECTION: Configuring Localisation
 650:     private function localisationConfig()

             SECTION: Consolidation
 774:     function consolidate_filter($rows)
 946:     function consolidate_rows($rows, $table)

             SECTION: Little Helpers
1592:     public function get_localisedUid( $table, $uid )
1670:     function init_typoscript()
1735:     private function is_tableLocalised( $table )
1846:     function propper_locArray($arr_langFields, $table)

             SECTION: SQL
1935:     public function sql_getLanguages( )
2157:     private function sql_localisedUid( $table, $uid )

TOTAL FUNCTIONS: 13
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1637:"    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)

    // [Array] The current TypoScript configuration array
  var $conf       = false;
    // [Integer] The current mode (from modeselector)
  var $mode       = false;
    // [String] 'list' or 'single': The current view
  var $view       = false;
    // [Array] The TypoScript configuration array of the current view
  var $conf_view  = false;
    // [String] TypoScript path to the current view. I.e. views.single.1
  var $conf_path  = false;
    // Variables set by the pObj (by class.tx_browser_pi1.php)



    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Array] arr_localisedTables[$table]
  var $arr_localisedTables        = null;
    // [Array] $arr_localisedTableFields[$table]['id_field']
  var $arr_localisedTableFields   = null;
    // [Integer] See defines in the contructor. Set by localisationConfig().
  var $int_localisation_mode      = null;
    // [Integer] $GLOBALS['TSFE']->sys_language_content. Set by localisationConfig().
  var $lang_id                    = null;
    // [String] $GLOBALS['TSFE']->sys_language_contentOL. Set by localisationConfig().
  var $overlay_mode               = null;
    // [Array] The The current TypoScript configuration array local or global: advanced.localisation
  var $conf_localisation          = false;
    // [String] The The current TypoScript configuration path local or global: advanced.localisation
  var $conf_localisation_path     = false;
    // Variables set by this class









";i:1;i:-1;}s:12:"content_size";i:1637;s:13:"content_lines";i:46;s:6:"atLine";i:68;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:578:"    $this->pObj = $parentObj;

    define('PI1_ANY_LANGUAGE',                  0);
    define('PI1_DEFAULT_LANGUAGE',              1);
    define('PI1_DEFAULT_LANGUAGE_ONLY',         2);
    define('PI1_SELECTED_OR_DEFAULT_LANGUAGE',  3);
    define('PI1_SELECTED_LANGUAGE_ONLY',        4);
    // See method localisationConfig()
    // See class.tx_browser_pi1_views.php: Workaround filter and localisation - Bugfix #9024

  }















  /***********************************************
  *
  * SQL query parts
  *
  **********************************************/




  ";i:1;i:0;}s:12:"content_size";i:578;s:13:"content_lines";i:35;s:6:"atLine";i:122;}i:5;a:8:{s:6:"header";s:46:"function localisationFields_select($table)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:11:"sectionText";a:1:{i:0;s:15:"SQL query parts";}s:4:"cDat";a:5:{s:4:"text";s:702:"

Returns different SELECT statements with the localisation or overlay fields from the current table.
Localisation field i.e.: tt_news.sys_language_content
Overlay field i.e.:      tt_news_cat.title_lang_ol
Result depends on localisation mode and on the TCA.
woAlias:     and SELECT statement with syntax table.field, table,field
filter:      and SELECT statement with syntax table.field AS `table.field`, table,field  AS `table.field`
wiAlias:     same as filter
addedFields: array with added fields in the syntax table.field

Example for woAlias: tx_bzdstaffdirectory_groups.sys_language_uid, tx_bzdstaffdirectory_groups.l18n_parent

The mothod supports languageField and transOrigPointerField only.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:56:"$table: Name of the table in the TYPO3 database / in TCA";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:69:"$arr_andSelect with elements woAlias, filter, wiAlias and addedFields";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
      ////////////////////////////////////////////////////////////////////////////////
      //
      // Load the TCA, if we don't have an table.columns array

    $this->pObj->objZz->loadTCA($table);
      // Load the TCA, if we don't have an table.columns array


    ////////////////////////////////////////////////////////////////////////////////
    //
    // Do we nee
[...]
 query if we have fields for localisation or overlay
    // Building AND SELECT

    return $arr_andSelect;
  }












 ";i:1;i:1;}s:12:"content_size";i:8849;s:13:"content_lines";i:221;s:6:"atLine";i:178;}i:7;a:7:{s:6:"header";s:45:"function localisationFields_where($table)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:5:{s:4:"text";s:205:"

Returns an AND WHERE statement with the localisation fields from the current table,
Result depends on the localisation mode and on TCA.

The mothod supports languageField and transOrigPointerField only.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:56:"$table: Name of the table in the TYPO3 database / in TCA";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"$str_addSelect: An add select string";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ////////////////////////////////////////////////////////////////////////////////
      //
      // Load the TCA, if we don't have an table.columns array

    $this->pObj->objZz->loadTCA($table);
      // Load the TCA, if we don't have an table.columns array



    ////////////////////////////////////////////////////////////////////////////////
    //
    // Get the f
[...]
id_field']." = ".intval($this->lang_id)." ";
    }
    // Building AND WHERE


    return $str_andWhere;
  }















 ";i:1;i:1;}s:12:"content_size";i:2419;s:13:"content_lines";i:87;s:6:"atLine";i:412;}i:9;a:7:{s:6:"header";s:45:"function localisationSingle_where($table)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:5:{s:4:"text";s:180:"

Returns an AND WHERE statement either 'AND table.uid = showuid' or 'AND (table.uid = showuid OR table.l18n_parent = showuid)'
Result depends on the localisation mode and on TCA.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:56:"$table: Name of the table in the TYPO3 database / in TCA";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"$str_andWhere: An andWhere statement";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ////////////////////////////////////////////////////////////////////////////////
      //
      // Load the TCA, if we don't have an table.columns array

    $this->pObj->objZz->loadTCA($table);
      // Load the TCA, if we don't have an table.columns array



    ////////////////////////////////////////////////////////////////////////////////
    //
    // Get the f
[...]
******************************
  *
  * Configuring Localisation
  *
  **********************************************/




   ";i:1;i:1;}s:12:"content_size";i:3511;s:13:"content_lines";i:125;s:6:"atLine";i:510;}i:11;a:8:{s:6:"header";s:41:"private function localisationConfig()
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:11:"sectionText";a:1:{i:0;s:24:"Configuring Localisation";}s:4:"cDat";a:5:{s:4:"text";s:312:"

Get the localisation configuration out of TypoScript config. Set the class vars $lang_id and
$overlay_mode. Returns one of the constants:
PI1_ANY_LANGUAGE, PI1_DEFAULT_LANGUAGE_ONLY, PI1_DEFAULT_LANGUAGE, PI1_SELECTED_LANGUAGE_ONLY, PI1_SELECTED_OR_DEFAULT_LANGUAGE

Constants were defined in the constructor.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:21:"See description above";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      ////////////////////////////////////////////////////////////////////////////////
      //
      // RETURN $this->int_localisation_mode is set before

    if( ! ( $this->int_localisation_mode === null ) )
    {
      return $this->int_localisation_mode;
    }
      // RETURN $this->int_localisation_mode is set before



      //////////////////////////////////////////
[...]
******************************************
  *
  * Consolidation
  *
  **********************************************/




  ";i:1;i:1;}s:12:"content_size";i:3172;s:13:"content_lines";i:115;s:6:"atLine";i:648;}i:13;a:8:{s:6:"header";s:38:"function consolidate_filter($rows)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:11:"sectionText";a:1:{i:0;s:13:"Consolidation";}s:4:"cDat";a:3:{s:4:"text";s:140:"

Removes all default language records, which have a translation.
Process SQL result rows in case of PI1_SELECTED_OR_DEFAULT_LANGUAGE only.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"$rows: SQL result rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:24:"$rows: Consolidated rows";}}s:7:"content";a:2:{i:0;s:507:"    ////////////////////////////////////////////////////////////////////////////////
    //
    // Return, if we don't have an array or we have an empty array

    if (!is_array($rows))
    {
      if ($this->pObj->b_drs_localisation)
      {
        t3lib_div::devlog('[WARN/LOCALISATION] Rows aren\'t an array. Is it ok?', $this->pObj->extKey, 2);
        t3lib_div::devlog
[...]
anguage overlay, if there are lang_ol fields
    // 4. Language Overlay


    // 5. Return $rows
    return $rows;
  }




  ";i:1;i:1;}s:12:"content_size";i:5959;s:13:"content_lines";i:162;s:6:"atLine";i:772;}i:15;a:7:{s:6:"header";s:44:"function consolidate_rows($rows, $table)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:3:{s:4:"text";s:154:"

Consolidate the SQL-Result: The non current language records will be deleted.
Process SQL result rows in case of PI1_SELECTED_OR_DEFAULT_LANGUAGE only.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"$rows: SQL result rows";}i:1;a:2:{i:0;s:6:"string";i:1;s:30:"$table: The current table name";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:24:"$rows: Consolidated rows";}}s:7:"content";a:2:{i:0;s:507:"

    ////////////////////////////////////////////////////////////////////////////////
    //
    // Return, if we don't have an array or we have an empty array

    if (!is_array($rows))
    {
      if ($this->pObj->b_drs_localisation)
      {
        t3lib_div::devlog('[WARN/LOCALISATION] Rows aren\'t an array. Is it ok?', $this->pObj->extKey, 2);
        t3lib_div::devl
[...]
*****************************************
  *
  * Little Helpers
  *
  **********************************************/




  ";i:1;i:1;}s:12:"content_size";i:22460;s:13:"content_lines";i:629;s:6:"atLine";i:944;}i:17;a:8:{s:6:"header";s:52:"public function get_localisedUid( $table, $uid )
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:11:"sectionText";a:1:{i:0;s:14:"Little Helpers";}s:4:"cDat";a:5:{s:4:"text";s:514:"

get_localisedUid( ): Method returns the uid of the localised record.
                     The method checks some conditions:
                     * It returns the given uid, if current language is the default language
                     * It returns the given uid, if the current table isn't localised
                     The method returns a localised uid in case of $this->int_localisation_mode is
                     * PI1_SELECTED_LANGUAGE_ONLY or
                     * PI1_SELECTED_OR_DEFAULT_LANGUAGE
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"$table : name of the cirrent table";}i:1;a:2:{i:0;s:7:"integer";i:1;s:20:"$uid   : current uid";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ////////////////////////////////////////////////////////////////////////////////
      //
      // Init localisation

    $this->localisationConfig( );
      // Init localisation



      ////////////////////////////////////////////////////////////////////////////////
      //
      // RETURN conditions

      // RETURN: Current language is the default language
    i
[...]
//////////////
      //
      // RETURN the localised uid

    return $uid;
      // RETURN the localised uid
  }









  ";i:1;i:1;}s:12:"content_size";i:1816;s:13:"content_lines";i:71;s:6:"atLine";i:1590;}i:19;a:7:{s:6:"header";s:30:"function init_typoscript()
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:3:{s:4:"text";s:85:"

Load the local or global TypoScript configuration array from advanced.localisation
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    ////////////////////////////////////////////////////////////////////////////////
    //
    // Load the local TypoScript configuration

    $viewWiDot                    = $this->view.'.';
    $this->conf_localisation      = $this->conf['views.'][$viewWiDot][$this->mode.'.']['advanced.']['localisation.'];
    $this->conf_localisation_path = 'views.'.$viewWiDot.$this->
[...]
.localisation';
    }
    // Load the global TypoScript configuration if there isn't any local configuration

  }









  ";i:1;i:1;}s:12:"content_size";i:1389;s:13:"content_lines";i:43;s:6:"atLine";i:1668;}i:21;a:7:{s:6:"header";s:48:"private function is_tableLocalised( $table )
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:5:{s:4:"text";s:773:"

is_tableLocalised( ):  Method checks the configuration of the given table in ext_tables.php.
                       It returns true, if the table is localised.
                       Table must have the fields
                       * languageField
                       * transOrigPointerField
                       There is a warning in the DRS, if this field is missing:
                       * transOrigDiffSourceField
                       Method allocates values to the class variables
                       * $arr_localisedTables;
                       * $arr_localisedTableFields
                       and the global variables
                       * $this->pObj->arr_realTables_localised
                       * $this->pObj->arr_realTables_notLocalised
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"name of the current table";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:42:"True, if tbale is localised, false if not.";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN: table.field is checked before

    if( isset( $this->arr_localisedTables[$table] ) )
    {
      return $this->arr_localisedTables[$table];
    }
      // RETURN: table.field is checked before



      /////////////////////////////////////////////////////////////
[...]
TURN is table localised?

    return $this->arr_localisedTables[$table];
      // RETURN is table localised?

  }









  ";i:1;i:1;}s:12:"content_size";i:3624;s:13:"content_lines";i:101;s:6:"atLine";i:1733;}i:23;a:7:{s:6:"header";s:54:"function propper_locArray($arr_langFields, $table)
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:3:{s:4:"text";s:114:"

Make the array propper for localisation fields.
Empty elements will removed. Field names become a table prefix.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:66:"$arr_langFields: Array with the field names of localisation fields";}i:1;a:2:{i:0;s:6:"string";i:1;s:56:"$table: Name of the table in the TYPO3 database / in TCA";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:33:"$arr_langFields: Cleaned up array";}}s:7:"content";a:2:{i:0;s:507:"
    ////////////////////////////////////////////////////////////////////////////////
    //
    // Return, if we don't have an array

    if (!is_array($arr_langFields))
    {
      return false;
    }
    // Return, if we don't have an array


    ////////////////////////////////////////////////////////////////////////////////
    //
    // Remove empty elements

    for
[...]


  /***********************************************
  *
  * SQL
  *
  **********************************************/




  ";i:1;i:1;}s:12:"content_size";i:1430;s:13:"content_lines";i:75;s:6:"atLine";i:1844;}i:25;a:5:{s:6:"header";s:39:"public function sql_getLanguages( )
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:11:"sectionText";a:1:{i:0;s:3:"SQL";}s:4:"cDat";a:5:{s:4:"text";s:442:"

sql_getLanguages( ): Get the rows of languages out of the table sys_language.
                     The method returns null, if there isn't any row in the table.
                     If there is a row, the default language will be the first row.
                     If there is a page TSconfig for the default language,
                     the row of the default language get the label and flag from
                     the page TSconfig
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:62:"$rows: rows of lanuages. Null, if table sys_language is empty.";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:6:"atLine";i:1933;}i:27;a:7:{s:6:"header";s:53:"private function sql_localisedUid( $table, $uid )
  {";s:11:"parentClass";s:27:"tx_browser_pi1_localisation";s:4:"cDat";a:5:{s:4:"text";s:59:"

sql_localisedUid( ): Get the uid of the localised record
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"name of the current table";}i:1;a:2:{i:0;s:7:"integer";i:1;s:22:"uid of the cirrent row";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ////////////////////////////////////////////////////////////////////////////////
      //
      // RETURN conditions

    $bool_return = true;
    switch( $this->int_localisation_mode )
    {
      case( PI1_DEFAULT_LANGUAGE ):
          // RETURN: Current language is the default language
        $bool_return = true;
        if ($this->pObj->b_drs_localisation)
     
[...]
']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_localisation.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:9296;s:13:"content_lines";i:269;s:6:"atLine";i:2155;}}}s:14:"MD5_f30f956dd5";a:4:{s:8:"filename";s:32:"pi1/class.tx_browser_pi1_map.php";s:8:"filesize";i:18314;s:6:"header";a:5:{s:4:"text";s:129:"

The class tx_browser_pi1_map bundles methods for rendering and processing calender based content, filters and category menues

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.6";i:4;s:12:"@since 3.9.6";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:3:"DAT";a:12:{i:1;a:8:{s:6:"header";s:26:"class tx_browser_pi1_map
{";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:3:{s:4:"text";s:819:"

[CLASS/FUNCTION INDEX of SCRIPT]



  69: class tx_browser_pi1_map
  91:     function __construct($pObj)

             SECTION: Map
 126:     public function get_map( $template )

             SECTION: Init
 189:     private function init(  )
 308:     private function init_marker( $template )
 393:     private function render_map( $pObj_template )

             SECTION: Marker
 553:     private function marker_divMap( )
 576:     private function marker_formFilter( )
 599:     private function marker_jssFilter( )
 622:     private function marker_jssRenderMap( )

             SECTION: CSS
 660:     private function css_setHeader( )

             SECTION: JavaScripts
 702:     private function jss_setHeader( )

TOTAL FUNCTIONS: 11
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:218:"
    // [BOOLEAN] Is map enabled? Will set by init( ) while runtime
  var $enabled  = null;
    // [ARRAY] TypoScript configuration array. Will set by init( ) while runtime
  var $confMap            = null;









  ";i:1;i:-1;}s:12:"content_size";i:218;s:13:"content_lines";i:14;s:6:"atLine";i:67;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:166:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Map
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:166;s:13:"content_lines";i:25;s:6:"atLine";i:89;}i:5;a:8:{s:6:"header";s:40:"public function get_map( $template )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:11:"sectionText";a:1:{i:0;s:3:"Map";}s:4:"cDat";a:5:{s:4:"text";s:86:"

get_map( ): Set the marker ###MAP###, if the current template hasn't any map-marker
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"$template: Current HTML template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:35:"$template: Template with map marker";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"      // init the map
    $this->init( );



      ///////////////////////////////////////////////////////////////
      //
      // RETURN: map isn't enabled

    if( ! $this->enabled )
    {
      if( $this->pObj->b_drs_map )
      {
        $prompt = 'RETURN. Map is disabled.';
        t3lib_div :: devLog('[INFO/MAP] ' . $prompt , $this->pObj->extKey, 0);
      }
      
[...]
**********************************************
  *
  * Init
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:822;s:13:"content_lines";i:54;s:6:"atLine";i:124;}i:7;a:8:{s:6:"header";s:29:"private function init(  )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:11:"sectionText";a:1:{i:0;s:4:"Init";}s:4:"cDat";a:5:{s:4:"text";s:60:"

init(): The method sets the globals $enabled and $confMap
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN: $enabled isn't null

    if( ! ( $this->enabled === null ) )
    {
      if( $this->pObj->b_drs_map )
      {
        switch( $this->enabled )
        {
          case( true ):
            $prompt = 'Map is enabled.';
            break;
          default:
       
[...]
NFO/MAP] ' . $prompt , $this->pObj->extKey, 0);
    }
      // DRS - Development Reporting System

    return;
  }








  ";i:1;i:1;}s:12:"content_size";i:2911;s:13:"content_lines";i:109;s:6:"atLine";i:187;}i:9;a:7:{s:6:"header";s:45:"private function init_marker( $template )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:5:{s:4:"text";s:90:"

init_marker( ): Set the marker ###MAP###, if the current template hasn't any map-marker
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"$template: Current HTML template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:35:"$template: Template with map marker";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"      // map marker
    $str_mapMarker = '###MAP###';



      /////////////////////////////////////////////////////////////////
      //
      // Get TypoScript configuration for the current view

    $conf             = $this->pObj->conf;
    $mode             = $this->pObj->piVar_mode;
    $view             = $this->pObj->view;
    $viewWiDot        = $view.'.';
    $th
[...]
tr_mapMarker . PHP_EOL . '      ';

    $template     = implode( '</div>', $arr_divs );

    return $template;
  }








  ";i:1;i:1;}s:12:"content_size";i:2261;s:13:"content_lines";i:75;s:6:"atLine";i:306;}i:11;a:7:{s:6:"header";s:49:"private function render_map( $pObj_template )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:5:{s:4:"text";s:89:"

render_map( ): Set the marker ###MAP###, if the current template hasn't any map-marker
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:58:"$pObj_template: current HTML template of the parent object";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:54:"$pObj_template: parent object template with map marker";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"      // map marker
    $str_mapMarker = '###MAP###';

      // Default content of the map marker
    $str_map =  '<div style="border:2px solid red;text-align:center;color:red;padding:1em;">' .
                  __METHOD__ . ' (' . __LINE__ . '): Error. MAP isn\'t rendered
                </div>';



      ///////////////////////////////////////////////////////////////////
[...]
*********************************************
  *
  * Marker
  *
  **********************************************/








  ";i:1;i:1;}s:12:"content_size";i:4387;s:13:"content_lines";i:151;s:6:"atLine";i:391;}i:13;a:8:{s:6:"header";s:37:"private function marker_divMap( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:11:"sectionText";a:1:{i:0;s:6:"Marker";}s:4:"cDat";a:5:{s:4:"text";s:59:"

marker_divMap( ): get the content for the current marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"$content: current content";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:225:"    $cObj_name  = $this->confMap['marker.']['div_map'];
    $cObj_conf  = $this->confMap['marker.']['div_map.'];
    $content    = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);

    return $content;
  }








  ";i:1;i:0;}s:12:"content_size";i:225;s:13:"content_lines";i:14;s:6:"atLine";i:551;}i:15;a:7:{s:6:"header";s:41:"private function marker_formFilter( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:5:{s:4:"text";s:63:"

marker_formFilter( ): get the content for the current marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"$content: current content";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:233:"    $cObj_name  = $this->confMap['marker.']['form_filter'];
    $cObj_conf  = $this->confMap['marker.']['form_filter.'];
    $content    = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);

    return $content;
  }








  ";i:1;i:0;}s:12:"content_size";i:233;s:13:"content_lines";i:14;s:6:"atLine";i:574;}i:17;a:7:{s:6:"header";s:40:"private function marker_jssFilter( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:5:{s:4:"text";s:62:"

marker_jssFilter( ): get the content for the current marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"$content: current content";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:231:"    $cObj_name  = $this->confMap['marker.']['jss_filter'];
    $cObj_conf  = $this->confMap['marker.']['jss_filter.'];
    $content    = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);

    return $content;
  }








  ";i:1;i:0;}s:12:"content_size";i:231;s:13:"content_lines";i:14;s:6:"atLine";i:597;}i:19;a:7:{s:6:"header";s:43:"private function marker_jssRenderMap( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:4:"cDat";a:5:{s:4:"text";s:65:"

marker_jssRenderMap( ): get the content for the current marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"$content: current content";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:364:"    $cObj_name  = $this->confMap['marker.']['jss_renderMap'];
    $cObj_conf  = $this->confMap['marker.']['jss_renderMap.'];
    $content    = $this->pObj->cObj->cObjGetSingle($cObj_name, $cObj_conf);

    return $content;
  }









  /***********************************************
  *
  * CSS
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:364;s:13:"content_lines";i:29;s:6:"atLine";i:620;}i:21;a:5:{s:6:"header";s:37:"private function css_setHeader( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:11:"sectionText";a:1:{i:0;s:3:"CSS";}s:4:"cDat";a:5:{s:4:"text";s:50:"

css_setHeader( ): Include CSS for openStreetMap
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:6:"atLine";i:658;}i:23;a:8:{s:6:"header";s:37:"private function jss_setHeader( )
  {";s:11:"parentClass";s:18:"tx_browser_pi1_map";s:11:"sectionText";a:1:{i:0;s:11:"JavaScripts";}s:4:"cDat";a:5:{s:4:"text";s:50:"

jss_setHeader( ): Include JSS for openStreetMap
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:14:"@since   3.9.6";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.6 ";}}}s:7:"content";a:2:{i:0;s:507:"    $name_prefix = 'jss_';

      // Include openLayers
    $name         = $name_prefix . 'openLayers';
    $path         = $this->confMap['javascripts.']['lib.']['openLayers'];
    $bool_inline  = $this->confMap['javascripts.']['lib.']['openLayers.']['inline'];
    $path_tsConf  = 'javascripts.lib.openLayers';
    $this->pObj->objJss->addFile($path, false, $name, $path_t
[...]
1_map.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_map.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:1464;s:13:"content_lines";i:40;s:6:"atLine";i:700;}}}s:14:"MD5_8b3dd71d4a";a:4:{s:8:"filename";s:35:"pi1/class.tx_browser_pi1_marker.php";s:8:"filesize";i:35798;s:6:"header";a:5:{s:4:"text";s:84:"

The class tx_browser_pi1_marker bundles marker methods for the extension browser

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:16:"@version   3.7.0";i:4;s:16:"@since     3.4.4";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:31:"class tx_browser_pi1_marker
  {";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:3:{s:4:"text";s:727:"

[CLASS/FUNCTION INDEX of SCRIPT]



  59: class tx_browser_pi1_marker
  90:     function __construct($parentObj)

             SECTION: Session markers
 117:     function session_marker($arr_tsConf, $elements)

             SECTION: Markers
 191:     function substitute_tablefield_marker($arr_multi_dimensional)
 419:     function substitute_marker($arr_multi_dimensional, $marker)
 575:     function substitute_marker_recurs($arr_multi_dimensional, $elements)
 895:     function extend_marker_wi_cObjData($markerArray)
 935:     function extend_marker_wi_pivars($markerArray)
 974:     function replace_left_over($str_content)

TOTAL FUNCTIONS: 8
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:519:"
    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)


    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Array] The current TypoScript configuration array
  var $conf               = false;
    // [Array] Temporarily array for storing piVars
  var $tmp_piVars         = false;
    // [Array] Array with all keys of the TYPO3 array $GLOBALS
  var $arr_t3global_keys  = false;







";i:1;i:-1;}s:12:"content_size";i:519;s:13:"content_lines";i:23;s:6:"atLine";i:57;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:224:"    $this->pObj = $parentObj;
    $this->conf = $this->pObj->conf;
  }









    /***********************************************
    *
    * Session markers
    *
    **********************************************/

    ";i:1;i:0;}s:12:"content_size";i:224;s:13:"content_lines";i:18;s:6:"atLine";i:88;}i:5;a:8:{s:6:"header";s:51:"function session_marker($arr_tsConf, $elements)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:11:"sectionText";a:1:{i:0;s:15:"Session markers";}s:4:"cDat";a:3:{s:4:"text";s:42:"

Returns the value for a $GLOBALS marker
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"$arr_tsConf: The current TypoScript configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$elements: Array with the element session";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"The value from the TSFE array";}}s:7:"content";a:2:{i:0;s:507:"
    $str_sess_key  = $arr_tsConf['session.']['key'];  // i.e: ses
    $str_sess_name = $arr_tsConf['session.']['name']; // i.e: wt_cart_cart
    $arr_session   = $GLOBALS['TSFE']->fe_user->getKey($str_sess_key, $str_sess_name); // get already exting products from session

      // RETURN default value, if we don't have any session
    if(!is_array($arr_session) || count($
[...]
***********************************
    *
    * Markers
    *
    **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1403;s:13:"content_lines";i:59;s:6:"atLine";i:115;}i:7;a:8:{s:6:"header";s:65:"function substitute_tablefield_marker($arr_multi_dimensional)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:11:"sectionText";a:1:{i:0;s:7:"Markers";}s:4:"cDat";a:5:{s:4:"text";s:520:"

substitute_tablefield_marker():  Replace database markers:
                                 Replace all markers in the given multidimensional array like the TypoScript
                                 configuration with the real values from the SQL result (with table.field values)
                                 * The method extends the SQL result with all piVar values. ###CHASH### has a process.
                                 * This method should supersede the deprecated method substitute_marker_recursive ()
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_multi_dimensional: Multi-dimensional array like an TypoScript array";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$elements: The current row of the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"$arr_multi_dimensional: The current Multi-dimensional array with substituted markers";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:14:"@since   3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $elements = $this->pObj->elements;



      /////////////////////////////////////
      //
      // RETURN there isn't any element

    if(empty($elements))
    {
      return $arr_multi_dimensional;
    }
      // RETURN there isn't any element



      /////////////////////////////////////
      //
      // Get the children devider configuration

      // Get arr_chi
[...]
ipt->oneDim_to_tree($arr_one_dimensional);
      // #12472, 110124, dwildt
    return $arr_multi_dimensional;
  }









  ";i:1;i:1;}s:12:"content_size";i:7931;s:13:"content_lines";i:213;s:6:"atLine";i:189;}i:9;a:7:{s:6:"header";s:63:"function substitute_marker($arr_multi_dimensional, $marker)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:5:{s:4:"text";s:455:"

substitute_marker():  Replace markers:
                      Replace all markers in the given multidimensional array like the TypoScript configuration
                      with the values from the given marker array
                                 * The method extends the SQL result with all piVar values. ###CHASH### has a process.
                                 * This method should supersede the deprecated method substitute_marker_recursive ()
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_multi_dimensional: Multi-dimensional array like an TypoScript array";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$elements: The current row of the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"$arr_multi_dimensional: The current Multi-dimensional array with substituted markers";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:14:"@since   3.6.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN there isn't any element

    if(empty($marker))
    {
      return $arr_multi_dimensional;
    }
      // RETURN there isn't any element



      //////////////////////////////////////////////////////////////////////////
      //
      // Add to the $marker piVars and 
[...]
/ Rebuild multidimensional array



      // RETURN multidimensional array
    return $arr_multi_dimensional;
  }









  ";i:1;i:1;}s:12:"content_size";i:5008;s:13:"content_lines";i:143;s:6:"atLine";i:417;}i:11;a:7:{s:6:"header";s:72:"function substitute_marker_recurs($arr_multi_dimensional, $elements)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:5:{s:4:"text";s:278:"

[DEPRECATED] Use substitute_tablefield_marker()

substitute_marker_recurs(): Replace all markers in a multi-dimensional array like an TypoScript array with the real values from the SQL result
The method extends the SQL result with all piVar values. ###CHASH### has a process.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_multi_dimensional: Multi-dimensional array like an TypoScript array";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$elements: The current row of the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"$arr_multi_dimensional: The current Multi-dimensional array with substituted markers";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.2";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.2 ";}}}s:7:"content";a:2:{i:0;s:507:"
      // 110312, dwildt
    //return $this->substitute_tablefield_marker($arr_multi_dimensional);

    $conf       = $this->pObj->conf;
    $conf_view  = $this->pObj->conf['views.'][$this->pObj->view.'.'][$this->pObj->piVar_mode.'.'];



      /////////////////////////////////////
      //
      // Get arr_children_to_devide as array

//var_dump(__METHOD__ . ': ' . __LINE
[...]
  }
      // Loop through the current level of the multi-dimensional array

    return $arr_multi_dimensional;
  }








  ";i:1;i:1;}s:12:"content_size";i:11115;s:13:"content_lines";i:309;s:6:"atLine";i:573;}i:13;a:7:{s:6:"header";s:52:"function extend_marker_wi_cObjData($markerArray)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:5:{s:4:"text";s:175:"

extend_marker_wi_cObjData: Extend the given marker array with key/values from cObj->data,
                           the data of the tt_content record of the browser plugin
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:32:"$markerArray: Array with markers";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:41:"$markerArray: Array with markers extended";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    /////////////////////////////////////
    //
    // Add to the marker array the piVars

    foreach ($this->pObj->cObj->data as $key_cObjData => $value_cObjData)
    {
      if(!empty($value_cObjData))
      {
        $markerArray['###TT_CONTENT.'.strtoupper($key_cObjData).'###'] = $value_cObjData;
        if ($this->pObj->boolFirstRow && $this->pObj->b_drs_templating
[...]
, it will become '.$value_cObjData, $this->pObj->extKey, 1);
        }
      }
    }

    return $markerArray;
  }








  ";i:1;i:1;}s:12:"content_size";i:866;s:13:"content_lines";i:30;s:6:"atLine";i:893;}i:15;a:4:{s:6:"header";s:50:"function extend_marker_wi_pivars($markerArray)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:5:{s:4:"text";s:89:"

extend_marker_wi_pivars: Extend the given marker array with key/values from the piVars
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:32:"$markerArray: Array with markers";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:41:"$markerArray: Array with markers extended";}s:5:"other";a:2:{i:0;s:14:"@version 2.0.0";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"2.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:6:"atLine";i:933;}i:17;a:7:{s:6:"header";s:44:"function replace_left_over($str_content)
  {";s:11:"parentClass";s:21:"tx_browser_pi1_marker";s:4:"cDat";a:5:{s:4:"text";s:101:"

replace_left_over(): Replace all markers, which are left over
                     Feature: #28657
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:29:"$str_content: current content";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:30:"$str_content: rendered content";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
      // Get configuration from the flexform
      // Bugfix     #29738, uherrmann, 110913
    $sheet = 'evaluate';
    $field = 'handle_marker';
    $arr_piFlexform = $this->pObj->cObj->data['pi_flexform'];
    $handle_marker  = $this->pObj->pi_getFFvalue($arr_piFlexform, $field, $sheet, 'lDEF', 'vDEF');

      // Switch configuration
    switch($handle_marker)
    {
   
[...]
ker.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_marker.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:2208;s:13:"content_lines";i:80;s:6:"atLine";i:972;}}}s:14:"MD5_e7b1d2e4cf";a:4:{s:8:"filename";s:38:"pi1/class.tx_browser_pi1_multisort.php";s:8:"filesize";i:34466;s:6:"header";a:5:{s:4:"text";s:74:"

The class tx_browser_pi1_multisort bundles methods for ordering rows.


";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:15:"@since    3.4.4";i:2;s:15:"@version  3.6.3";i:3;s:17:"@package    TYPO3";i:4;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:6:"@since";a:1:{i:0;s:6:"3.4.4 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:8:{i:1;a:8:{s:6:"header";s:32:"class tx_browser_pi1_multisort
{";s:5:"class";i:1;s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:3:{s:4:"text";s:566:"

[CLASS/FUNCTION INDEX of SCRIPT]



  57: class tx_browser_pi1_multisort
  73:     function __construct($parentObj)
 103:     function multisort_rows()
 330:     function multisort_mm_children_list($rows)
 361:     function multisort_mm_children( $rows )
 490:     function multisort_mm_children_single($rows)

             SECTION: Helper
 856:     function multisort_upto_6_level($arr_multisort)
 949:     function multisort_rows_upto_6_level($arr_multisort, $rows)

TOTAL FUNCTIONS: 7
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:12:"







    ";i:1;i:-1;}s:12:"content_size";i:12;s:13:"content_lines";i:8;s:6:"atLine";i:55;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:57:"    $this->pObj = $parentObj;
  }



















    ";i:1;i:0;}s:12:"content_size";i:57;s:13:"content_lines";i:21;s:6:"atLine";i:71;}i:5;a:7:{s:6:"header";s:29:"function multisort_rows()
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:5:{s:4:"text";s:58:"

Order the rows depending on csvOrderBy and piVars[sort]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:45:"&$array: Reference to the array with the rows";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 3.4.5";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

    $conf_view    = $conf['views.'][$viewWiDot][$mode.'.'];
    $b_synonym    = $conf_view['functions.']['synonym'];

    $args                 = false;
    $arr_usedTableFields  = array();  //:todo: Wird nicht gefuellt
    $csvOrderBy           
[...]
 . ': ' . __LINE__, $rows);
    $this->pObj->rows = $rows;
    // Write the result to the global rows array
  }









    ";i:1;i:1;}s:12:"content_size";i:6943;s:13:"content_lines";i:216;s:6:"atLine";i:101;}i:7;a:7:{s:6:"header";s:46:"function multisort_mm_children_list($rows)
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:5:{s:4:"text";s:81:"

multisort_mm_children_list(): Order children elements depending on csvOrderBy.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:20:"$rows : current rows";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:3:{i:0;s:46:"@internal  http://forge.typo3.org/issues/13803";i:1;s:16:"@since     3.6.3";i:2;s:16:"@version   3.6.3";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:36:"http://forge.typo3.org/issues/13803 ";}s:6:"@since";a:1:{i:0;s:6:"3.6.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}}}s:7:"content";a:2:{i:0;s:43:"    return $rows;
  }

















    ";i:1;i:0;}s:12:"content_size";i:43;s:13:"content_lines";i:19;s:6:"atLine";i:328;}i:9;a:7:{s:6:"header";s:43:"function multisort_mm_children( $rows )
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:5:{s:4:"text";s:202:"

multisort_mm_children(): Order children elements
                         Result is one row with ordered children elements.
                         It will be handled the field sorting only to date.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:19:"$row  : Current row";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:34:"$row  : Row with ordered childrens";}s:5:"other";a:2:{i:0;s:16:"@since     3.6.3";i:1;s:16:"@version   3.6.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.6.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot          = $view.'.';
    $conf_view          = $conf['views.'][$viewWiDot][$mode.'.'];
    $conf_path          = 'views.' . $viewWiDot . $mode. '.';
    $conf_orderChildren = $conf_view['orderBy.'];



      ///////////////////////////////////////////////////
[...]
     // Loop: ordered values
      }
        // Loop: queries
    }
      // Loop: rows



    return $rows;
  }








    ";i:1;i:1;}s:12:"content_size";i:3648;s:13:"content_lines";i:116;s:6:"atLine";i:359;}i:11;a:7:{s:6:"header";s:48:"function multisort_mm_children_single($rows)
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:5:{s:4:"text";s:248:"

multisort_mm_children_single(): Order children elements depending on csvOrderBy.
                                Result is one row with ordered children elements.
                                It will be handled the field sorting only to date.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:12:"current rows";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:3:{i:0;s:45:"@internal  http://forge.typo3.org/issues/9727";i:1;s:16:"@since     3.4.3";i:2;s:16:"@version   3.6.3";}s:11:"other_index";a:3:{s:9:"@internal";a:1:{i:0;s:35:"http://forge.typo3.org/issues/9727 ";}s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $csvOrderBy           = $this->pObj->objSqlAut->orderBy();
    $arrOrderByWiAscDesc  = $this->pObj->objZz->getCSVasArray($csvOrderBy);
    $rows                 = $this->pObj->rows;
//if($this->pObj->cObj->data['uid'] == 23)
//{
//  var_dump(__METHOD__ . ': ' . __LINE__, $rows);
//}



      /////////////////////////////////////////////////////////////////
      //
   
[...]
****************************************
    *
    * Helper
    *
    **********************************************/







";i:1;i:1;}s:12:"content_size";i:11152;s:13:"content_lines";i:356;s:6:"atLine";i:488;}i:13;a:5:{s:6:"header";s:51:"function multisort_upto_6_level($arr_multisort)
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:5:{s:4:"text";s:50:"

multisort_upto_6_level: multisort upto 6 arrays
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_multisort  : array with elements (arrays) for multisort";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"$arr_multisort  : ordered";}s:5:"other";a:2:{i:0;s:14:"@since   3.4.3";i:1;s:14:"@version 3.4.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:6:"atLine";i:854;}i:15;a:7:{s:6:"header";s:63:"function multisort_rows_upto_6_level($arr_multisort, $rows)
  {";s:11:"parentClass";s:24:"tx_browser_pi1_multisort";s:4:"cDat";a:5:{s:4:"text";s:126:"

multisort_rows_upto_6_level: multisort rows with upto 6 arrays


                                 : [rows]          ordered
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_multisort  : array with elements (arrays) for multisort";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$rows           : Result of a database query";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:41:"$arr_return     : [arr_multisort] ordered";}s:5:"other";a:2:{i:0;s:14:"@since   3.4.3";i:1;s:14:"@version 3.4.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    /////////////////////////////////////////////////////////////////
    //
    // Process array_multisort

    if((count($arr_multisort) -1 ) == 0)
    {
      array_multisort(
        $arr_multisort[0]['table.field'], $arr_multisort[0]['int_orderFlag'], $arr_multisort[0]['int_typeFlag'],
        $rows
      );
    }
    if((count($arr_multisort) -1 ) == 1)
    {
      a
[...]
php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_multisort.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:4374;s:13:"content_lines";i:97;s:6:"atLine";i:947;}}}s:14:"MD5_9d3d5d3c10";a:4:{s:8:"filename";s:33:"pi1/class.tx_browser_pi1_navi.php";s:8:"filesize";i:76572;s:6:"header";a:5:{s:4:"text";s:140:"

The class tx_browser_pi1_navi bundles methods for navigation like the A-Z-Browser
or the page broser. It is part of the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:20:"@version       3.7.3";i:4;s:12:"@since 2.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.7.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:3:"DAT";a:13:{i:1;a:8:{s:6:"header";s:27:"class tx_browser_pi1_navi
{";s:5:"class";i:1;s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:3:{s:4:"text";s:942:"

[CLASS/FUNCTION INDEX of SCRIPT]



  67: class tx_browser_pi1_navi
 116:     public function __construct($parentObj)

             SECTION: A-Z browser
 155:     public function azBrowser($arr_data)
 383:     public function azTemplate($arr_data)
 649:     public function azTabArray($arr_data)
1089:     public function azRowsInitial($arr_data)

             SECTION: pagebrowser
1357:     public function tmplPageBrowser($arr_data)

             SECTION: mode selector
1596:     public function prepaireModeSelector()
1663:     public function tmplModeSelector($arr_data)

             SECTION: record browser
1785:     public function recordbrowser_get($str_content)
1872:     public function recordbrowser_callListView()
1941:     private function recordbrowser_rendering()
2271:     public function recordbrowser_set_session_data($rows)

TOTAL FUNCTIONS: 12
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1058:"
    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)

  var $conf       = false;
    // [Array] The current TypoScript configuration array
  var $mode       = false;
    // [Integer] The current mode (from modeselector)
  var $view       = false;
    // [String] 'list' or 'single': The current view
  var $conf_view  = false;
    // [Array] The TypoScript configuration array of the current view
  var $conf_path  = false;
    // [String] TypoScript path to the current view. I.e. views.single.1
    // Variables set by the pObj (by class.tx_browser_pi1.php)


    //////////////////////////////////////////////////////
    //
    // Variables set by this class

  var $bool_synonyms    = false;
    // [Boolean] It's true, if there are used synonyms
  var $bool_utf8        = true;
    // [Boolean] true, if current charset is utf-8. Is set by zz::b_TYPO3_utf8() while runtime
  var $sql_initialField = false;
    // The initial field name in the SQL result (azRows)











 ";i:1;i:-1;}s:12:"content_size";i:1058;s:13:"content_lines";i:39;s:6:"atLine";i:65;}i:3;a:7:{s:6:"header";s:43:"public function __construct($parentObj)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:5:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:15:"@version  3.7.3";i:1;s:15:"@since    2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:355:"    // Set the Parent Object
    $this->pObj = $parentObj;
      // 111023, uherrmann, #9912: t3lib_div::convUmlauts() is deprecated
    $this->t3lib_cs_obj = t3lib_div::makeInstance('t3lib_cs');
  }









    /***********************************************
    *
    * A-Z browser
    *
    **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:355;s:13:"content_lines";i:28;s:6:"atLine";i:114;}i:5;a:8:{s:6:"header";s:40:"public function azBrowser($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:11:"sectionText";a:1:{i:0;s:11:"A-Z browser";}s:4:"cDat";a:5:{s:4:"text";s:118:"

Returns an array with used tables and fields out of the TypoScript SQL query parts.
The tables will have real names
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:37:"Array with elements rows and template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Array with the syntax array[table][] = field";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.3";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.3 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $template       = $arr_data['template'];
    $rows           = $arr_data['rows'];

    $arr_return['data']['rows']     = $rows;
    $arr_return['data']['template'] = $template;

    $lDisplay = $this->pObj->lDisplayList['display.'];



      /////////////////////////////////////
      //
      // Set global bool_-_utf8

      // + 111023, dwildt, #9912: t3lib_div::conv
[...]
'template']   = $template;

    $GLOBALS['TSFE']->id = $int_tsfeId; // #9458
    return $arr_return;

  }


















 ";i:1;i:1;}s:12:"content_size";i:5980;s:13:"content_lines";i:220;s:6:"atLine";i:153;}i:7;a:7:{s:6:"header";s:41:"public function azTemplate($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:3:{s:4:"text";s:50:"

Building the HTML template with the A-Z-Browser
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:48:"Array with elements azTabArray, tabIds, template";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"Array data with the element template";}}s:7:"content";a:2:{i:0;s:507:"    $lArrTabs = $arr_data['azTabArray'];
    $arr_tsId = $arr_data['tabIds'];
    $template = $arr_data['template'];

    $arr_return['data']['template'] = $template;

    $langKey  = $GLOBALS['TSFE']->lang;

    $int_key_defaultTab   = $this->pObj->conf['navigation.']['a-z_Browser.']['defaultTab'];
    $arr_defaultTab       = $this->pObj->conf['navigation.']['a-z_Browser.
[...]
e

    $arr_return['data']['template'] = $template;
    return $arr_return;
    // Return the template
  }

















 ";i:1;i:1;}s:12:"content_size";i:9277;s:13:"content_lines";i:257;s:6:"atLine";i:381;}i:9;a:7:{s:6:"header";s:41:"public function azTabArray($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:5:{s:4:"text";s:53:"

Generates an array with informations for every tab
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:35:"Array with elements azRows and rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:52:"Array data with elements azTabArray, tabIds and rows";}s:5:"other";a:1:{i:0;s:21:"@version        3.4.3";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $azRows                           = $arr_data['azRows'];
    $rows                             = $arr_data['rows'];
    $arr_return['data']['azTabArray'] = false;
    $arr_return['data']['tabIds']     = false;
    $arr_return['data']['rows']       = $rows;


    //////////////////////////////////////////////////////
    //
    // Initial Values

    $int_azRows_all    
[...]
tsId;
    $arr_return['data']['rows']       = $rows;

    return $arr_return;
    // RETURN the result
  }

















 ";i:1;i:1;}s:12:"content_size";i:12669;s:13:"content_lines";i:432;s:6:"atLine";i:647;}i:11;a:7:{s:6:"header";s:44:"public function azRowsInitial($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:3:{s:4:"text";s:83:"

Building the SQL query for the A-Z-Browser. Exxecute the query. Return the rows.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"Array with the current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:34:"Array data with the element azRows";}}s:7:"content";a:2:{i:0;s:507:"    $arr_return['error']['status']  = false;
    $arr_return['data']['azRows']   = false;
    $rows                           = $arr_data['rows'];


    ///////////////////////////////////////////////
    //
    // RETURN if we got an empty result

    if (!is_array($rows) || (is_array($rows) && count($rows) < 1))
    {
      $arr_return['data']['azRows'] = false;
      re
[...]
********************************
    *
    * pagebrowser
    *
    **********************************************/









 ";i:1;i:1;}s:12:"content_size";i:8577;s:13:"content_lines";i:260;s:6:"atLine";i:1087;}i:13;a:8:{s:6:"header";s:46:"public function tmplPageBrowser($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:11:"sectionText";a:1:{i:0;s:11:"pagebrowser";}s:4:"cDat";a:3:{s:4:"text";s:55:"

Building the page browser. Returns the HTML template
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:40:"Array with elements template and display";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"template";}}s:7:"content";a:2:{i:0;s:507:"
    $int_currTab    = $arr_data['tabIds']['active'];
    $arr_currRowIds = $arr_data['azTabArray'][$int_currTab]['keyRow'];

    $template       = $arr_data['template'];
    $rows           = $arr_data['rows'];

    $arr_return['data']['template'] = $template;
    $arr_return['data']['rows']     = $rows;



      ///////////////////////////////////////////////
      //
  
[...]
*********************************
    *
    * mode selector
    *
    **********************************************/



    ";i:1;i:1;}s:12:"content_size";i:7124;s:13:"content_lines";i:232;s:6:"atLine";i:1355;}i:15;a:8:{s:6:"header";s:42:"public function prepaireModeSelector()
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:11:"sectionText";a:1:{i:0;s:13:"mode selector";}s:4:"cDat";a:3:{s:4:"text";s:82:"

Prepaire an array for the mode selector. Allocate a value to $this->piVar_mode.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:33:"Array with the modeSelector names";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_return = array();
    $arr_return['error']['status'] = false;



      ///////////////////////////////////////////////
      //
      // RETURN with an error, if there are no views

    if( ! is_array( $this->conf['views.'] ) )
    {
      $str_header  = '<h1 style="color:red">'.$this->pObj->pi_getLL('error_typoscript_h1').'</h1>';
      $str_prompt  = '<p style=
[...]
t, $this->pObj->extKey, 1);
      }
    }
      // DRS - Development Reporting System

    return $arr_return;
  }









 ";i:1;i:1;}s:12:"content_size";i:1814;s:13:"content_lines";i:59;s:6:"atLine";i:1594;}i:17;a:7:{s:6:"header";s:47:"public function tmplModeSelector($arr_data)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:3:{s:4:"text";s:40:"

Building the mode selector HTML code.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:50:"Array with the template and the mode selector tabs";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"template";}}s:7:"content";a:2:{i:0;s:507:"
    $template   = $arr_data['template'];
    $arr_items  = $arr_data['arrModeItems'];



      /////////////////////////////////////
      //
      // Without items don't display any tabs

    if (count($arr_items) <= 1) {
        // We don't have a mode selector
      $template = $this->pObj->cObj->substituteSubpart($template, '###MODESELECTOR###', '', true);
      if ($
[...]
*****************************
    *
    * record browser
    *
    **********************************************/









 ";i:1;i:1;}s:12:"content_size";i:3787;s:13:"content_lines";i:111;s:6:"atLine";i:1661;}i:19;a:8:{s:6:"header";s:51:"public function recordbrowser_get($str_content)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:11:"sectionText";a:1:{i:0;s:14:"record browser";}s:4:"cDat";a:5:{s:4:"text";s:132:"

recordbrowser_get:  Rplace the marker ###RECORD_BROWSER### with the rendered record browser
                    * Feature: #27041
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:29:"$str_content: current content";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:63:"$str_content: content with rendered marker ###RECORD_BROWSER###";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $markerArray['###RECORD_BROWSER###']  = null;


      /////////////////////////////////////
      //
      // RETURN record browser isn't enabled

    if(!($this->pObj->conf['navigation.']['record_browser'] == 1))
    {
      if ($this->pObj->b_drs_templating)
      {
        $value = $this->pObj->conf['navigation.']['record_browser'];
        t3lib_div::devlog('[INFO/
[...]
>pObj->startTime).' ms', $this->pObj->extKey, 0);
    }
      // DRS - Performance



    return $str_content;
  }









 ";i:1;i:1;}s:12:"content_size";i:1905;s:13:"content_lines";i:72;s:6:"atLine";i:1783;}i:21;a:7:{s:6:"header";s:48:"public function recordbrowser_callListView()
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:5:{s:4:"text";s:620:"

recordbrowser_callListView: Call the listView. It is needed for the record browser in the single view,
                            if there isn't any information about all available records.
                            The method allocates the global array $this->pObj->uids_of_all_rows[$tt_content_uid]['cache']['mode-' . $this->mode]['uids_of_all_rows'] and
                            returns it.
                            The method will be called in two cases:
                            * Session management is disabled
                            * Single view is called without calling the list view before
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:15:"@version  3.7.0";i:1;s:15:"@since    3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////
      //
      // DRS - Performance

    if ($this->pObj->b_drs_perform)
    {
      if($this->pObj->bool_typo3_43)
      {
        $endTime = $this->pObj->TT->getDifferenceToStarttime();
      }
      if(!$this->pObj->bool_typo3_43)
      {
        $endTime = $this->pObj->TT->mtime();
      }
   
[...]
D__ . ': '. ($endTime - $this->pObj->startTime).' ms', $this->pObj->extKey, 0);
    }
    // DRS - Performance
  }









 ";i:1;i:1;}s:12:"content_size";i:1603;s:13:"content_lines";i:60;s:6:"atLine";i:1870;}i:23;a:4:{s:6:"header";s:46:"private function recordbrowser_rendering()
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:5:{s:4:"text";s:65:"

recordbrowser_rendering: Render the record browser (HTML code)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"$record_browser: HTML code";}s:5:"other";a:2:{i:0;s:15:"@version  3.7.0";i:1;s:15:"@since    3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:6:"atLine";i:1939;}i:25;a:7:{s:6:"header";s:57:"public function recordbrowser_set_session_data($rows)
  {";s:11:"parentClass";s:19:"tx_browser_pi1_navi";s:4:"cDat";a:5:{s:4:"text";s:368:"

recordbrowser_set_session_data: Set session data for the record browser.
                                * We need the record browser in the single view.
                                * This method must be called, before the page browser
                                  changes the rows array (before limiting).
                                * Feature: #27041
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:79:"$rows: Array with all available rows of the list view in order of the list view";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:76:"$arr_return: false in case of success, otherwise array with an error message";}s:5:"other";a:2:{i:0;s:14:"@version 3.7.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Uid of the current plugin
    $tt_content_uid = $this->pObj->cObj->data['uid'];



      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN record browser isn't enabled

    if( ! ( $this->pObj->conf['navigation.']['record_browser'] == 1 ) )
    {
      if ( $this->pObj->b_drs_session || $this->pObj->b_drs_templatin
[...]
navi.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_navi.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:5743;s:13:"content_lines";i:160;s:6:"atLine";i:2269;}}}s:14:"MD5_3383506bc3";a:4:{s:8:"filename";s:32:"pi1/class.tx_browser_pi1_seo.php";s:8:"filesize";i:8607;s:6:"header";a:5:{s:4:"text";s:104:"

The class tx_browser_pi1_seo bundles methods for Search Engine Optimazation for the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:26:"class tx_browser_pi1_seo
{";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_browser_pi1_seo";s:4:"cDat";a:3:{s:4:"text";s:296:"

[CLASS/FUNCTION INDEX of SCRIPT]



  48: class tx_browser_pi1_seo
  67:     function __construct($parentObj)

             SECTION: SEO - Search Engine Optimation
  93:     function seo($elements)

TOTAL FUNCTIONS: 2
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:227:"

  var $arr_select;
  // Array with the fields of the SQL result
  var $arr_orderBy;
  // Array with fields from orderBy from TS
  var $arr_rmFields;
  // Array with fields from functions.clean_up.csvTableFields from TS



   ";i:1;i:-1;}s:12:"content_size";i:227;s:13:"content_lines";i:11;s:6:"atLine";i:46;}i:3;a:4:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_seo";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:65;}i:5;a:8:{s:6:"header";s:25:"function seo($elements) {";s:11:"parentClass";s:18:"tx_browser_pi1_seo";s:11:"sectionText";a:1:{i:0;s:30:"SEO - Search Engine Optimation";}s:4:"cDat";a:3:{s:4:"text";s:85:"

Set the tags title and the meta tags description and keywords in the HTML head tag
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:17:"the single record";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    switch($this->pObj->view) {
      case('single'):
        $arrView = 'single.';
        $arrDisplay = 'displaySingle.';
        $boolSubstituteMarkers = TRUE;
        break;
      default:
        $arrView = 'list.';
        $arrDisplay = 'displayList.';
        $boolSubstituteMarkers = FALSE;
        break;
    }
    $mode = $this->pObj->piVar_mode;

    $tmpSeo = $t
[...]
i1_seo.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_seo.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:6309;s:13:"content_lines";i:157;s:6:"atLine";i:91;}}}s:14:"MD5_0c785b05c7";a:4:{s:8:"filename";s:36:"pi1/class.tx_browser_pi1_session.php";s:8:"filesize";i:24639;s:6:"header";a:5:{s:4:"text";s:79:"

The class tx_browser_pi1_session bundles methods for the session management

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.9.3";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:3:"DAT";a:6:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi1_session
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi1_session";s:4:"cDat";a:3:{s:4:"text";s:509:"

[CLASS/FUNCTION INDEX of SCRIPT]



  59: class tx_browser_pi1_session
 101:     function __construct($pObj)

             SECTION: Initial
 137:     public function sessionIsEnabled( )
 196:     public function getNameOfDataSpace( )

             SECTION: Cache
 239:     public function cacheOfListView( )

             SECTION: Statistics
 404:     public function statisticsNewVisit( $table, $field, $uid )

TOTAL FUNCTIONS: 5
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:903:"    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)

    // [Array] The current TypoScript configuration array
  var $conf       = false;
    // [Integer] The current mode (from modeselector)
  var $mode       = false;
    // [String] 'list' or 'single': The current view
  var $view       = false;
    // [Array] The TypoScript configuration array of the current view
  var $conf_view  = false;
    // [String] TypoScript path to the current view. I.e. views.single.1
  var $conf_path  = false;
    // Variables set by the pObj (by class.tx_browser_pi1.php)



    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Boolean] True, if session management is enabled. Will set while runtime
  var $bool_session_enabled = null;
    // Variables set by this class









  ";i:1;i:-1;}s:12:"content_size";i:903;s:13:"content_lines";i:34;s:6:"atLine";i:57;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_session";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:170:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Initial
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:170;s:13:"content_lines";i:25;s:6:"atLine";i:99;}i:5;a:8:{s:6:"header";s:39:"public function sessionIsEnabled( )
  {";s:11:"parentClass";s:22:"tx_browser_pi1_session";s:11:"sectionText";a:1:{i:0;s:7:"Initial";}s:4:"cDat";a:5:{s:4:"text";s:212:"

sessionIsEnabled( ): Sets the global $bool_session_enabled.
                     The boolean is controlled by the flexform / TypoScript.
                     The User can enable and disable session management.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN: Boolean is set before

    if( ! ( $this->bool_session_enabled === null ) )
    {
      return;
    }
      // RETURN: Boolean is set before



      ///////////////////////////////////////////////////////////////////////////////
      //
      // Enable session 
[...]
rmance).', $this->pObj->extKey, 0 );
      }
    }
      // User disabled the session management

    return;
  }









  ";i:1;i:1;}s:12:"content_size";i:1230;s:13:"content_lines";i:48;s:6:"atLine";i:135;}i:7;a:7:{s:6:"header";s:41:"public function getNameOfDataSpace( )
  {";s:11:"parentClass";s:22:"tx_browser_pi1_session";s:4:"cDat";a:5:{s:4:"text";s:217:"

getNameOfDataSpace( ): Get the name of the session data space.
                       The name is user, if a frontend user is logged in.
                       The name is ses, if any frontend user isn't logged in.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"user || ses";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:276:"    switch( $GLOBALS['TSFE']->loginUser )
    {
      case( true ):
        return 'user';
      default:
        return 'ses';
    }
  }








  /***********************************************
  *
  * Cache
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:276;s:13:"content_lines";i:30;s:6:"atLine";i:194;}i:9;a:5:{s:6:"header";s:38:"public function cacheOfListView( )
  {";s:11:"parentClass";s:22:"tx_browser_pi1_session";s:11:"sectionText";a:1:{i:0;s:5:"Cache";}s:4:"cDat";a:5:{s:4:"text";s:397:"

cacheOfListView(): The method caches list view data in the session cache.
                   The result will stored in the global $this->pObj->uids_of_all_rows too.
                   If session managment is disabled, the method will call the list view method.
                   The result will stored in the global $this->pObj->uids_of_all_rows too but
                   without any caching.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:6:"atLine";i:237;}i:11;a:8:{s:6:"header";s:62:"public function statisticsNewVisit( $table, $field, $uid )
  {";s:11:"parentClass";s:22:"tx_browser_pi1_session";s:11:"sectionText";a:1:{i:0;s:10:"Statistics";}s:4:"cDat";a:5:{s:4:"text";s:448:"

statisticsNewVisit():  The method checks, if the previous visit is older than current time minus
                       the user defined timeout. It manages the session data for the visit.
                       Workflow:
                       * Is session management disabled? Return false
                       * Isn't previous visit older than current time minus timeout? Return false
                       #31230, 31229: Statistics module
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"name of the current table";}i:1;a:2:{i:0;s:6:"string";i:1;s:25:"name of the current field";}i:2;a:2:{i:0;s:7:"integer";i:1;s:21:"id of the current uid";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:60:"$bool_newVisit: true in case of a new visit, otherwise false";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // Set status of the session management

    $this->sessionIsEnabled( );
      // Boolean for status of visit
    $bool_newVisit = false;
      // Set status of the session management



      //////////////////////////////////////////////////////////////////////////
      //
  
[...]
n.php']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_session.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:12536;s:13:"content_lines";i:335;s:6:"atLine";i:402;}}}s:14:"MD5_89ffd15315";a:4:{s:8:"filename";s:40:"pi1/class.tx_browser_pi1_socialmedia.php";s:8:"filesize";i:28501;s:6:"header";a:5:{s:4:"text";s:99:"

The class tx_browser_pi1_socialmedia bundles methods for social media for the extension browser

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.6.4";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:34:"class tx_browser_pi1_socialmedia
{";s:5:"class";i:1;s:11:"parentClass";s:26:"tx_browser_pi1_socialmedia";s:4:"cDat";a:3:{s:4:"text";s:448:"

[CLASS/FUNCTION INDEX of SCRIPT]



  54: class tx_browser_pi1_socialmedia
 107:     function __construct($parentObj)

             SECTION: Bookmarks
 159:     function get_htmlBookmarks($elements, $key, $bool_defaultTemplate)

             SECTION: Initial methods
 431:     function init_htmlBookmarks()
 719:     function init_default_stdWraps()

TOTAL FUNCTIONS: 4
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1780:"

  //////////////////////////////////////////////////////
  //
  // Variables set by the pObj (by class.tx_browser_pi1.php)

  var $conf       = false;
  // [Array] The current TypoScript configuration array
  var $mode       = false;
  // [Integer] The current mode (from modeselector)
  var $view       = false;
  // [String] 'list' or 'single': The current view
  var $conf_view  = false;
  // [Array] The TypoScript configuration array of the current view
  var $conf_path  = false;
  // [String] TypoScript path to the current view. I.e. views.single.1
  // Variables set by the pObj (by class.tx_browser_pi1.php)



  /////////////////////////////////////////////////
  //
  // Vars set by methods in the current class

  var $str_htmlBookmarks_list    = false;
  // [string] html bookmark code for list views. It contains the marker ###URL### and ###TITLE###
  var $str_htmlBookmarks_single  = false;
  // [string] html bookmark code for single views. It contains the marker ###URL### and ###TITLE###
//  var $arr_default_stdWrapItem   = false;
//  // [array] TypoScript configuration array for a stdWrap of a bookmark (one item). Elements: ['10'] and ['10.']
//  var $arr_default_stdWrapItems  = false;
//  // [array] TypoScript configuration array for a stdWrap of bookmarks (items list). Elements: ['10'] and ['10.']
  var $str_default_htmlItem = false;
  // [string] Default HTML code for a bookmark (one item).
  //          This marker will be replaced: ###BOOKMARK_NAME###, ###BOOKMARK_URL###, ###BOOKMARK_IMAGE###, ###BOOKMARK_IMAGESIZE###
  //          This marker won't be replaced: ###URL### and ###TITLE###
  var $str_default_htmlItems = false;
  // [string] Default HTML code for bookmarks (items list).
  // Vars set by methods in the current class






   ";i:1;i:-1;}s:12:"content_size";i:1780;s:13:"content_lines";i:45;s:6:"atLine";i:52;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_socialmedia";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:195:"    $this->pObj = $parentObj;
  }


















  /***********************************************
   *
   * Bookmarks
   *
   **********************************************/














  ";i:1;i:0;}s:12:"content_size";i:195;s:13:"content_lines";i:39;s:6:"atLine";i:105;}i:5;a:8:{s:6:"header";s:70:"function get_htmlBookmarks($elements, $key, $bool_defaultTemplate)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_socialmedia";s:11:"sectionText";a:1:{i:0;s:9:"Bookmarks";}s:4:"cDat";a:5:{s:4:"text";s:240:"

get_htmlBookmarks: Set the HTML code for bookmarks in a list or single view.
                   Result will be written to the globals $str_htmlbookmarks_list or $str_htmlbookmarks_single.
                   Method is available once only.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:44:"$elements: The SQL result of the current row";}i:1;a:2:{i:0;s:6:"string";i:1;s:34:"$key: The name current table.field";}i:2;a:2:{i:0;s:7:"boolean";i:1;s:87:"$bool_defaultTemplate: TRUE if we have a default HTML template (with ###ITEM### marker)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"$str_items or FALSE. $str_items are the rendered bookmarks";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.4";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.4 ";}}}s:7:"content";a:2:{i:0;s:507:"    static $int_countThisMethod = 1;
    static $int_currPlugin_uid  = 0; // #9596

    // #9596: New plugin: Method is called the first time
    if ($int_currPlugin_uid != $this->pObj->cObj->data['uid'])
    {
      $int_countThisMethod  = 1;
      $int_currPlugin_uid   = $this->pObj->cObj->data['uid'];
    }
    // #9596: New plugin: Method is called the first time



  
[...]
**************************
   *
   * Initial methods
   *
   **********************************************/














  ";i:1;i:1;}s:12:"content_size";i:7919;s:13:"content_lines";i:261;s:6:"atLine";i:157;}i:7;a:5:{s:6:"header";s:33:"function init_htmlBookmarks()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_socialmedia";s:11:"sectionText";a:1:{i:0;s:15:"Initial methods";}s:4:"cDat";a:3:{s:4:"text";s:469:"

init_htmlBookmarks: Set the HTML code (template) for bookmarks in a list or single view.
                    Result will be written to the globals $str_htmlbookmarks_list or $str_htmlbookmarks_single.
                    Method is available once only.
                    This marker will be replaced: ###BOOKMARK_NAME###, ###BOOKMARK_URL###, ###BOOKMARK_IMAGE###, ###BOOKMARK_IMAGESIZE###
                    This marker won't be replaced: ###URL### and ###TITLE###
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:87:"$str_items or false. $str_items is an html template code with ###URL### and ###TITLE###";}}s:6:"atLine";i:429;}i:9;a:7:{s:6:"header";s:36:"function init_default_stdWraps()
  {";s:11:"parentClass";s:26:"tx_browser_pi1_socialmedia";s:4:"cDat";a:3:{s:4:"text";s:101:"

init_default_stdWraps: Init the default stdWraps for items (all bookmarks) and item (one bookmark)
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"false";}}s:7:"content";a:2:{i:0;s:507:"    static $bool_firsttime = true;
    static $int_currPlugin_uid  = 0; // #9596

    // #9596: New plugin: Method is called the first time
    if ($int_currPlugin_uid != $this->pObj->cObj->data['uid'])
    {
      $bool_firsttime     = true;
      $int_currPlugin_uid = $this->pObj->cObj->data['uid'];
    }
    // #9596: New plugin: Method is called the first time

    // 
[...]
hp']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_socialmedia.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:6032;s:13:"content_lines";i:163;s:6:"atLine";i:717;}}}s:14:"MD5_5a50847a3b";a:4:{s:8:"filename";s:37:"pi1/class.tx_browser_pi1_sql_auto.php";s:8:"filesize";i:86071;s:6:"header";a:5:{s:4:"text";s:173:"

The class tx_browser_pi1_sql_auto bundles SQL methods for this case: The user has defined a SELECT
statement only. Browser should generate a full sql query automatically

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.6.3";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}}}s:3:"DAT";a:18:{i:1;a:8:{s:6:"header";s:31:"class tx_browser_pi1_sql_auto
{";s:5:"class";i:1;s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:1127:"

[CLASS/FUNCTION INDEX of SCRIPT]



  74: class tx_browser_pi1_sql_auto
  97:     function __construct($parentObj)

             SECTION: Main method
 120:     function get_query_array()

             SECTION: SQL relation building with user defined SELECT only
 274:     function select()
 462:     function sql_from()
 616:     function orderBy()
 764:     function groupBy()
 877:     function get_joins()

             SECTION: SQL relation building WHERE
1369:     function whereSearch()
1626:     function whereClause()
1840:     function andWhere()
1924:     function arr_andWherePid()
1960:     function str_andWherePid($realTable)
2029:     function arr_andWhereEnablefields()
2065:     function str_enableFields($realTable)

             SECTION: Methods for automatic SQL relation building
2102:     function get_ts_autoconfig_relation()
2168:     function get_arr_relations_mm_simple()

             SECTION: Manual SQL Query Building
2569:     function get_sql_query($select, $from, $where, $group, $order, $limit)

TOTAL FUNCTIONS: 17
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:526:"
  var $boolAutorelation = true;
  // [Boolean] If it is TRUE, browser should try to build relations automatically
  var $arr_ts_autoconf_relation;
  // [Array] Array with some configuration from the TS for an automatic relation building
  var $arr_relations_mm_simple;
  // [Array] Array with the arrays MM and/or simple
  var $arr_relations_opposite;
  // [Array] Array with ...
  var $b_left_join = false;
  // [Boolean] TRUE if we should use LEFT JOIN. From TypoScript global or local autoconfig.relations.left_join




  ";i:1;i:-1;}s:12:"content_size";i:526;s:13:"content_lines";i:15;s:6:"atLine";i:72;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:173:"    $this->pObj = $parentObj;
  }






  /***********************************************
   *
   * Main method
   *
   **********************************************/


  ";i:1;i:0;}s:12:"content_size";i:173;s:13:"content_lines";i:15;s:6:"atLine";i:95;}i:5;a:8:{s:6:"header";s:30:"function get_query_array()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:11:"sectionText";a:1:{i:0;s:11:"Main method";}s:4:"cDat";a:3:{s:4:"text";s:175:"

It returns the parts for a SQL query. OrderBy and GroupBy aren't used in the SQL statement.
OrderBy is used in php multisort. GroupBy is used in context with consolidation.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:100:"array with the elements error and data. Data has the elements select, from, where, orderBy, groupBy.";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_return['error']['status'] = false;


    /////////////////////////////////////////////////////////////////
    //
    // Get SELECT

    $arr_return['data']['select'] = $this->select();
    if (!$arr_return['data']['select'])
    {
      $str_header  = '<h1 style="color:red">'.$this->pObj->pi_getLL('error_sql_h1').'</h1>';
      $str_prompt  = '<p style="color:re
[...]
**
   *
   * SQL relation building with user defined SELECT only
   *
   **********************************************/


  ";i:1;i:1;}s:12:"content_size";i:4502;s:13:"content_lines";i:145;s:6:"atLine";i:118;}i:7;a:8:{s:6:"header";s:21:"function select()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:11:"sectionText";a:1:{i:0;s:51:"SQL relation building with user defined SELECT only";}s:4:"cDat";a:3:{s:4:"text";s:236:"

It returns the select part for SQL query. It fills up $csvSelect for the HTML table head.
If tables hasn't any uid in the SELECT, table.uid will be added.
 If orderBy contains further tableFields, they will added to the select query.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:41:"SQL select or FALSE, if there is an error";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

    $select = false;

// 3.3.7
//    ////////////////////////////////////////////////////////////////////
//    //
//    // RETURN in case of override.select
//
//    $select = $conf['views.'][$viewWiDot][$mode.'.']['override.']['select'];
//   
[...]
ECT '.$select, $this->pObj->extKey, -1);
    }
    // DRS - Development Reporting System


    return $select;
  }








  ";i:1;i:1;}s:12:"content_size";i:5231;s:13:"content_lines";i:181;s:6:"atLine";i:272;}i:9;a:7:{s:6:"header";s:23:"function sql_from()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:55:"

The method returns the FROM clause for the SQL query
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"SQL from";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

// 3.3.7
//    $from = $conf['views.'][$viewWiDot][$mode.'.']['override.']['from'];
//    $from = $this->pObj->objZz->cleanUp_lfCr_doubleSpace($from);
//    if ($from)
//    {
//      if ($this->pObj->b_drs_sql)
//      {
//        t3lib_div::de
[...]
QL] Change it? Use views.'.$viewWiDot.$mode.'.override.from', $this->pObj->extKey, 1);
    }
    return $from;
  }








  ";i:1;i:1;}s:12:"content_size";i:4169;s:13:"content_lines";i:143;s:6:"atLine";i:460;}i:11;a:7:{s:6:"header";s:22:"function orderBy()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:299:"

It returns the order part for SQL where clause.
If there are piVars, the order of the piVars will preferred.
Otherwise it returns the TypoScript configuration.
If there aren't piVars and there aren't a TypoSCript configuration, it will be empty.
If there are aliases, the aliases will be deleted.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:30:"$orderBy: SQL ORDER BY clause.";}}s:7:"content";a:2:{i:0;s:507:"    // 3.3.7
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

    ////////////////////////////////////////////////////////////////////
    //
    // RETURN in case of override.oderBy

    if($conf['views.'][$viewWiDot][$mode.'.']['override.']['orderBy'])
    {
      $orderBy = $this->pObj->conf
[...]
r-by-clause.', $this->pObj->extKey, -1);
    }
    // DRS - Development Reporting System

    return $orderBy;
  }








  ";i:1;i:1;}s:12:"content_size";i:3393;s:13:"content_lines";i:137;s:6:"atLine";i:614;}i:13;a:7:{s:6:"header";s:22:"function groupBy()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:274:"

THIS ISN'T THE GROUPBY FOR THE SQL QUERY
Allocates a proper group by in the global groupBy
It returns the group by part, which is needed for consolidation
If there is more than one value, all other values will be removed
If there are aliases, the aliases will be deleted.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:67:"$groupBy: The first groupBy value with ASC or DESC, if there is one";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

// 3.3.7
    ////////////////////////////////////////////////////////////////////
    //
    // RETURN in case of override.groupBy

    if($conf['views.'][$viewWiDot][$mode.'.']['override.']['groupBy'])
    {
      $groupBy = $this->pObj->conf_sq
[...]
1);
    }
    // DRS - Development Reporting System

    $this->pObj->groupBy = $groupBy;
    return $groupBy;
  }








  ";i:1;i:1;}s:12:"content_size";i:2933;s:13:"content_lines";i:106;s:6:"atLine";i:762;}i:15;a:7:{s:6:"header";s:24:"function get_joins()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:67:"

Relation method: Building the relation part for the where clause
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:37:"TRUE || FALSE or the SQL-where-clause";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $str_left_join = false;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

    $arr_return['error']['status'] = false;


      ////////////////////////////////////////////////////////////////////
      //
      // Tables used?

    if 
[...]
************************************
*
* SQL relation building WHERE
*
**********************************************/


    ";i:1;i:1;}s:12:"content_size";i:18429;s:13:"content_lines";i:481;s:6:"atLine";i:875;}i:17;a:8:{s:6:"header";s:26:"function whereSearch()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:11:"sectionText";a:1:{i:0;s:27:"SQL relation building WHERE";}s:4:"cDat";a:3:{s:4:"text";s:352:"

It returns the part for the where clause with a search, if there are search fields in the TS and a piVar sword.
The where clause will have this structure:
  (field_1 LIKE sword_1 or field_2 LIKE sword_1 or ...) AND (field_1 LIKE sword_2 or field_2 LIKE sword_2 or ...)
The SQL result will be true:
- If every sword will be once in one field at least
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"SQL query string";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot  = $view.'.';

    // Query with OR and AND
    $str_whereOr  = false;
    $arr_whereOr  = array();
    // Query with AND NOT LIKE
    $str_whereNot = false;
    $arr_whereNot = array();



    /////////////////////////////////////////////////////////////////
[...]
rung%' ) )"
    }
    // DRS - Development Reporting System

    return $str_return;
    // RETURN andWhere

  }










  ";i:1;i:1;}s:12:"content_size";i:8192;s:13:"content_lines";i:250;s:6:"atLine";i:1367;}i:19;a:7:{s:6:"header";s:26:"function whereClause()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:51:"

Relation method: Building the whole where clause
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"FALSE or the SQL-where-clause";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot    = $view.'.';



// 3.3.7
    ////////////////////////////////////////////////////////////////////
    //
    // RETURN in case of override.where

    if($conf['views.'][$viewWiDot][$mode.'.']['override.']['where'])
    {
      $where = $this->pObj->conf_sq
[...]
where', $this->pObj->extKey, 1);
    }
    // DRS - Development Reporting System

    return $whereClause;

  }











  ";i:1;i:1;}s:12:"content_size";i:6024;s:13:"content_lines";i:207;s:6:"atLine";i:1624;}i:21;a:7:{s:6:"header";s:23:"function andWhere()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:64:"

Relation method: Building a further part for the where clause
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:37:"TRUE || FALSE or the SQL-where-clause";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

// 3.3.7
    ////////////////////////////////////////////////////////////////////
    //
    // RETURN in case of override.andWhere

    if($conf['views.'][$viewWiDot][$mode.'.']['override
[...]
his->pObj->extKey, 0);
      }
   }
    // DRS - Development Reporting System

    return $lAndWhereClause;
  }











  ";i:1;i:1;}s:12:"content_size";i:1891;s:13:"content_lines";i:74;s:6:"atLine";i:1838;}i:23;a:7:{s:6:"header";s:30:"function arr_andWherePid()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:275:"

Searches in the global arr_realTables_arrFields for tables with pids.
If there is one, the method generates an array with all table.pid in the syntax:
table.pid IN (pidlist). pidlist is a comma seperated list of uids.
If aliases are configured, table will become an alias.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:63:"$arr_andWherePid: Array with statements: table.pid IN (pidlist)";}}s:7:"content";a:2:{i:0;s:507:"    // Return array
    $arr_andWherePid = false;
    foreach ($this->pObj->arr_realTables_arrFields as $realTable => $arrFields)
    {
      // Has the table a pid?
      if (in_array('pid', $arrFields))
      {
        // Get the syntax table.field
        $tableField = $realTable.'.pid';

        // Replace real name of the table with its alias, if there is an alias
   
[...]
Field." IN (".$this->pObj->pidList.")";
      }
      // Has the table a pid?
    }
    return $arr_andWherePid;
  }






  ";i:1;i:1;}s:12:"content_size";i:822;s:13:"content_lines";i:28;s:6:"atLine";i:1922;}i:25;a:7:{s:6:"header";s:40:"function str_andWherePid($realTable)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:45:"

Return the AND WHERE statement for the pid
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"$realTable: Name of the current table";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:63:"$str_andWherePid: String with statement: table.pid IN (pidlist)";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;

    // Get the syntax table.field
    $tableField = $realTable.'.pid';

    // Replace real name of the table with its alias, if there is an alias
    $tableField = $this->pObj->objSqlFun->set_tablealias($tableField);
    $tableField = $this->pObj->objSqlFun->get_sql_alias_before($tableField);
    // Replace real name of the table with its a
[...]
to the return array
    $str_andWherePid= $tableField." IN (".$str_currPidList.")";
    return $str_andWherePid;
  }






  ";i:1;i:1;}s:12:"content_size";i:2281;s:13:"content_lines";i:59;s:6:"atLine";i:1958;}i:27;a:7:{s:6:"header";s:39:"function arr_andWhereEnablefields()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:239:"

Searches in the global arr_realTables_arrFields for each tables.
Each table will get an AND WHERE enablefields statement in the syntax (i.e.)
table.deleted = 0 AND table.hidden = 0.
If aliases are configured, table will become an alias.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:61:"$arr_andWhereEnablefields: Array with enablefields statements";}}s:7:"content";a:2:{i:0;s:507:"    // Return array
    $arr_andWhereEnablefields = false;
    foreach ($this->pObj->arr_realTables_arrFields as $realTable => $arrFields)
    {
      // Get the enablefields statement
      $str_enablefields = $this->pObj->cObj->enableFields($realTable);
      // Cut of the first ' AND '
      $str_enablefields = substr($str_enablefields, 5, strlen($str_enablefields));

 
[...]
 return array
      $arr_andWhereEnablefields[] = $str_enablefields;
    }
    return $arr_andWhereEnablefields;
  }






  ";i:1;i:1;}s:12:"content_size";i:1046;s:13:"content_lines";i:28;s:6:"atLine";i:2027;}i:29;a:7:{s:6:"header";s:41:"function str_enableFields($realTable)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:115:"

Get the AND WHERE enablefields for the current table. Replace the real name with an alias, if there is an alias.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"$realTable: Name of the current table";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:61:"$arr_andWhereEnablefields: Array with enablefields statements";}}s:7:"content";a:2:{i:0;s:507:"    $str_enablefields = $this->pObj->cObj->enableFields($realTable);
    // Cut of the first ' AND '
    $str_enablefields = substr($str_enablefields, 5, strlen($str_enablefields));

    // Replace real name of the table with its alias, if there is an alias
    $tableField = $realTable.'.dummy';
    $tableField = $this->pObj->objSqlFun->set_tablealias($tableField);
    $ta
[...]
*******
   *
   * Methods for automatic SQL relation building
   *
   **********************************************/





  ";i:1;i:1;}s:12:"content_size";i:877;s:13:"content_lines";i:30;s:6:"atLine";i:2063;}i:31;a:8:{s:6:"header";s:41:"function get_ts_autoconfig_relation()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:11:"sectionText";a:1:{i:0;s:43:"Methods for automatic SQL relation building";}s:4:"cDat";a:3:{s:4:"text";s:131:"

Checks if there should be an automatic configuration process. If yes it fills up $arr_ts_autoconf_relation and $boolAutorelation
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:34:"FALSE || $arr_ts_autoconf_relation";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';

    $arr_ts_autoconf_relation = $this->pObj->conf['views.'][$viewWiDot][$mode.'.']['autoconfig.']['relations.'];
    switch(is_array($arr_ts_autoconf_relation))
    {
      case(true):
        // We have a local configuration
        $boolAutoco
[...]
evlog('[INFO/SQL] Autoconfig is detected.', $this->pObj->extKey, 0);
    }
    return $arr_ts_autoconf_relation;
  }






  ";i:1;i:1;}s:12:"content_size";i:1899;s:13:"content_lines";i:59;s:6:"atLine";i:2100;}i:33;a:4:{s:6:"header";s:42:"function get_arr_relations_mm_simple()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:4:"cDat";a:3:{s:4:"text";s:91:"

Generating the $this->arr_relations_mm_simple, an array with the arrays MM and/or simple
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"TRUE or $arr_return";}}s:6:"atLine";i:2166;}i:35;a:8:{s:6:"header";s:74:"function get_sql_query($select, $from, $where, $group, $order, $limit)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_sql_auto";s:11:"sectionText";a:1:{i:0;s:25:"Manual SQL Query Building";}s:4:"cDat";a:3:{s:4:"text";s:34:"

The method returns a SQL query.
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"$select: SELECT clause";}i:1;a:2:{i:0;s:6:"string";i:1;s:20:"$from:   FROM clause";}i:2;a:2:{i:0;s:6:"string";i:1;s:21:"$where:  WHERE clause";}i:3;a:2:{i:0;s:6:"string";i:1;s:21:"$group:  GROUP clause";}i:4;a:2:{i:0;s:6:"string";i:1;s:21:"$order:  ORDER clause";}i:5;a:2:{i:0;s:6:"string";i:1;s:21:"$limit:  LIMIT clause";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:9:"SQL query";}}s:7:"content";a:2:{i:0;s:374:"
    $str_query = ''.
'  ###SELECT###
  ###FROM###
  ###WHERE###
  ###GROUP###
  ###ORDER###
  ###LIMIT###
';

  }


















}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_sql_auto.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_sql_auto.php']);
}

?>";i:1;i:0;}s:12:"content_size";i:374;s:13:"content_lines";i:35;s:6:"atLine";i:2567;}}}s:14:"MD5_a26f25a34f";a:4:{s:8:"filename";s:42:"pi1/class.tx_browser_pi1_sql_functions.php";s:8:"filesize";i:72571;s:6:"header";a:5:{s:4:"text";s:174:"

The class tx_browser_pi1_sql_functions bundles methods with a workflow for sql queries and rows.
statement with a FROM and a WHERE clause and maybe with the array JOINS.


";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:16:"@version   4.0.0";i:2;s:13:"@since  2.0.0";i:3;s:17:"@package    TYPO3";i:4;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:27:{i:1;a:8:{s:6:"header";s:36:"class tx_browser_pi1_sql_functions
{";s:5:"class";i:1;s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:1633:"

[CLASS/FUNCTION INDEX of SCRIPT]



  83: class tx_browser_pi1_sql_functions
  99:     function __construct($parentObj)

             SECTION: Synonyms
 137:     function query_with_synonyms($arr_data)
 338:     function rows_with_synonyms($rows)

             SECTION: Order rows
 527:     function orderBy_by_piVar()
 592:     function make_hierarchical($rows)
 617:     function init_hierarchical()
 675:     function order_and_addLevel_recurs($rows, $pid = NULL)
 751:     function wrap_and_rmLevel($rows)

             SECTION: Clean up
 822:     function rows_with_cleaned_up_fields($rows)
 940:     function replace_statement($str_queryPart)
 979:     function clean_up_as_and_alias($arr_tablefields)
1040:     function replace_tablealias($arr_aliastableField)
1094:     function set_tablealias($tableField)
1154:     function get_sql_alias_before($str_tablefield)
1172:     function get_sql_alias_behind($str_tablefield)
1191:     function get_sql_alias_behind_or_before($str_tablefield, $b_before_the_as)
1254:     function get_propper_andWhere($str_andWhere)
1462:     function get_orderBy_tableFields($csvOrderBy)
1512:     function get_descOrAsc($strOrderByField)
1584:     function get_sortTypeAndCase($table, $field)
1747:     function human_readable($str_query)

             SECTION: Globals
1799:     function global_all()
1847:     function global_csvSelect()
1969:     function global_csvSearch()
2031:     function global_csvOrderBy()
2186:     function global_stdWrap($str_tsProperty, $str_tsValue, $arr_tsArray)

TOTAL FUNCTIONS: 26
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:12:"







    ";i:1;i:-1;}s:12:"content_size";i:12;s:13:"content_lines";i:8;s:6:"atLine";i:81;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:193:"    $this->pObj = $parentObj;
  }




















    /***********************************************
    *
    * Synonyms
    *
    **********************************************/



    ";i:1;i:0;}s:12:"content_size";i:193;s:13:"content_lines";i:30;s:6:"atLine";i:97;}i:5;a:8:{s:6:"header";s:45:"function query_with_synonyms($arr_data)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:11:"sectionText";a:1:{i:0;s:8:"Synonyms";}s:4:"cDat";a:3:{s:4:"text";s:67:"

Replace synonyms with realnames in a query. Build a UNION query.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:43:"$arr_data: With the current SQL query parts";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:117:"Returns the delivered data array. The array is extended with a union query and an synonyms array in case of synonyms.";}}s:7:"content";a:2:{i:0;s:507:"
      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';

      $conf_view    = $conf['views.'][$viewWiDot][$mode.'.'];
      $b_synonym    = $conf_view['functions.']['synonym'];
      $conf_synonym = $conf_view['functions.']['synonym.'];

      $arr_return   = $arr_data;


      //////////////
[...]
 Synonyms has '.($i_elements - 1).' elements.', $this->pObj->extKey, 0);
      }

      return $arr_return;
    }







    ";i:1;i:1;}s:12:"content_size";i:7146;s:13:"content_lines";i:193;s:6:"atLine";i:135;}i:7;a:7:{s:6:"header";s:40:"function rows_with_synonyms($rows)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:54:"

Extends synonyms with the real values and order it.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:23:"$rows: The current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:73:"The return array with the elements error and data. Data contains the rows";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

      $str_ts_plugin_name   = 'plugin.'.$this->pObj->prefixId;
      // Typoscript plugin path (root) like: plugin.tx_browser_pi1

      $arr_wrap_realname    = explode('|', $conf
[...]
************************************
    *
    * Order rows
    *
    **********************************************/



    ";i:1;i:1;}s:12:"content_size";i:6369;s:13:"content_lines";i:182;s:6:"atLine";i:336;}i:9;a:8:{s:6:"header";s:33:"function orderBy_by_piVar()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:11:"sectionText";a:1:{i:0;s:10:"Order rows";}s:4:"cDat";a:3:{s:4:"text";s:63:"

Returns a SQL ORDER BY statement in case of the piVars[sort]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"The ORDER BY statement";}}s:7:"content";a:2:{i:0;s:507:"      $b_desc       = false;
      $str_order_by = false;


      //////////////////////////////////////////
      //
      // RETURN without any piVar[sort]

      if (!$this->pObj->piVars['sort'])
      {
        return false;
      }
      // RETURN without any piVar[sort]


      //////////////////////////////////////////
      //
      // Building the ORDER BY stateme
[...]
= $tablefield.$str_order;
      }
      // Building the ORDER BY statement

      return $str_order_by;
    }











    ";i:1;i:1;}s:12:"content_size";i:1163;s:13:"content_lines";i:57;s:6:"atLine";i:525;}i:11;a:7:{s:6:"header";s:39:"function make_hierarchical($rows)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:33:"

Order the records hierarchical
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:16:"The current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:54:"Hierarchical sorted rows extended with the field level";}}s:7:"content";a:2:{i:0;s:249:"      $this->init_hierarchical();
      // Allocate TypoScript values to $this->arr_hierarch
      $rows = $this->order_and_addLevel_recurs($rows, $pid = NULL);
      $rows = $this->wrap_and_rmLevel($rows);

      return $rows;
    }











    ";i:1;i:0;}s:12:"content_size";i:249;s:13:"content_lines";i:18;s:6:"atLine";i:590;}i:13;a:7:{s:6:"header";s:34:"function init_hierarchical()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:84:"

Allocates the hierarch array $this->arr_hierarch with some values from TypoScript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

      $arr_aliases_fields   = $conf_view['aliases.']['fields.'];
      $arr_civserv_hierarch = $conf_view['functions.']['hierarchical.'];


      ////////////////////////////////
[...]
ot']     = $arr_civserv_hierarch['display_root'];        // 1 || 0

      $this->arr_hierarch = $arr_hierarch;

    }



    ";i:1;i:1;}s:12:"content_size";i:2377;s:13:"content_lines";i:49;s:6:"atLine";i:615;}i:15;a:7:{s:6:"header";s:60:"function order_and_addLevel_recurs($rows, $pid = NULL)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:62:"

Order the records hierarchical. This is a recursive method.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:16:"The current rows";}i:1;a:2:{i:0;s:7:"integer";i:1;s:38:"The id of the organisation root record";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:54:"Hierarchical sorted rows extended with the field level";}}s:7:"content";a:2:{i:0;s:507:"
      $str_row_pid    = $this->arr_hierarch['pid'];
      $str_row_uid    = $this->arr_hierarch['uid'];
      $str_row_level  = $this->arr_hierarch['level'];

      $key_ord_field  = $this->arr_hierarch['order_tableField'];


      //////////////////////////////////////////
      //
      // Static variables

      static $arr_rows_hierarch = array();
      // Result arra
[...]
ugh all children rows. Get the children of the children if there are some (RECURSIVE !!!)

      return $rows;

    }



    ";i:1;i:1;}s:12:"content_size";i:2179;s:13:"content_lines";i:68;s:6:"atLine";i:673;}i:17;a:7:{s:6:"header";s:38:"function wrap_and_rmLevel($rows)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:50:"

Wraps the order field and deletes the level row
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:16:"The current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:54:"Hierarchical sorted rows extended with the field level";}}s:7:"content";a:2:{i:0;s:507:"
      $key_ord_field    = $this->arr_hierarch['order_tableField'];  // tx_civserv_organisation.or_name
      $b_display_root   = $this->arr_hierarch['display_root'];      // 1 || 0
      $str_level_field  = $this->arr_hierarch['level'];             // hierarch.level

      $arr_wrap_item    = explode('|', $this->arr_hierarch['wrap_tableField']);
                          
[...]
***********************************
    *
    * Clean up
    *
    **********************************************/






    ";i:1;i:1;}s:12:"content_size";i:1795;s:13:"content_lines";i:63;s:6:"atLine";i:749;}i:19;a:8:{s:6:"header";s:49:"function rows_with_cleaned_up_fields($rows)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:11:"sectionText";a:1:{i:0;s:8:"Clean up";}s:4:"cDat";a:3:{s:4:"text";s:64:"

Delete the rows from the rows array, we don't want to display
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:16:"The current rows";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:73:"The return array with the elements error and data. Data contains the rows";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

      $csv_cleanup_fields   = $conf_view['functions.']['clean_up.']['csvTableFields'];
      // The table.fields as aliases, we want to delete from the rows
      $arr_table_alias
[...]
bj->extKey, 1);
        }
      }

      $arr_return['data']['rows'] = $rows;

      return $arr_return;
    }










    ";i:1;i:1;}s:12:"content_size";i:3964;s:13:"content_lines";i:110;s:6:"atLine";i:820;}i:21;a:7:{s:6:"header";s:48:"function replace_statement($str_queryPart)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:52:"

Replace a statement with an alias in a query part
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:82:"$str_queryPart: The query part, in which should replaced a statement with an alias";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"Returns the processed query part";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

      if (is_array($conf_view['select.']['deal_as_table.']))
      {
        foreach ($conf_view['select.']['deal_as_table.'] as $arr_dealastable)
        {
          $statement  
[...]
Alias:  \"'.$alias.'\"', $this->pObj->extKey, 0);
          }
        }
      }
      return $str_queryPart;
    }






    ";i:1;i:1;}s:12:"content_size";i:886;s:13:"content_lines";i:31;s:6:"atLine";i:938;}i:23;a:7:{s:6:"header";s:54:"function clean_up_as_and_alias($arr_tablefields)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:93:"

Get the SQL part behind the AS. If this is an alias, replace the alias with the real name.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:64:"$arr_tablefields: Array with table.field values maybe with an AS";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:48:"$arr_tablefields with real names of table.fields";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      if (!is_array($arr_tablefields))
      {
        return $arr_tablefields;
      }

      foreach((array) $arr_tablefields as $key => $value) {
        //$value             
[...]
    }
      $arr_tablefields = $this->replace_tablealias($arr_tablefields);
      return $arr_tablefields;
    }












";i:1;i:1;}s:12:"content_size";i:1447;s:13:"content_lines";i:53;s:6:"atLine";i:977;}i:25;a:7:{s:6:"header";s:55:"function replace_tablealias($arr_aliastableField)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:98:"

Replace table aliases in $arr_localtable. If there isn't any alias, than nothing will replaced.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:51:"$arr_aliastableField: Array with local table values";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"$arr_aliastableField with replaced table aliases.";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      /////////////////////////////////////////////////////////////////
      //
      // RETURN, if we don't have any alias array

      if (!is_array($conf_view['aliases.']['ta
[...]
[$key_field] = $str_tablereal.'.'.$str_field;
        }
      }
      return $arr_aliastableField;
    }












        ";i:1;i:1;}s:12:"content_size";i:1161;s:13:"content_lines";i:46;s:6:"atLine";i:1038;}i:27;a:7:{s:6:"header";s:42:"function set_tablealias($tableField)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:62:"

Replace a table.field syntax with the alias-as-alias syntax
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:50:"$tableField: table and filed in table.field syntax";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:38:"aliasTable.field as `aliastable.field`";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      /////////////////////////////////////////////////////////////////
      //
      // RETURN, if we don't have any alias array

      $arr_aliases = $conf_view['aliases.']['t
[...]
';
      }
      // Catch the alias, if there is one. Build alias-AS-alias.

      return $tableField;
    }












    ";i:1;i:1;}s:12:"content_size";i:1240;s:13:"content_lines";i:52;s:6:"atLine";i:1092;}i:29;a:7:{s:6:"header";s:52:"function get_sql_alias_before($str_tablefield)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:79:"

If there is a SQL table.field with an AS, returns the string bebefore the AS
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:69:"$str_tablefield: table.field with an AS like "news.uid AS 'news.uid'"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:65:"Part before the AS. If there is no AS, it returns $str_tablefield";}}s:7:"content";a:2:{i:0;s:93:"      return $this->get_sql_alias_behind_or_before($str_tablefield, true);
    }








    ";i:1;i:0;}s:12:"content_size";i:93;s:13:"content_lines";i:10;s:6:"atLine";i:1152;}i:31;a:7:{s:6:"header";s:52:"function get_sql_alias_behind($str_tablefield)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:77:"

If there is a SQL table.field with an AS, returns the string behind the AS
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:69:"$str_tablefield: table.field with an AS like "news.uid AS 'news.uid'"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:65:"Part behind the AS. If there is no AS, it returns $str_tablefield";}}s:7:"content";a:2:{i:0;s:94:"      return $this->get_sql_alias_behind_or_before($str_tablefield, false);
    }








    ";i:1;i:0;}s:12:"content_size";i:94;s:13:"content_lines";i:10;s:6:"atLine";i:1170;}i:33;a:7:{s:6:"header";s:80:"function get_sql_alias_behind_or_before($str_tablefield, $b_before_the_as)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:87:"

If there is a SQL table.field with an AS, returns the string before or behind the AS
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:69:"$str_tablefield: table.field with an AS like "news.uid AS 'news.uid'"";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:96:"$b_before_the_as: TRUE: return the string before the AS, FALSE: return the striong behind the AS";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:89:"Returns the string before or behind the AS. If there is no AS, it returns $str_tablefield";}}s:7:"content";a:2:{i:0;s:507:"

      /////////////////////////////////////////////////////////////////
      //
      // RETURN, if there isn't any AS

      $arr_tablefield = explode (' AS ', $str_tablefield);
      if(count($arr_tablefield) < 2)
      {
        return ($str_tablefield);
      }


      /////////////////////////////////////////////////////////////////
      //
      // Get the parts 
[...]
_behind_as);
      $str_behind_as = str_replace('`', '', $str_behind_as);

      return $str_behind_as;
    }















";i:1;i:1;}s:12:"content_size";i:1108;s:13:"content_lines";i:55;s:6:"atLine";i:1189;}i:35;a:7:{s:6:"header";s:50:"function get_propper_andWhere($str_andWhere)
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:116:"

Store the used tables and fields in the global $arr_realTables_arrFields. Add an AND at the top of the statement.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"The andWhere statement";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:78:"The andWhere with an AND at the top, the used table.fields in the where clause";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];

      // Array with the used tables and fields from the andWher clause in table.field syntax
      $arr_used_tableFields = false;

      $arr_return = false;

      //////////////
[...]
_METHOD__. ' (' . __LINE__ . '): ', $arr_return );
//      die( );
//    }
      return $arr_return;
    }














    ";i:1;i:1;}s:12:"content_size";i:6901;s:13:"content_lines";i:200;s:6:"atLine";i:1252;}i:37;a:7:{s:6:"header";s:49:"function get_orderBy_tableFields($csvOrderBy)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:77:"

get_orderBy_tableFields(): Get the table.fields from the order by property
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:84:"$csv_orderBy: Get from an orderBy clause the table.fields only - without ASC or DESC";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:85:"$csv_orderByWoAscDesc: table.fields in CSV syntax - comma seperated without any space";}}s:7:"content";a:2:{i:0;s:507:"
    ///////////////////////////////////////////////////////
    //
    // Clean up line feeds, carriage returns, double spaces

    $csvOrderBy = $this->pObj->objZz->cleanUp_lfCr_doubleSpace($csvOrderBy);
    // Clean up line feeds, carriage returns, double spaces


    ///////////////////////////////////////////////////////
    //
    // Remove ASC, DESC and spaces

    
[...]
vOrderBy = str_replace(' ',  '', $csvOrderBy);
    // Remove ASC, DESC and spaces

    return $csvOrderBy;
  }














";i:1;i:1;}s:12:"content_size";i:619;s:13:"content_lines";i:34;s:6:"atLine";i:1460;}i:39;a:7:{s:6:"header";s:44:"function get_descOrAsc($strOrderByField)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:5:{s:4:"text";s:289:"

get_descOrAsc: Should a field ordered by DESC or by ASC?


                                       Examples:
                                       - tt_news.title
                                       - tt_news.author DESC
                                       - tt_news_cat.title ASC
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"$strOrderByField  : Field with format table.field";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:41:"$str_order        : SORT_ASC or SORT_DESC";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.3";i:1;s:14:"@version 3.4.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    //////////////////////////////////////////////////////////////////////
    //
    // Get SORT_DESC or SORT_ASC

    // dwildt, 100915
    //$pos = strpos($strOrderByField, 'DESC');
    $pos = strpos($strOrderByField, ' DESC');
    if ($pos >= 0)
    {
      $str_order = SORT_DESC;
    }
    if ($pos === false)
    {
      $str_order = SORT_ASC;
    }
    // Get SORT_DE
[...]
///
    //
    // Return SORT_DESC or SORT_ASC

    return $str_order;
    // Return SORT_DESC or SORT_ASC
  }










    ";i:1;i:1;}s:12:"content_size";i:1397;s:13:"content_lines";i:58;s:6:"atLine";i:1510;}i:41;a:7:{s:6:"header";s:48:"function get_sortTypeAndCase($table, $field)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:5:{s:4:"text";s:147:"

get_sortTypeAndCase      : Type for ordering and boolean for case sensitive


                               [bool_caseSensitive]  true || false
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$table      : the current table";}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"$field      : the current field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:63:"$arr_return : [int_typeFlag]        SORT_STRING || SORT_NUMERIC";}s:5:"other";a:2:{i:0;s:16:"@since     3.4.3";i:1;s:16:"@version   3.4.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];



    /////////////////////////////////////////////////////////////////
    //
    // Get global or local array advanced

    #10116
    $arr_conf_advanced = $conf['advanced.'];
    if(!e
[...]
   = $int_typeFlag;
    $arr_return['bool_caseSensitive'] = $int_caseSensitive;

    return $arr_return;
  }














  ";i:1;i:1;}s:12:"content_size";i:4982;s:13:"content_lines";i:155;s:6:"atLine";i:1582;}i:43;a:7:{s:6:"header";s:39:"function human_readable($str_query)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:88:"

Insert space characters in SQL queries to enable line breaks for simplify the reading
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"$str_query: The SQL query";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:56:"$str_query: The SQL query with inserted space characters";}}s:7:"content";a:2:{i:0;s:507:"      /////////////////////////////////////////////////
      //
      // 3nd: EnableFields Patch. Replace '.deleted=0' and '.hidden=0' with '.deleted = 0' and '.hidden = 0'

      $arr_query = explode('.deleted=0',   $str_query);
      $str_query = implode('.deleted = 0', $arr_query);
      $arr_query = explode('.hidden=0',    $str_query);
      $str_query = implode('.hid
[...]
************************************
    *
    * Globals
    *
    **********************************************/






    ";i:1;i:1;}s:12:"content_size";i:648;s:13:"content_lines";i:45;s:6:"atLine";i:1745;}i:45;a:8:{s:6:"header";s:27:"function global_all()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:11:"sectionText";a:1:{i:0;s:7:"Globals";}s:4:"cDat";a:3:{s:4:"text";s:58:"

Set the globals csvSelect, csvOrderBy and arrLocalTable
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:74:"TRUE, if there is a orderBy value. FALSE, if there isn't any orderBy value";}}s:7:"content";a:2:{i:0;s:507:"      $arr_return['error']['status'] = false;
      $b_ok = $this->global_csvSelect();
      if (!$b_ok)
      {
        $str_header  = '<h1 style="color:red;">'.$this->pObj->pi_getLL('error_sql_h1').'</h1>';
        $str_prompt  = '<p style="color:red;font-weight:bold;">'.$this->pObj->pi_getLL('error_sql_select').'</p>';
        $arr_return['error']['status'] = true;
    
[...]
   $arr_return['error']['prompt'] = $str_prompt;
        return $arr_return;
      }

      return $arr_return;
    }







";i:1;i:1;}s:12:"content_size";i:1495;s:13:"content_lines";i:41;s:6:"atLine";i:1797;}i:47;a:7:{s:6:"header";s:33:"function global_csvSelect()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:66:"

Set the global csvSelect. Values are from the TypoScript select
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:74:"TRUE, if there is a orderBy value. FALSE, if there isn't any orderBy value";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      ///////////////////////////////////
      //
      // Get the SELECT statement

      // 3.3.7
      $this->pObj->csvSelect = $conf_view['select'];
      $this->pObj->csvSe
[...]
0);
          }
        }
      }
      // DRS - Logging if user defined values were changed

      return true;
    }






";i:1;i:1;}s:12:"content_size";i:4091;s:13:"content_lines";i:115;s:6:"atLine";i:1845;}i:49;a:7:{s:6:"header";s:33:"function global_csvSearch()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:136:"

Set the global csvSearch. Values are from the TypoScript. If search is empty, search will get the values out of the select statement.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:4:"TRUE";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      ///////////////////////////////////
      //
      // Get the SEARCH values

      // 3.3.7
      //$csvSearch  = $conf_view['search'];
      $csvSearch = $this->pObj->conf
[...]
ed with an alias?

      $this->pObj->csvSearch = $csvSearch;
      // Get the SEARCH values

      return true;
    }






";i:1;i:1;}s:12:"content_size";i:1725;s:13:"content_lines";i:55;s:6:"atLine";i:1967;}i:51;a:4:{s:6:"header";s:34:"function global_csvOrderBy()
    {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:3:{s:4:"text";s:78:"

Set the global csvOrderBy. Values are from the TypoScript orderBy or select
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:74:"TRUE, if there is a orderBy value. FALSE, if there isn't any orderBy value";}}s:6:"atLine";i:2029;}i:53;a:7:{s:6:"header";s:72:"function global_stdWrap($str_tsProperty, $str_tsValue, $arr_tsArray)
  {";s:11:"parentClass";s:28:"tx_browser_pi1_sql_functions";s:4:"cDat";a:5:{s:4:"text";s:51:"

global_stdWrap: The method wraps sql query parts
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:79:"$str_tsProperty: the name of the current array like select. or override.select.";}i:1;a:2:{i:0;s:6:"string";i:1;s:72:"$str_tsValue:    the TypoScript value like: tt_news.title, tt_news.short";}i:2;a:2:{i:0;s:5:"array";i:1;s:70:"$arr_tsArray:    the TypoScript array like select. or override.select.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:50:"wrapped value, if there is a stdWrap configuration";}s:5:"other";a:1:{i:0;s:14:"@version 4.0.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $cObj = $this->pObj->cObj;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];
    $conf_path  = 'views.'.$viewWiDot.$mode.'.';



    ////////////////////////////////////////////////////////////////////
    //
    // RETURN valu
[...]
{
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_sql_functions.php']);
  }

?>";i:1;i:1;}s:12:"content_size";i:3832;s:13:"content_lines";i:132;s:6:"atLine";i:2184;}}}s:14:"MD5_1ab6e6433b";a:4:{s:8:"filename";s:39:"pi1/class.tx_browser_pi1_sql_manual.php";s:8:"filesize";i:21075;s:6:"header";a:5:{s:4:"text";s:176:"

The class tx_browser_pi1_sql_manual bundles sql methods for this case: The user has defined a SELECT
statement with a FROM and a WHERE clause and maybe with the array JOINS.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:35:"class tx_browser_pi1_sql_manual
  {";s:5:"class";i:1;s:11:"parentClass";s:25:"tx_browser_pi1_sql_manual";s:4:"cDat";a:3:{s:4:"text";s:369:"

[CLASS/FUNCTION INDEX of SCRIPT]



  52: class tx_browser_pi1_sql_manual
  69:     function __construct($parentObj)

             SECTION: SQL
 106:     function get_query_array()

             SECTION: Check TypoScript
 498:     function check_typoscript_query_parts()

TOTAL FUNCTIONS: 3
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:13:"








    ";i:1;i:-1;}s:12:"content_size";i:13;s:13:"content_lines";i:9;s:6:"atLine";i:50;}i:3;a:7:{s:6:"header";s:38:"function __construct($parentObj)
    {";s:11:"parentClass";s:25:"tx_browser_pi1_sql_manual";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:192:"      $this->pObj = $parentObj;
    }




















    /***********************************************
    *
    * SQL
    *
    **********************************************/



    ";i:1;i:0;}s:12:"content_size";i:192;s:13:"content_lines";i:30;s:6:"atLine";i:67;}i:5;a:5:{s:6:"header";s:32:"function get_query_array()
    {";s:11:"parentClass";s:25:"tx_browser_pi1_sql_manual";s:11:"sectionText";a:1:{i:0;s:3:"SQL";}s:4:"cDat";a:3:{s:4:"text";s:80:"

Bulding the query. ###PID_LIST### and ###UID### are system defined constants.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:9:"SQL query";}}s:6:"atLine";i:104;}i:7;a:8:{s:6:"header";s:45:"function check_typoscript_query_parts()
    {";s:11:"parentClass";s:25:"tx_browser_pi1_sql_manual";s:11:"sectionText";a:1:{i:0;s:16:"Check TypoScript";}s:4:"cDat";a:3:{s:4:"text";s:110:"

Check, if we have a SELECT, FROM, WHERE and JOINS configuration

Array with error message in case of errors
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:65:"FALSE, if we don't have a manual configuration, TRUE, if we have.";}}s:7:"content";a:2:{i:0;s:507:"      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;
      $view = $this->pObj->view;

      $viewWiDot = $view.'.';
      $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


      // Do we have a from?
      if (!is_array($conf_view['from.']))
      {
        // We don't have a manual configuration, because we don't have a from.
        if ($this->pO
[...]
]) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_sql_manual.php']);
  }

?>";i:1;i:1;}s:12:"content_size";i:5623;s:13:"content_lines";i:124;s:6:"atLine";i:496;}}}s:14:"MD5_608ca0b314";a:4:{s:8:"filename";s:39:"pi1/class.tx_browser_pi1_statistics.php";s:8:"filesize";i:23501;s:6:"header";a:5:{s:4:"text";s:82:"

The class tx_browser_pi1_statistics bundles methods for statistics requirement

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 3.9.3";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:33:"class tx_browser_pi1_statistics
{";s:5:"class";i:1;s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:4:"cDat";a:3:{s:4:"text";s:705:"

[CLASS/FUNCTION INDEX of SCRIPT]



  64: class tx_browser_pi1_statistics
 124:     function __construct($pObj)

             SECTION: Initial
 158:     private function statisticsInitVars( )
 236:     public function statisticsIsEnabled( )

             SECTION: Counter
 319:     public function countViewSingleRecord( )
 398:     private function countHit( )
 426:     private function countVisit( )

             SECTION: SQL
 490:     public function sql_update_statistics( $table, $field, $uid, $operator )

             SECTION: Helper
 674:     private function helperFieldInTable( $table, $field )

TOTAL FUNCTIONS: 8
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1975:"    // #31230, 31229: Statistics module

    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)

    // [Array] The current TypoScript configuration array
  var $conf       = false;
    // [Integer] The current mode (from modeselector)
  var $mode       = false;
    // [String] 'list' or 'single': The current view
  var $view       = false;
    // [Array] The TypoScript configuration array of the current view
  var $conf_view  = false;
    // [String] TypoScript path to the current view. I.e. views.single.1
  var $conf_path  = false;
    // Variables set by the pObj (by class.tx_browser_pi1.php)



    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Array] Array with checked tables: $arr_checkedTables[table][field]
  var $arr_checkedTables            = null;
    // [Boolean] True, if statistics module is enabled. Will set while runtime
  var $bool_statistics_enabled      = null;
    // [String/csv] Comma seperated list of IPs, which won't counted
  var $dontAccountIPsOfCsvList      = null;
    // [Integer] Period between a current and a new download and visit in seconds
  var $timeout                      = null;
    // [String] Name of the field for counting downloads (with respect for timeout)
  var $fieldDownloads               = null;
    // [String] Label of the field for counting downloads (with respect for timeout)
  var $fieldDownloadsByVisits       = null;
    // [String] Label of the field for counting hits (without any respect for timeout)
  var $fieldHits                    = null;
    // [String] Label of the field for counting visits (hits with respect for timeout)
  var $fieldVisits                  = null;
    // [Array] Array with the type of the fields. Labels of the element are the labels of the fields
  var $arr_fieldType                  = null;
    // Variables set by this class









  ";i:1;i:-1;}s:12:"content_size";i:1975;s:13:"content_lines";i:52;s:6:"atLine";i:62;}i:3;a:7:{s:6:"header";s:31:"function __construct($pObj)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:170:"    $this->pObj = $pObj;
  }









  /***********************************************
  *
  * Initial
  *
  **********************************************/









  ";i:1;i:0;}s:12:"content_size";i:170;s:13:"content_lines";i:25;s:6:"atLine";i:122;}i:5;a:8:{s:6:"header";s:42:"private function statisticsInitVars( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:11:"sectionText";a:1:{i:0;s:7:"Initial";}s:4:"cDat";a:5:{s:4:"text";s:69:"

statisticsInitVars( ): The method inits the global class variables
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get the adjustment configuration
    $conf_adjustment = $this->pObj->conf['flexform.']['sDEF.']['statistics.']['adjustment.'];

      // List of IPs, which should ignored
    $coa_name                     = $conf_adjustment['dontAccountIPsOfCsvList'];
    $coa_conf                     = $conf_adjustment['dontAccountIPsOfCsvList.'];
    $this->dontAccountIPsOfCsvLt
[...]
    $this->arr_fieldType[$this->fieldVisits]        = $this->pObj->cObj->cObjGetSingle($coa_name, $coa_conf);
  }









  ";i:1;i:1;}s:12:"content_size";i:3586;s:13:"content_lines";i:67;s:6:"atLine";i:156;}i:7;a:7:{s:6:"header";s:42:"public function statisticsIsEnabled( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:4:"cDat";a:5:{s:4:"text";s:241:"

statisticsIsEnabled( ):  The method sets the global $bool_statistics_enabled.
                         The boolean is controlled by the flexform / TypoScript.
                         The User can enable and disable the statistics module.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN: Boolean is set before

    if( ! ( $this->bool_statistics_enabled === null ) )
    {
      return;
    }
      // RETURN: Boolean is set before



      ///////////////////////////////////////////////////////////////////////////////
      //
      // Enable stati
[...]
*******************************************
  *
  * Counter
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:1616;s:13:"content_lines";i:73;s:6:"atLine";i:234;}i:9;a:8:{s:6:"header";s:44:"public function countViewSingleRecord( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:11:"sectionText";a:1:{i:0;s:7:"Counter";}s:4:"cDat";a:5:{s:4:"text";s:175:"

countViewSingleRecord( ):  The method counts the hits and visits for a record in the single view
                           There isn't any counting, if the page is cached.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////////////////////////////////////////
      //
      // Set status of the statistics module and init it

    $this->statisticsIsEnabled( );
      // Set status of the statistics module and init it



      //////////////////////////////////////////////////////////////////////////
      //
      // RETURN: statistics module is disa
[...]
t
    $this->countHit( );
      // Count the visit
    $this->countVisit( );
      // Counting



    return;
  }









  ";i:1;i:1;}s:12:"content_size";i:1915;s:13:"content_lines";i:69;s:6:"atLine";i:317;}i:11;a:7:{s:6:"header";s:32:"private function countHit( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:4:"cDat";a:5:{s:4:"text";s:136:"

countHit( ): The method counts the hits for a record in the singleView.
             There isn't any counting, if the page is cached.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:217:"    $table = $this->pObj->localTable;
    $field = $this->fieldHits;
    $uid   = $this->pObj->piVars['showUid'];

      // Count the hit
    $this->sql_update_statistics( $table, $field, $uid, '+' );

  }









  ";i:1;i:0;}s:12:"content_size";i:217;s:13:"content_lines";i:17;s:6:"atLine";i:396;}i:13;a:7:{s:6:"header";s:34:"private function countVisit( )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:4:"cDat";a:5:{s:4:"text";s:235:"

countVisit( ): The method counts the visits for a record in the singleView.
               Visits are managed by the method $this->pObj->objSession->statisticsNewVisit.
               There isn't any counting, if the page is cached.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $table = $this->pObj->localTable;
    $field = $this->fieldVisits;
    $uid   = $this->pObj->piVars['showUid'];

      // RETURN: no new visit
    $bool_newVisit = $this->pObj->objSession->statisticsNewVisit( $table, $field, $uid );
    if( ! $bool_newVisit )
    {
        // DRS - Development Reporting System
      if( $this->pObj->b_drs_statistics )
      {
        $
[...]
***********************************************
  *
  * SQL
  *
  **********************************************/









  ";i:1;i:1;}s:12:"content_size";i:840;s:13:"content_lines";i:45;s:6:"atLine";i:424;}i:15;a:5:{s:6:"header";s:76:"public function sql_update_statistics( $table, $field, $uid, $operator )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:11:"sectionText";a:1:{i:0;s:3:"SQL";}s:4:"cDat";a:5:{s:4:"text";s:511:"

sql_update_statistics( ):  The method increases or decreases the value of the given field
                           in the SQL table.
                           The method checks, if the field is existing.
                           If there is an SQL error or if there isn't any affected row,
                           the method logs in the DRS.
                           If the user has enabled the SQL debug by the flexform / TypoScript,
                           the method echos it in the frontend.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"$table:     name of the current table";}i:1;a:2:{i:0;s:6:"string";i:1;s:37:"$field:     name of the current field";}i:2;a:2:{i:0;s:7:"integer";i:1;s:37:"$uid:       uid of the current record";}i:3;a:2:{i:0;s:7:"integer";i:1;s:32:"$operator:  operator like + or -";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:6:"atLine";i:488;}i:17;a:8:{s:6:"header";s:57:"private function helperFieldInTable( $table, $field )
  {";s:11:"parentClass";s:25:"tx_browser_pi1_statistics";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:5:{s:4:"text";s:350:"

helperFieldInTable( ): The method checks,
                       * if the needed field for statistics data is an element of the local table
                       * if the type in the TCA is the type in the TypoScript
                       The result will be stored in the class var
                       $this->arr_checkedTables[$table][$field]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"$table: current table";}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"$field: current field";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"$this->arr_checkedTables[$table][$field]";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      ///////////////////////////////////////////////////////////////////////////////
      //
      // RETURN: table.field is checked before

    if( isset( $this->arr_checkedTables[$table][$field] ) )
    {
      return $this->arr_checkedTables[$table][$field];
    }
      // RETURN: table.field is checked before



      /////////////////////////////////////////////////
[...]
hp']) {
  include_once ($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_statistics.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:3681;s:13:"content_lines";i:94;s:6:"atLine";i:672;}}}s:14:"MD5_c1ba2d592c";a:4:{s:8:"filename";s:32:"pi1/class.tx_browser_pi1_tca.php";s:8:"filesize";i:24610;s:6:"header";a:5:{s:4:"text";s:108:"

The class tx_browser_pi1_tca bundles methods for evaluating the TYPO3 TCA array for the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:26:"class tx_browser_pi1_tca
{";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_browser_pi1_tca";s:4:"cDat";a:3:{s:4:"text";s:389:"

[CLASS/FUNCTION INDEX of SCRIPT]



  50: class tx_browser_pi1_tca
  69:     function __construct($parentObj)

             SECTION: Wrap fields automatically by autodiscover
  94:     function setArrHandleAs()
 190:     function autodiscConfig()
 282:     function autodiscTCA($tableField)

TOTAL FUNCTIONS: 4
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:227:"

  var $arr_select;
  // Array with the fields of the SQL result
  var $arr_orderBy;
  // Array with fields from orderBy from TS
  var $arr_rmFields;
  // Array with fields from functions.clean_up.csvTableFields from TS



   ";i:1;i:-1;}s:12:"content_size";i:227;s:13:"content_lines";i:11;s:6:"atLine";i:48;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:18:"tx_browser_pi1_tca";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:206:"    $this->pObj = $parentObj;
  }








  /***********************************************
   *
   * Wrap fields automatically by autodiscover
   *
   **********************************************/



  ";i:1;i:0;}s:12:"content_size";i:206;s:13:"content_lines";i:18;s:6:"atLine";i:67;}i:5;a:8:{s:6:"header";s:27:"function setArrHandleAs() {";s:11:"parentClass";s:18:"tx_browser_pi1_tca";s:11:"sectionText";a:1:{i:0;s:41:"Wrap fields automatically by autodiscover";}s:4:"cDat";a:3:{s:4:"text";s:36:"

Set the global array $arrHandleAs
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];


    /////////////////////////////////////////
    //
    // Is the array $arrHandleAs processed?

    if(!$this->pObj->boolArrHandleAsProcessed)
    {
      $this->pObj->boolArrHa
[...]
 {
        $this->autodiscTCA($columnValue); //:TODO:
      }
      $this->pObj->boolFirstElement = FALSE;
    }
  }






  ";i:1;i:1;}s:12:"content_size";i:2987;s:13:"content_lines";i:90;s:6:"atLine";i:92;}i:7;a:4:{s:6:"header";s:27:"function autodiscConfig() {";s:11:"parentClass";s:18:"tx_browser_pi1_tca";s:4:"cDat";a:3:{s:4:"text";s:128:"

Get the configuration for autodiscover from the TS, fill up the global arrays $arrAutodiscTCAitems and $arrDontDiscoverFields
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:188;}i:9;a:7:{s:6:"header";s:35:"function autodiscTCA($tableField) {";s:11:"parentClass";s:18:"tx_browser_pi1_tca";s:4:"cDat";a:3:{s:4:"text";s:153:"

Check, if comparison with all TCA properties of the field is successfull. If it is, add the table name and field name to the global array $arrHandleAs
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:65:"table name and field name, devided by a dot. I.e.: tt_news.images";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:13:"TRUE || FALSE";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view = $this->pObj->view;
    $viewWiDot = $view.'.';


    $TSconfAdItems  = $this->pObj->confAutodiscover['items.'];
    $tableField     = trim($tableField);


    //////////////////////////////////////////////////////////////////////////////////
    //
    // RETURN if $tableField is empty

    i
[...]
i1_tca.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_tca.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:15869;s:13:"content_lines";i:368;s:6:"atLine";i:280;}}}s:14:"MD5_03987cc836";a:4:{s:8:"filename";s:37:"pi1/class.tx_browser_pi1_template.php";s:8:"filesize";i:135428;s:6:"header";a:5:{s:4:"text";s:88:"

The class tx_browser_pi1_template bundles template methods for the extension browser

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 4.0.0";i:4;s:12:"@since 1.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:3:"DAT";a:17:{i:1;a:8:{s:6:"header";s:31:"class tx_browser_pi1_template
{";s:5:"class";i:1;s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:1055:"

[CLASS/FUNCTION INDEX of SCRIPT]



  69: class tx_browser_pi1_template
 133:     function __construct($parentObj)

             SECTION: Rendering HTML
 164:     function tmplSearchBox($template, $display)
 407:     function resultphrase()
 602:     function tmplListview($template, $rows)
1377:     function tmplSingleview($template, $rows)
1903:     function tmplTableHead($template)
2549:     function tmplRows($elements, $subpart, $template)
3349:     private function tmpl_marker( )
3379:     private function tmpl_rmFields( )

             SECTION: GroupBy
3419:     function groupBy_verify($template)
3496:     function groupBy_remove($template)
3519:     function groupBy_get_groupname($elements)
3544:     function groupBy_stdWrap($elements)

             SECTION: Handle As
3635:     function render_handleAs($elements, $handleAs, $markerArray)
3795:     function hook_template_elements()
3813:     function hook_template_elements_transformed()

TOTAL FUNCTIONS: 16
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1942:"

    //////////////////////////////////////////////////////
    //
    // Variables set by the pObj (by class.tx_browser_pi1.php)

    // [Array] The current TypoScript configuration array
  var $conf       = false;
    // [Integer] The current mode (from modeselector)
  var $mode       = false;
    // [String] 'list' or 'single': The current view
  var $view       = false;
    // [Array] The TypoScript configuration array of the current view
  var $conf_view  = false;
    // [String] TypoScript path to the current view. I.e. views.single.1
  var $conf_path  = false;
    // [Booelan] If true, workflow will executed in case of empty rows too
  var $ignore_empty_rows_rule = false;
    // Variables set by the pObj (by class.tx_browser_pi1.php)



    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Array]Array with the fields of the SQL result
  var $arr_select;
    // [Array] Array with fields from orderBy from TS
  var $arr_orderBy;
    // [Array] Array with fields from functions.clean_up.csvTableFields from TS
  var $arr_rmFields   = null;
    // [Array] Local or global TypoScript array with the displaySingle properties
  var $lDisplaySingle;
    // [Array] Local or global TypoScript array with the displayList properties
  var $lDisplayList;
    // [array] Array with default markers
  var $markerArray    = null;
    // [Integer] Amount of elements, which should dislayed
  var $max_elements   = null;
    // [string] HTML class for odd columns (th, td)
  var $oddClassColumns  = null;
    // [string] HTML class for odd rows (tr)
  var $oddClassRows   = null;
    // [Boolean] true, if rows should grouped, false, if rows shouldn't grouped
  var $bool_groupby;
    // [Array] Array [table.field] = $value.
    // It is needed by social media bookmarks in a default single view.
  var $arr_curr_value = false;
    // 3.4.0
    // Variables set by this class





";i:1;i:-1;}s:12:"content_size";i:1942;s:13:"content_lines";i:56;s:6:"atLine";i:67;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:185:"    $this->pObj = $parentObj;
  }










    /***********************************************
    *
    * Rendering HTML
    *
    **********************************************/



";i:1;i:0;}s:12:"content_size";i:185;s:13:"content_lines";i:20;s:6:"atLine";i:131;}i:5;a:8:{s:6:"header";s:47:"function tmplSearchBox($template, $display)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:11:"sectionText";a:1:{i:0;s:14:"Rendering HTML";}s:4:"cDat";a:5:{s:4:"text";s:36:"

Building the searchbox as a form.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:36:"$template: The current template part";}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"$display : display the searchbox or not";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:33:"$template: The HTML template part";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $cObj = $this->pObj->cObj;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];



      //////////////////////////////////////////////////////////
      //
      // RETURN searchform shouldn't displayed

    if (!$display)
    {
 
[...]
    $GLOBALS['TSFE']->id = $int_tsfeId; // #9458
    // action without filters and sword

    return $template;
  }









";i:1;i:1;}s:12:"content_size";i:8253;s:13:"content_lines";i:236;s:6:"atLine";i:162;}i:7;a:7:{s:6:"header";s:27:"function resultphrase()
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:50:"

Building the result phrase for the search form.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"Rendered rusult phrase";}}s:7:"content";a:2:{i:0;s:507:"    /**
     * This method correspondends with tx_browser_pi1_zz::color_swords($tableField, $str_content)
     */

    $lSearchform = $this->pObj->lDisplay['searchform.'];



    ///////////////////////////////////////////////////////////////
    //
    // RETURN in case of any swords

    if (!is_array($this->pObj->arr_swordPhrases))
    {
      return false;
    }
    //
[...]
false;
    }
    // RETURN false, in case of TypoScript: Don't display resultphrase'



    return $str_phrase;
  }









";i:1;i:1;}s:12:"content_size";i:6270;s:13:"content_lines";i:184;s:6:"atLine";i:405;}i:9;a:7:{s:6:"header";s:43:"function tmplListview($template, $rows)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:54:"

Building the table with the result in the list view
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:51:"A HTML template with the TYPO3 subparts and markers";}i:1;a:2:{i:0;s:5:"array";i:1;s:40:"Array with the records of the SQL result";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
      ////////////////////////////////////////////////////////
      //
      // Set the groupby mode and get a proper template

    $template = $this->groupBy_verify($template);
      // Set the groupby mode and get a proper template



      // Set the global arr_rmFields
    $this->tmpl_rmFields( );



      /////////////////////////////////////////////////////////////
[...]
ime - $this->pObj->startTime).' ms', $this->pObj->extKey, 0);
    }
    // DRS - Performance


    return $template;
  }


  ";i:1;i:1;}s:12:"content_size";i:27910;s:13:"content_lines";i:764;s:6:"atLine";i:600;}i:11;a:7:{s:6:"header";s:45:"function tmplSingleview($template, $rows)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:114:"

Building the table with the result in the single view. There can be more than one rows in case of 1:N Relations
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"Name of the current table";}i:1;a:2:{i:0;s:5:"array";i:1;s:28:"The SQL result as rows array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    ///////////////////////////////////////////////////////////
    //
    // Get the local or the global displaySingle array

    $lDisplaySingle = $this->conf_view['displaySingle.'];
    if (!is_array($lDisplaySingle))
    {
      $lDisplaySingle = $this->pObj->conf['displaySingle.'];
    }
    $this->lDisplaySingle = $lDisplaySingle;
    // Get the local or the global 
[...]
ion

    $this->pObj->objSeo->seo($singleRow);
    // SEO: Search Engine Optimisation


    return $template;
  }





      ";i:1;i:1;}s:12:"content_size";i:19334;s:13:"content_lines";i:516;s:6:"atLine";i:1375;}i:13;a:7:{s:6:"header";s:37:"function tmplTableHead($template)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:109:"

Building a row for the HTML table tag <thead> out of the given record and write it to the global $template
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:8:"Template";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"Template";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
      ///////////////////////////////////////////
      //
      // Get the field names from the SQL result

    reset($this->pObj->rows);
    $key          = key($this->pObj->rows);
    $lRows[0]     = $this->pObj->rows[$key];
    $arr_result   = $this->pObj->objSqlFun->rows_with_cleaned_up_fields($lRows);
    $lArrColumns  = $arr_result['data']['rows'];
    if(!is_array
[...]
Return the template with the table head

    return $template;
      // Return the template with the table head
  }







  ";i:1;i:1;}s:12:"content_size";i:23478;s:13:"content_lines";i:634;s:6:"atLine";i:1901;}i:15;a:7:{s:6:"header";s:53:"function tmplRows($elements, $subpart, $template)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:41:"

Building a row out of the given record
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"The SQL row (elements)";}i:1;a:2:{i:0;s:6:"string";i:1;s:51:"The subpart marker, which is the template for a row";}i:2;a:2:{i:0;s:6:"string";i:1;s:8:"Template";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"FALSE || HTML string";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Get the global $arrHandleAs array
    $handleAs                   = $this->pObj->arrHandleAs;
      // [Boolean] Shouldn't empty values handled?
    $bool_dontHandleEmptyValues = $this->pObj->objFlexform->bool_dontHandleEmptyValues;
    //var_dump('template 2218', $bool_dontHandleEmptyValues);



      //////////////////////////////////////////////////////////////
[...]
ey, 0);
      }
    }
    // DRS - Performance



    $this->pObj->boolFirstRow = false;
    return $htmlRow;
  }









  ";i:1;i:1;}s:12:"content_size";i:29146;s:13:"content_lines";i:791;s:6:"atLine";i:2547;}i:17;a:7:{s:6:"header";s:35:"private function tmpl_marker( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:39:"

cal_marker(): Set some global marker
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:483:"      // Set marker
    $this->markerArray['###MODE###']  = $this->pObj->piVar_mode;
    $this->markerArray['###VIEW###']  = $this->pObj->view;
    $this->markerArray                = $this->pObj->objMarker->extend_marker_wi_cObjData( $this->markerArray );
    $markerArray                      = $this->pObj->objWrapper->constant_markers( );
    foreach( (array) $markerArray as $key => $value)
    {
      $this->markerArray[$key] = $value;
    }
      // Set marker
  }









 ";i:1;i:0;}s:12:"content_size";i:483;s:13:"content_lines";i:20;s:6:"atLine";i:3347;}i:19;a:7:{s:6:"header";s:37:"private function tmpl_rmFields( )
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:117:"

tmpl_rmFields( ):  Get the field names, which should not displayed.
                   Set the global arr_rmFields
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 4.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // RETURN global $arr_rmFields is set
    if( is_array( $this->arr_rmFields ) )
    {
      return;
    }
      // RETURN global $arr_rmFields is set
    $conf_rmFields      = $this->conf_view['functions.']['clean_up.']['csvTableFields'];
    $arr_rmFields       = $this->pObj->objZz->getCSVasArray($conf_rmFields);
    $lArr_RmFields[0]   = array_flip($arr_rmFields);

[...]

  /***********************************************
  *
  * GroupBy
  *
  **********************************************/



";i:1;i:1;}s:12:"content_size";i:713;s:13:"content_lines";i:30;s:6:"atLine";i:3377;}i:21;a:8:{s:6:"header";s:38:"function groupBy_verify($template)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:11:"sectionText";a:1:{i:0;s:7:"GroupBy";}s:4:"cDat";a:3:{s:4:"text";s:245:"

Verifying the GROUPBY configuration. If groupby isn't configured in TypoScript, GROUPBY marker in HTML
template will be removed. If groupby is configured in TypoScript, but the template hasn't any GROUPBY marker
there will be a log in devlog.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:53:"$template: The HTML template with the GROUPBY-markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:67:"$template: The HTML template with or without the GROUPBY-by-markers";}}s:7:"content";a:2:{i:0;s:507:"    // Do we have a TypoScript group by configuration?
    $this->bool_groupby = false;
    if(isset($this->pObj->conf_sql['groupBy']) && $this->pObj->conf_sql['groupBy'] != '')
    {
      $this->bool_groupby = true;
    }
    // Do we have a TypoScript group by configuration?


    // RETURN if we have an HTML without any groupby marker
    if(strpos($template, '###GROUP
[...]
lopement Reporting System
    }
    // Remove all GROUPBY marker
    // Edit the template

    return $template;
  }








";i:1;i:1;}s:12:"content_size";i:2175;s:13:"content_lines";i:69;s:6:"atLine";i:3417;}i:23;a:7:{s:6:"header";s:38:"function groupBy_remove($template)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:28:"

Remove all GROUPBY marker
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:53:"$template: The HTML template with the groupby-markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:56:"$template: The HTML template without the groupby-markers";}}s:7:"content";a:2:{i:0;s:450:"    $template = $this->pObj->cObj->substituteSubpart($template, '###GROUPBYHEAD###', '', true);
    $template = str_replace('<!-- ###GROUPBY### begin -->',     '', $template);
    $template = str_replace('<!-- ###GROUPBY### end -->',       '', $template);
    $template = str_replace('<!-- ###GROUPBYBODY### begin -->', '', $template);
    $template = str_replace('<!-- ###GROUPBYBODY### end -->',   '', $template);
    return $template;
  }








";i:1;i:0;}s:12:"content_size";i:450;s:13:"content_lines";i:15;s:6:"atLine";i:3494;}i:25;a:7:{s:6:"header";s:45:"function groupBy_get_groupname($elements)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:68:"

Get the name of the group in the current record, if there is one.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:29:"$elements: The current record";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:72:"$str_return: Value of the group field. FALSE, if we aren't in group mode";}}s:7:"content";a:2:{i:0;s:265:"    $str_value = false;

    if($this->bool_groupby)
    {
      $str_tableField = trim($this->pObj->objSqlFun->get_orderBy_tableFields($this->pObj->conf_sql['groupBy']));
      $str_value      = $elements[$str_tableField];
    }
    return $str_value;
  }








";i:1;i:0;}s:12:"content_size";i:265;s:13:"content_lines";i:17;s:6:"atLine";i:3517;}i:27;a:7:{s:6:"header";s:39:"function groupBy_stdWrap($elements)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:3:{s:4:"text";s:60:"

groupBy_stdWrap: Wrap the group name, if it has a stdWrap
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:29:"$elements: The current record";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:78:"$str_return: Value of the group field wrapped by stdWrap if we have a TSconfig";}}s:7:"content";a:2:{i:0;s:507:"    // THIS is a method with a general task. todo: Generalie this method. dwildt, 100615




    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $cObj = $this->pObj->cObj;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];

    $lConfCObj  = false;
    $str_value  = false;

    //
[...]
***********************************************
  *
  * Handle As
  *
  **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:2107;s:13:"content_lines";i:81;s:6:"atLine";i:3542;}i:29;a:8:{s:6:"header";s:64:"function render_handleAs($elements, $handleAs, $markerArray)
  {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:11:"sectionText";a:1:{i:0;s:9:"Handle As";}s:4:"cDat";a:3:{s:4:"text";s:86:"

Wraps field values in respect to the TypoScript configuration an the handleAs cases
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:18:"$elements: SQL row";}i:1;a:2:{i:0;s:5:"array";i:1;s:98:"$handleAs: Array with the fieldnames which have a special handling like title, images or documents";}i:2;a:2:{i:0;s:5:"array";i:1;s:44:"$markerArray: Array with the current markers";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"$markerArray: Array with the current markers";}}s:7:"content";a:2:{i:0;s:507:"
    /////////////////////////////////////////
    //
    // RETURN without elements

    if(!is_array($elements))
    {
      return $markerArray;
    }
    if(count($elements) < 1)
    {
      return $markerArray;
    }
    // RETURN without elements


    $displayTitle = $this->pObj->lDisplay['title'];
    $rows         = $this->pObj->rows;
    $bool_nRows   = false;
  
[...]
   }
      // Process all the rest of the elements
    }
    // Wrap all elements


    return $markerArray;
  }










  ";i:1;i:1;}s:12:"content_size";i:4762;s:13:"content_lines";i:151;s:6:"atLine";i:3633;}i:31;a:4:{s:6:"header";s:35:"function hook_template_elements() {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:129:"

hook_template_elements(): hook to manipulate the elements of a row BEFORE the elements are linked or transformed by typoscript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:21:"@author 	Martin Bless";i:1;s:33:"@internal 	#12723, mbless, 110310";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:12:"Martin Bless";}s:9:"@internal";a:1:{i:0;s:22:"#12723, mbless, 110310";}}}s:6:"atLine";i:3793;}i:33;a:7:{s:6:"header";s:47:"function hook_template_elements_transformed() {";s:11:"parentClass";s:23:"tx_browser_pi1_template";s:4:"cDat";a:5:{s:4:"text";s:141:"

hook_template_elements_transformed( ): hook to manipulate the elements of a row AFTER the elements are linked or transformed by typoscript
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:21:"@author 	Martin Bless";i:1;s:33:"@internal 	#12723, mbless, 110310";}s:11:"other_index";a:2:{s:7:"@author";a:1:{i:0;s:12:"Martin Bless";}s:9:"@internal";a:1:{i:0;s:22:"#12723, mbless, 110310";}}}s:7:"content";a:2:{i:0;s:507:"      // debug($this->_elementsTransformed,'$this->_elementsTransformed',__LINE__,__FILE__);
      // debug($this->_elementsBoolSubstitute,'$this->_elementsBoolSubstitute',__LINE__,__FILE__);
    if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['browser']['BR_TemplateElementsTransformedHook'])) {
      foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['browser']['BR_Templ
[...]
.php'])
{
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_template.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:805;s:13:"content_lines";i:20;s:6:"atLine";i:3811;}}}s:14:"MD5_10262ce510";a:4:{s:8:"filename";s:40:"pi1/class.tx_browser_pi1_ttcontainer.php";s:8:"filesize";i:53545;s:6:"header";a:5:{s:4:"text";s:88:"

The class tx_browser_pi1_ttcontainer enables the Typoscript Template Container System
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:14:{i:1;a:8:{s:6:"header";s:34:"class tx_browser_pi1_ttcontainer
{";s:5:"class";i:1;s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:1190:"

[CLASS/FUNCTION INDEX of SCRIPT]



  69: class tx_browser_pi1_ttcontainer
 100:     function __construct($objBrowser)

             SECTION: Main
 128:     function main($rows)

             SECTION: Processing the Container
 264:     function loop_container_recurs($arr_container=array())
 476:     function get_container($arr_ttc_values, $str_ttc_type)

             SECTION: Processing the Markers
 562:     function get_marker_keys_recursive($arr_ttc_values)
 701:     function get_marker_uids($arr_marker_keys)
 732:     function get_marker_values($arr_marker_keys)
1162:     function get_marker_ordered($arr_marker_values)
1318:     function get_wrapped_marker($arr_ttc_values, $arr_marker_values, $str_ttc_type)

             SECTION: Helper methods for the markers
1444:     function wrap_marker($arr_ttc_values, $str_ttc_type)

             SECTION: Check the TypoScript Configuration
1513:     function check_container($arr_container)
1576:     function check_container_value($arr_container_value)

             SECTION: Realurl
1634:     function update_realurl($arr_ttc_values)

TOTAL FUNCTIONS: 13
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:621:"

  ///////////////////////////////////////
  //
  // Variables which are needed for recursive processing

  var $rows             = array();
  // The current SQL result as rows array
  var $arr_ts_view      = array();
  // The typoscript view array like: plugin.tx_browser_pi1.views.single.1
  var $arr_tt_container = array();
  // An array with values from the current TT_CONTAINER
  var $arr_ttc_values   = array();
  // An array with values from all TT_CONTAINER in the rootline
  var $str_ttc_path     = false;
  // A typoscript path like: ttContainer.2.0
  var $template         = '';
  // String: HTML code





  ";i:1;i:-1;}s:12:"content_size";i:621;s:13:"content_lines";i:23;s:6:"atLine";i:67;}i:3;a:7:{s:6:"header";s:37:"function __construct($objBrowser)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:172:"    $this->pObj = $objBrowser;
  }










  /***********************************************
   *
   * Main
   *
   **********************************************/



  ";i:1;i:0;}s:12:"content_size";i:172;s:13:"content_lines";i:20;s:6:"atLine";i:98;}i:5;a:8:{s:6:"header";s:24:"function main($rows)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:4:"Main";}s:4:"cDat";a:3:{s:4:"text";s:51:"

Finished HTML code - return the wrapped template
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:47:"$rows: Array with the records of the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Array with the elements error and data. Data contains the template.";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot      = $view.'.';
    $this->rows     = $rows;
    $this->template = '';

    $this->arr_ts_view = $conf['views.'][$viewWiDot][$mode.'.'];

    $arr_return['error']['status']  = false;
    $arr_return['data']['template'] = $this->template;


    /////////////
[...]
*************************
   *
   * Processing the Container
   *
   **********************************************/






  ";i:1;i:1;}s:12:"content_size";i:4213;s:13:"content_lines";i:128;s:6:"atLine";i:126;}i:7;a:8:{s:6:"header";s:58:"function loop_container_recurs($arr_container=array())
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:24:"Processing the Container";}s:4:"cDat";a:3:{s:4:"text";s:99:"

Loop through the current CONTAINER and all contained CONTAINERS (recursive). Return the template
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:36:"Array with the currrent tt_container";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Array with the elements error and data. Data contains the Template.";}}s:7:"content";a:2:{i:0;s:507:"
    $conf       = $this->pObj->conf;
    $conf_view  = $this->arr_ts_view;

    $arr_return['error']['status']  = false;


    /////////////////////////////////////
    //
    // Security: recursionGuard

    static $i_curr  = 0;

    $i_max = (int) $conf['advanced.']['recursionGuard'];
    #10116
    if(!empty($conf_view['advanced.']))
    {
      $i_max = (int) $conf_vi
[...]
   //
    // Return the Template

    $arr_return['data']['template'] = $template;
    return $arr_return;
  }












  ";i:1;i:1;}s:12:"content_size";i:6519;s:13:"content_lines";i:203;s:6:"atLine";i:262;}i:9;a:7:{s:6:"header";s:58:"function get_container($arr_ttc_values, $str_ttc_type)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:69:"

Process a TTC_STDWRAP or TTC_COA. Return it in finished HTML code.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:71:"$arr_ttc_values: TypoScript array of the current TTC_STDWRAP or TTC_COA";}i:1;a:2:{i:0;s:6:"string";i:1;s:54:"$str_ttc_type: Type of the TTC. TTC_COA or TTC_STDWRAP";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Array with the elements error and data. Data contains the Template.";}}s:7:"content";a:2:{i:0;s:507:"    $arr_return['error']['status']  = false;


    ///////////////////////////////////////
    //
    // Check TTC_STDWRAP or TTC_COA

    $arr_result = $this->check_container_value($arr_ttc_values);
    if ($arr_result['error']['status'])
    {
      return $arr_result;
    }
    unset($arr_result);


    ///////////////////////////////////////
    //
    // Process the M
[...]
******************************
   *
   * Processing the Markers
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:1685;s:13:"content_lines";i:78;s:6:"atLine";i:474;}i:11;a:8:{s:6:"header";s:55:"function get_marker_keys_recursive($arr_ttc_values)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:22:"Processing the Markers";}s:4:"cDat";a:3:{s:4:"text";s:86:"

Get all used markes in the current level and all children levels of the TypoScript.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:67:"$arr_ttc_values: The elements of the current TTC_STDWRAP or TTC_COA";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:68:"Array with the used markers as the array keys in table.field syntax.";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;

    /////////////////////////////////////
    //
    // Security: recursionGuard

    static $i_curr = 0;

    $i_max = (int) $conf['advanced.']['recursionGuard'];
    #10116
    if(!empty($conf_view['advanced.']))
    {
      $i_max = (int) $conf_view['advanced.']['recursionGuard'];
    }
    $i_curr++;
    if ($i_curr > $i_max) {
      if
[...]
}

      }
    }
    // Loop through the current level of the TypoScript (recursive)

    return $arr_markers;
  }








  ";i:1;i:1;}s:12:"content_size";i:4113;s:13:"content_lines";i:131;s:6:"atLine";i:560;}i:13;a:7:{s:6:"header";s:46:"function get_marker_uids($arr_marker_keys)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:66:"

Extends $arr_markers with keys from TT_CONTAINER tableFieldUid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:77:"$arr_markers: The marker array like: $arr_markers[tx_civserv_service.sv_name]";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:83:"The marker array extended with uidFields like: $arr_markers[tx_civserv_service.uid]";}}s:7:"content";a:2:{i:0;s:384:"
    foreach((array) $this->arr_ttc_values as $key => $arr_container_values)
    {
      if ($this->pObj->b_drs_ttc)
      {
        t3lib_div::devlog('[INFO/TTC] '.$arr_container_values['uidField'].' is added to the marker array.', $this->pObj->extKey, 0);
      }
      $arr_marker_keys[$arr_container_values['uidField']] = false;
    }
    return $arr_marker_keys;
  }












";i:1;i:0;}s:12:"content_size";i:384;s:13:"content_lines";i:23;s:6:"atLine";i:699;}i:15;a:7:{s:6:"header";s:48:"function get_marker_values($arr_marker_keys)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:66:"

Allocate the marker array with real values from the SQL result.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:77:"$arr_markers: The marker array like: $arr_markers[tx_civserv_service.sv_name]";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:62:"The marker array allocated with the values from the SQL result";}}s:7:"content";a:2:{i:0;s:507:"
    $rows         = $this->rows;
    // The result of the SQL query as the rows array
    $arr_limits   = $this->arr_limits;
    // An array with elements [x]['uidField'], [x]['limit'], [x]['ttc_path']
    $arr_uids     = array();
    // An array ...
    $b_first_run  = true;
    // We want messages only once


    /////////////////////////////////////
    //
    // Get f
[...]


    /////////////////////////////////////
    //
    // Return the result

    return $arr_marker_values;
  }













";i:1;i:1;}s:12:"content_size";i:14237;s:13:"content_lines";i:422;s:6:"atLine";i:730;}i:17;a:7:{s:6:"header";s:51:"function get_marker_ordered($arr_marker_values)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:66:"

Allocate the marker array with real values from the SQL result.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:36:"$arr_marker_values: The marker array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:24:"The ordered marker array";}}s:7:"content";a:2:{i:0;s:507:"    if (!is_array($arr_marker_values))
    {
      if ($this->pObj->b_drs_warn)
      {
        t3lib_div::devlog('[WARN/TTC] $arr_marker_values hasn\'t  any element. There won\'t be any ordering.', $this->pObj->extKey, 2);
      }
      return $arr_marker_values;
    }

    /////////////////////////////////////
    //
    // Get the key for the element with the order fiel
[...]
/////////////////////////
    //
    // Return the ordered markers

    return $arr_marker_values;
  }




















  ";i:1;i:1;}s:12:"content_size";i:4151;s:13:"content_lines";i:146;s:6:"atLine";i:1160;}i:19;a:7:{s:6:"header";s:83:"function get_wrapped_marker($arr_ttc_values, $arr_marker_values, $str_ttc_type)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:91:"

Wrap every marker. Extra process, if there is no row and if there is a no record message
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:71:"$arr_ttc_values: TypoScript array of the current TTC_STDWRAP or TTC_COA";}i:1;a:2:{i:0;s:5:"array";i:1;s:108:"$arr_marker_values: Rows with the pairs marker and value like: $arr_markers[0][tx_civserv_service.uid] = 112";}i:2;a:2:{i:0;s:6:"string";i:1;s:54:"$str_ttc_type: Type of the TTC. TTC_COA or TTC_STDWRAP";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Array with the elements error and data. Data contains the template.";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_return['error']['status']  = false;

    $template                       = false;
    $arr_return['data']['template'] = $template;


    ///////////////////////////////////////
    //
    // Development Reporting System

    $arr_path_container = explode('.', $this->str_ttc_path);
    $i_last             = count($arr_path_container[$i_last]) - 1;
    unset($arr_p
[...]
******************
   *
   * Helper methods for the markers
   *
   **********************************************/








 ";i:1;i:1;}s:12:"content_size";i:2887;s:13:"content_lines";i:117;s:6:"atLine";i:1316;}i:21;a:8:{s:6:"header";s:56:"function wrap_marker($arr_ttc_values, $str_ttc_type)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:30:"Helper methods for the markers";}s:4:"cDat";a:3:{s:4:"text";s:69:"

Process a marker with the cObj->stdWrap or cObj->COBJ_ARRAY method
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:71:"$arr_ttc_values: TypoScript array of the current TTC_STDWRAP or TTC_COA";}i:1;a:2:{i:0;s:6:"string";i:1;s:54:"$str_ttc_type: Type of the TTC. TTC_COA or TTC_STDWRAP";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Array with the elements error and data. Data contains the template.";}}s:7:"content";a:2:{i:0;s:507:"    $arr_return['error']['status']  = false;

    $arr_tsConf = $arr_ttc_values;
    // Get the TypoScript configuration

    if ($str_ttc_type == 'TTC_STDWRAP')
    {
      $str_value  = $arr_ttc_values['value'];
      // Get the value, if there is one
      $template = $this->pObj->local_cObj->stdWrap($str_value, $arr_tsConf);
    }
    elseif ($str_ttc_type == 'TTC_COA'
[...]
***************
   *
   * Check the TypoScript Configuration
   *
   **********************************************/






  ";i:1;i:1;}s:12:"content_size";i:1541;s:13:"content_lines";i:61;s:6:"atLine";i:1442;}i:23;a:8:{s:6:"header";s:44:"function check_container($arr_container)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:34:"Check the TypoScript Configuration";}s:4:"cDat";a:3:{s:4:"text";s:55:"

Check the TypoScript Configuration of a TT_CONTAINER
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:58:"$arr_container: The TypoScript of the current TT_CONTAINER";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"Array with the element error.";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_return['error']['status']  = false;


    ///////////////////////////////////////
    //
    // Is the TT_CONTAINER an array?

    if (!is_array($arr_container))
    {
      if ($this->pObj->b_drs_ttc || $this->pObj->b_drs_error)
      {
        t3lib_div::devlog('[ERROR/TTC] TT_CONTAINER isn\'t an array!', $this->pObj->extKey, 3);
      }
      $str_header  = '<
[...]
    $arr_return['error']['prompt'] = $str_prompt;
      return $arr_return;
    }

    return $arr_return;
  }












  ";i:1;i:1;}s:12:"content_size";i:1540;s:13:"content_lines";i:55;s:6:"atLine";i:1511;}i:25;a:4:{s:6:"header";s:56:"function check_container_value($arr_container_value)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:4:"cDat";a:3:{s:4:"text";s:65:"

Check the TypoScript Configuration of a TTC_STDWRAP or TTC_COA
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:68:"$arr_container: The TypoScript of the current TTC_STDWRAP or TTC_COA";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"Array with the element error.";}}s:6:"atLine";i:1574;}i:27;a:8:{s:6:"header";s:44:"function update_realurl($arr_ttc_values)
  {";s:11:"parentClass";s:26:"tx_browser_pi1_ttcontainer";s:11:"sectionText";a:1:{i:0;s:7:"Realurl";}s:4:"cDat";a:3:{s:4:"text";s:124:"

Update realurl configuration, if there is a typolink to another page with a extensions.browser.realurl_template property.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:71:"$arr_ttc_values: TypoScript array of the current TTC_STDWRAP or TTC_COA";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"Array with the element error.";}}s:7:"content";a:2:{i:0;s:507:"
    $arr_return['error']['status'] = false;


    //////////////////////////////////////////
    //
    // Is there a civserv realurl configuration?

    $str_realurl_template = $arr_ttc_values['typolink.']['extensions.']['browser.']['realurl_template'];
    // Get the civserv realurl configuration, which should be loaded. I.e: form
    if (!$str_realurl_template)
    {
 
[...]
hp']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_ttcontainer.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:3952;s:13:"content_lines";i:114;s:6:"atLine";i:1632;}}}s:14:"MD5_f0f9640f8f";a:4:{s:8:"filename";s:39:"pi1/class.tx_browser_pi1_typoscript.php";s:8:"filesize";i:28463;s:6:"header";a:5:{s:4:"text";s:91:"

The class tx_browser_pi1_typoscript bundles typoscript methods for the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.6.1";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}}}s:3:"DAT";a:9:{i:1;a:8:{s:6:"header";s:33:"class tx_browser_pi1_typoscript
{";s:5:"class";i:1;s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:665:"

[CLASS/FUNCTION INDEX of SCRIPT]



  59: class tx_browser_pi1_typoscript
 111:     function __construct($parentObj)

             SECTION: TypoScript Management
 151:     function oneDim_to_tree($conf_oneDim)

             SECTION: Get used tables from the TypoScript
 225:     function fetch_realTables_arrFields()
 364:     function fetch_localTable()

             SECTION: Helper Functions
 497:     function set_confSql()
 788:     function set_confSql_groupBy()
 866:     function set_confSqlDevider()
 922:     function fetch_realTableWiField($str_queryPart)

TOTAL FUNCTIONS: 8
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:1187:"
  //////////////////////////////////////////////////////
  //
  // Variables set by the pObj (by class.tx_browser_pi1.php)

  var $conf       = false;
  // [Array] The current TypoScript configuration array
  var $mode       = false;
  // [Integer] The current mode (from modeselector)
  var $view       = false;
  // [String] 'list' or 'single': The current view
  var $conf_view  = false;
  // [Array] The TypoScript configuration array of the current view
  var $conf_path  = false;
  // [String] TypoScript path to the current view. I.e. views.single.1
  // Variables set by the pObj (by class.tx_browser_pi1.php)


  //////////////////////////////////////////////////////
  //
  // Variables set by this class

  var $conf_sql;
  // Array with the SQL query parts from the TypoScript
  var $arr_realTables_arrFields;
  // Array with tables and fields in this syntax: array[table][] = field

  var $str_sqlDeviderDisplay  = false;
  // [String] Devider for children records. This devider should be displayed.
  var $str_sqlDeviderWorkflow = false;
  // [String] Devider for children records. This devider is for the workflow of stdWrap.
  // Variables set by this class












";i:1;i:-1;}s:12:"content_size";i:1187;s:13:"content_lines";i:44;s:6:"atLine";i:57;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:217:"    // Set the Parent Object
    $this->pObj = $parentObj;

  }










  /***********************************************
  *
  * TypoScript Management
  *
  **********************************************/






  ";i:1;i:0;}s:12:"content_size";i:217;s:13:"content_lines";i:25;s:6:"atLine";i:109;}i:5;a:8:{s:6:"header";s:41:"function oneDim_to_tree($conf_oneDim)
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:11:"sectionText";a:1:{i:0;s:21:"TypoScript Management";}s:4:"cDat";a:5:{s:4:"text";s:351:"

oneDim_to_tree():  Build a multidimensional TypoScript configuration array (tree)
                   out of a one dimensional array.
                   Example:
                   - $conf_oneDim['views.single.1.select'] = tt_news.title
                     will become
                   - $conf['views.']['single.']['1.']['select'] = tt_news.title
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:62:"$conf_oneDim  : TypoScript configuration array (one dimension)";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:46:"$conf         : TypoScript configuration array";}s:5:"other";a:2:{i:0;s:16:"@since     3.4.3";i:1;s:16:"@version   3.4.3";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.3 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $conf = array();

    // Values for preg_replace and preg_split
    $str_delimiter    = '|';
    $str_split        = '/' . preg_quote($str_delimiter, '/') . '/';
    $str_dot          = '/\./';
    $str_dot_replace  = '.|';
    // Values for preg_replace and preg_split

    // Loop: Each TypoScript configuration path
    foreach ($conf_oneDim as $key_oneDim => $value_o
[...]
**********************
  *
  * Get used tables from the TypoScript
  *
  **********************************************/


  ";i:1;i:1;}s:12:"content_size";i:1852;s:13:"content_lines";i:66;s:6:"atLine";i:149;}i:7;a:8:{s:6:"header";s:41:"function fetch_realTables_arrFields()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:11:"sectionText";a:1:{i:0;s:35:"Get used tables from the TypoScript";}s:4:"cDat";a:3:{s:4:"text";s:118:"

Returns an array with used tables and fields out of the TypoScript SQL query parts.
The tables will have real names
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Array with the syntax array[table][] = field";}}s:7:"content";a:2:{i:0;s:507:"

    //////////////////////////////////////////////////////
    //
    // DRS - Development Reporting System

    if ($this->pObj->b_drs_sql)
    {
      t3lib_div::devlog('[INFO/SQL] We try to fetch used tables.', $this->pObj->extKey, 0);
    }
    // DRS - Development Reporting System


    //////////////////////////////////////////////////////
    //
    // Get the typ
[...]
 $this->conf_sql = $lConfSql;
    // Set the class var conf_sql

    return $this->arr_realTables_arrFields;
  }











 ";i:1;i:1;}s:12:"content_size";i:4402;s:13:"content_lines";i:132;s:6:"atLine";i:223;}i:9;a:7:{s:6:"header";s:31:"function fetch_localTable()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:92:"

Rteurns the values for the array with the local table. The local table is the main table.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:90:"$arr_localTable: Array with the syntax: array[uid] = table.field, array[pid] = table.field";}}s:7:"content";a:2:{i:0;s:507:"
    /////////////////////////////////////////////////////
    //
    // RETURN, if $this->pObj->arrLocalTable is initiated

    if(is_array($this->pObj->arrLocalTable))
    {
      return $this->pObj->arrLocalTable;
    }


    /////////////////////////////////////////////////////
    //
    // DRS - Development Reporting System

    if ($this->pObj->b_drs_sql)
    {
    
[...]
******************************************
  *
  * Helper Functions
  *
  **********************************************/


 ";i:1;i:1;}s:12:"content_size";i:2882;s:13:"content_lines";i:124;s:6:"atLine";i:362;}i:11;a:8:{s:6:"header";s:26:"function set_confSql()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:11:"sectionText";a:1:{i:0;s:16:"Helper Functions";}s:4:"cDat";a:3:{s:4:"text";s:183:"

Sets the class var conf_sql with the SQL query statements from the TypoScript.
If there is a 'deal_as_table', SQL function will replaced.
All tables become an alias, functions too.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:10:"$conf_sql:";}}s:7:"content";a:2:{i:0;s:507:"
    if ($this->pObj->b_drs_sql)
    {
      t3lib_div::devlog('[INFO/SQL] Try to process aliases in SQL query parts.', $this->pObj->extKey, 0);
    }



    //////////////////////////////////////////////////////
    //
    // Array with the TypoScript element names, which should processed

    $arr_query_parts = array('select', 'from', 'search', 'orderBy', 'groupBy', 'whe
[...]
p('typoscript 649', $this->pObj->conf_sql);
    // Set the global array conf_sql

    return $conf_sql;

  }















 ";i:1;i:1;}s:12:"content_size";i:9341;s:13:"content_lines";i:280;s:6:"atLine";i:495;}i:13;a:7:{s:6:"header";s:32:"function set_confSql_groupBy() {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:274:"

THIS ISN'T THE GROUPBY FOR THE SQL QUERY
Allocates a proper group by in the global groupBy
It returns the group by part, which is needed for consolidation
If there is more than one value, all other values will be removed
If there are aliases, the aliases will be deleted.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:67:"$groupBy: The first groupBy value with ASC or DESC, if there is one";}}s:7:"content";a:2:{i:0;s:507:"
    ////////////////////////////////////////////////////////////////////
    //
    // RETURN if there isn't any groubBy in the TypoScript

    if(!isset($this->conf_view['groupBy']))
    {
      return false;
    }
    if(!$this->conf_view['groupBy'])
    {
      return false;
    }
    // RETURN if there isn't any groubBy in the TypoScript


    $groupBy = $this->conf_v
[...]
y-clause.', $this->pObj->extKey, -1);
    }
    // DRS - Development Reporting System

    return $groupBy;

  }











 ";i:1;i:1;}s:12:"content_size";i:1763;s:13:"content_lines";i:72;s:6:"atLine";i:786;}i:15;a:4:{s:6:"header";s:33:"function set_confSqlDevider()
  {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:74:"

Sets the global vars $str_sqlDeviderDisplay and $str_sqlDeviderWorkflow
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"false";}}s:6:"atLine";i:864;}i:17;a:7:{s:6:"header";s:49:"function fetch_realTableWiField($str_queryPart) {";s:11:"parentClass";s:25:"tx_browser_pi1_typoscript";s:4:"cDat";a:3:{s:4:"text";s:89:"

Allocates the class array arr_table_wi_arrFields with realname tables and there fields
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:58:"$str_queryPart: The query part out of the global conf_sql.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"false";}}s:7:"content";a:2:{i:0;s:507:"
    if (!$str_queryPart)
    {
      return false;
    }
    $arrCsv     = explode(',', $str_queryPart);
    $arrCsv     = $this->pObj->objSqlFun->clean_up_as_and_alias($arrCsv);
    $arrTmp[0]  = $arrCsv;
    $arrTmp     = $this->pObj->objSqlFun->replace_tablealias($arrTmp);
    $arrCsv     = $arrTmp[0];
    foreach((array) $arrCsv as $tableField) {
      list($table, $f
[...]
php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_typoscript.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:1117;s:13:"content_lines";i:44;s:6:"atLine";i:920;}}}s:14:"MD5_8148de96b5";a:4:{s:8:"filename";s:34:"pi1/class.tx_browser_pi1_views.php";s:8:"filesize";i:77152;s:6:"header";a:5:{s:4:"text";s:123:"

The class tx_browser_pi1_views bundles methods for displaying the list view and the singe view for the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:10:"@since 1.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:4:"1.0 ";}}}s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:28:"class tx_browser_pi1_views
{";s:5:"class";i:1;s:11:"parentClass";s:20:"tx_browser_pi1_views";s:4:"cDat";a:3:{s:4:"text";s:410:"

[CLASS/FUNCTION INDEX of SCRIPT]



  54: class tx_browser_pi1_views
  73:     function __construct($parentObj)

             SECTION: Building the views
 105:     function listView( $template )
1372:     function singleView($template)

             SECTION: Helper
1976:     public function displayThePlugin( )

TOTAL FUNCTIONS: 4
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:227:"

  var $arr_select;
  // Array with the fields of the SQL result
  var $arr_orderBy;
  // Array with fields from orderBy from TS
  var $arr_rmFields;
  // Array with fields from functions.clean_up.csvTableFields from TS



   ";i:1;i:-1;}s:12:"content_size";i:227;s:13:"content_lines";i:11;s:6:"atLine";i:52;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:20:"tx_browser_pi1_views";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:187:"    $this->pObj = $parentObj;
  }











  /***********************************************
   *
   * Building the views
   *
   **********************************************/




  ";i:1;i:0;}s:12:"content_size";i:187;s:13:"content_lines";i:22;s:6:"atLine";i:71;}i:5;a:8:{s:6:"header";s:34:"function listView( $template )
  {";s:11:"parentClass";s:20:"tx_browser_pi1_views";s:11:"sectionText";a:1:{i:0;s:18:"Building the views";}s:4:"cDat";a:5:{s:4:"text";s:72:"

Display a search form, a-z-Browser, pageBrowser and a list of records
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"$template: Template";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.6";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $cObj = $this->pObj->cObj;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];



      /////////////////////////////////////
      //
      // Overwrite global general_stdWrap

      // #12471, 110123, dwildt
    if (is_array($c
[...]
->pObj->startTime).' ms', $this->pObj->extKey, 0);
    }
      // DRS - Performance



    return $template;

  }









  ";i:1;i:1;}s:12:"content_size";i:40663;s:13:"content_lines";i:1258;s:6:"atLine";i:103;}i:7;a:4:{s:6:"header";s:34:"function singleView($template)
  {";s:11:"parentClass";s:20:"tx_browser_pi1_views";s:4:"cDat";a:5:{s:4:"text";s:42:"

Display a single item from the database
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:56:"$template: HTML template with TYPO3 subparts and markers";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.3";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.3 ";}}}s:6:"atLine";i:1370;}i:9;a:8:{s:6:"header";s:39:"public function displayThePlugin( )
  {";s:11:"parentClass";s:20:"tx_browser_pi1_views";s:11:"sectionText";a:1:{i:0;s:6:"Helper";}s:4:"cDat";a:5:{s:4:"text";s:1489:"

displayThePlugin( ): The Method checks, if the plugin should controlled by URL parameters.
                     Parameters are defined in the flexform or TypoScript.
                     Conditions
                     * URL Parameter is in the list for hiding this plugin
                       returns false
                     * URL Parameter is in the list for displaying this plugin
                       returns true, if it is in the list
                       returns false, if it isn't in the list
                     * If a paremeter is defined like tx_browser_pi1[showUid],
                       the method doesn't check any value of the GP parameter
                     * If a paremeter is defined like tx_browser_pi1[showUid]=123
                       the method checks the value of the GP parameter.
                       It returns true only, if value is met.
                     * If a paremeter is defined like tx_browser_pi1[*],
                       the methord returns true, if the GP parameter tx_browser_pi1 contains
                       one element at least.
                     It takes account of GP parameters from first to third level only.
                     It takes account for any paramter, but not piVars only.

                     * if the plugin should not controlled by URL parameter or
                     * if the plugin meets the conditions
                     False
                     * if the plugin doesn't meet the conditions
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"True,";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 3.9.3";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"3.9.3 ";}}}s:7:"content";a:2:{i:0;s:507:"    $sheet    = 'sDEF';
    $field_1  = 'controlling';
    $field_2  = 'enabled';



      //////////////////////////////////////////////////////////////////////
      //
      // RETURN true: Plugin shouldn't controlled by URL parameters

    $coa_name = $this->pObj->conf['flexform.'][$sheet . '.'][$field_1 . '.'][$field_2];
    $coa_conf = $this->pObj->conf['flexform.'][
[...]
ews.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_views.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:14189;s:13:"content_lines";i:358;s:6:"atLine";i:1974;}}}s:14:"MD5_6ec6ef30f1";a:4:{s:8:"filename";s:36:"pi1/class.tx_browser_pi1_wrapper.php";s:8:"filesize";i:50605;s:6:"header";a:5:{s:4:"text";s:86:"

The class tx_browser_pi1_wrapper bundles wrapper methods for the extension browser

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 4.0.0";i:4;s:12:"@since 3.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.0.0 ";}}}s:3:"DAT";a:13:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi1_wrapper
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:842:"

[CLASS/FUNCTION INDEX of SCRIPT]



  61: class tx_browser_pi1_wrapper
  80:     function __construct($parentObj)

             SECTION: Methods for wrap values and formating
 116:     function constant_markers()
 303:     function wrapAndLinkValue($tableField, $value, $recordId=0)
 936:     function wrapAndLinkValue_Children($tableField, $xsv_values, $lConfCObj, $ext)
1050:     function wrapImage($tsImage)
1232:     function wrapInBaseIdClass($content)
1268:     function wrapDocument($documents)
1322:     function wrapYYYYMMDD($specialDate)
1355:     function general_stdWrap($str, $arr_tsConf)
1384:     function tableSummary($view)
1428:     function tableCaption($view)
1468:     function wrapTableFields($wrapThisString, $elements)

TOTAL FUNCTIONS: 12
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:227:"

  var $arr_select;
  // Array with the fields of the SQL result
  var $arr_orderBy;
  // Array with fields from orderBy from TS
  var $arr_rmFields;
  // Array with fields from functions.clean_up.csvTableFields from TS



   ";i:1;i:-1;}s:12:"content_size";i:227;s:13:"content_lines";i:11;s:6:"atLine";i:59;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:212:"    $this->pObj = $parentObj;
  }














  /***********************************************
   *
   * Methods for wrap values and formating
   *
   **********************************************/







  ";i:1;i:0;}s:12:"content_size";i:212;s:13:"content_lines";i:28;s:6:"atLine";i:78;}i:5;a:8:{s:6:"header";s:31:"function constant_markers()
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:11:"sectionText";a:1:{i:0;s:37:"Methods for wrap values and formating";}s:4:"cDat";a:5:{s:4:"text";s:155:"

constant_markers(): Generate the markerArray with self-defined markers out of the TypoScript. Return a markerArray, if there are values for replacement.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:61:"The markerArray. If there aren't any value, it returns FALSE.";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.1";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];



      //////////////////////////////////////////////////////////
      //
      // Get the TypoScript marker array. RETURN, if there isn't any array.

    $conf_marker = $conf_view['mark
[...]
>pObj->cObj->data['uid'], $this->pObj->extKey, 0);
      }
    }
      // AJAX



    return $markerArray;
  }












  ";i:1;i:1;}s:12:"content_size";i:6208;s:13:"content_lines";i:175;s:6:"atLine";i:114;}i:7;a:7:{s:6:"header";s:63:"function wrapAndLinkValue($tableField, $value, $recordId=0)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:5:{s:4:"text";s:96:"

wrapAndLinkValue(): Wraps a value and links it. Method uses the COA property and API function
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:53:"$tableField: the field name in the format table.field";}i:1;a:2:{i:0;s:6:"string";i:1;s:42:"$value: The value, which should be wrapped";}i:2;a:2:{i:0;s:7:"integer";i:1;s:71:"$recordId: Id of the record, which should be displayed in a single view";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"The wrapped and linked value";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 2.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"2.0.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    static $bool_firsttime = true;

    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];

//// 110125, dwildt
//if(t3lib_div::getIndpEnv('REMOTE_ADDR') =='84.184.207.88')
//{
//  if(isset($conf_view['tx_org_repertoire.']['image.']['lay
[...]
>extKey, 0);
      }
    }
      // DRS - Performance



    $bool_firsttime = false;

    return $value;

  }












  ";i:1;i:1;}s:12:"content_size";i:21836;s:13:"content_lines";i:620;s:6:"atLine";i:301;}i:9;a:7:{s:6:"header";s:82:"function wrapAndLinkValue_Children($tableField, $xsv_values, $lConfCObj, $ext)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:291:"

wrapAndLinkValue_Children: Wraps the values and links of children records. Method is necessary because of the
                           workflow of the browser. Children records became a string. This method enables, to
                           wrap each child in the string seperately.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:53:"$tableField: the field name in the format table.field";}i:1;a:2:{i:0;s:6:"string";i:1;s:62:"$xsv_value: Variable seperated values, which should be wrapped";}i:2;a:2:{i:0;s:5:"array";i:1;s:42:"$lConfCObj: TypoScript configuration array";}i:3;a:2:{i:0;s:6:"string";i:1;s:104:"$ext: If "INT" then the cObject is a "COBJ_ARRAY_INT" (non-cached), otherwise just "COBJ_ARRAY" (cached)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:38:"The wrapped and linked children values";}}s:7:"content";a:2:{i:0;s:507:"
    //////////////////////////////////////////////////////////////
    //
    // Get the children devider configuration

    if($this->pObj->objTyposcript->str_sqlDeviderDisplay == false)
    {
      $this->pObj->objTyposcript->set_confSqlDevider();
    }
    if($this->pObj->objTyposcript->str_sqlDeviderWorkflow == false)
    {
      $this->pObj->objTyposcript->set_confSq
[...]
alue, $finalConfCObj);
    // 010810, fsander, #8434

//var_dump('wrapper 835', $value);
    return $value;
  }











  ";i:1;i:1;}s:12:"content_size";i:2999;s:13:"content_lines";i:104;s:6:"atLine";i:934;}i:11;a:7:{s:6:"header";s:32:"function wrapImage($tsImage)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:5:{s:4:"text";s:44:"

Wrap images with the TYPO3 stdWrap method
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:43:"$tsImage : the typoscript array of an image";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"The wrapped image(s)";}s:5:"other";a:2:{i:0;s:14:"@version 3.6.0";i:1;s:10:"@since 1.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.6.0 ";}s:6:"@since";a:1:{i:0;s:4:"1.0 ";}}}s:7:"content";a:2:{i:0;s:507:"
    static $bool_first = true;

    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view = $this->pObj->view;
    $viewWiDot = $view.'.';

    // If global array $handleAs has an uploadfolder overwrite $this->pObj->uploadFolder
    if($this->pObj->arrHandleAs['uploadfolder']['image'])
    {
      // DRS - Development Reporting System
      if($bool_f
[...]
dWrap.']);
      }
      // dwildt, 101201, #11204
    }

    $bool_first = false;

    return $wrappedImage;
  }









  ";i:1;i:1;}s:12:"content_size";i:5601;s:13:"content_lines";i:169;s:6:"atLine";i:1048;}i:13;a:7:{s:6:"header";s:40:"function wrapInBaseIdClass($content)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:5:{s:4:"text";s:256:"

wrapInBaseIdClass: Wrap the given content with a div-tag and the properties id and class.
                   id i.e    : id="c2794-tx-browser-pi1"
                   class i.e : class="c2794-tx-browser-pi1"
                   Method is added with #28562
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"$content: the content which will be wrapped";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"the wrapped content";}s:5:"other";a:2:{i:0;s:14:"@version 4.0.0";i:1;s:12:"@since 3.7.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"4.0.0 ";}s:6:"@since";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Rendering the id.  I.e. c1149-tx-browser-pi1-list-11083102
      //                    c1149:          uid in the tt_content table / uid of the plugin
      //                    tx-browser-pi1: prefix-id withreplaced _
      //                    view:           list
      //                    mode:           11083102
      //                    #29042
    $uidP
[...]
v' . $id . $class . '>';
    $wrap['end']    = '</div>';

    return $wrap['start'] . $content . $wrap['end'];
  }








  ";i:1;i:1;}s:12:"content_size";i:1043;s:13:"content_lines";i:28;s:6:"atLine";i:1230;}i:15;a:7:{s:6:"header";s:35:"function wrapDocument($documents) {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:48:"

Wrap documents with the TYPO3 filelink method
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"$documents : the list of documents";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"The wrapped document(s)";}}s:7:"content";a:2:{i:0;s:507:"
    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view = $this->pObj->view;
    $viewWiDot = $view.'.';

    if (!$documents) return false;

    // If global array $handleAs has an uploadfolder overwrite $this->pObj->uploadFolder
    // Bugfix #6776, dwildt, 100310
    if($this->pObj->arrHandleAs['uploadfolder']['document'])
    {
      if($this->p
[...]
each($fileArr)) {
      $filelinks .= $this->pObj->local_cObj->filelink($val, $lConf) ;
    }
    return $filelinks;
  }


  ";i:1;i:1;}s:12:"content_size";i:2019;s:13:"content_lines";i:46;s:6:"atLine";i:1266;}i:17;a:7:{s:6:"header";s:37:"function wrapYYYYMMDD($specialDate) {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:88:"

Wrap string in the format YYYY-MM-DD. It is a special method for the extension ships.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:45:"$string : the string in the format YYYY-MM-DD";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"$view : list or single";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"The wrapped document(s)";}}s:7:"content";a:2:{i:0;s:507:"
    if (!$specialDate) return false;

    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;

    $view = $this->pObj->view;
    $viewWiDot = $view.'.';

    if ($this->pObj->conf['views.'][$viewWiDot][$mode.'.']['format.']['date'] != '') {
      $dateFormat = $this->pObj->conf['views.'][$viewWiDot][$mode.'.']['format.']['date'];
    } else {
      $dateForma
[...]
te[2] == '') $arrDate[2] = 1;

    return date($dateFormat, mktime(0, 0, 0, $arrDate[1], $arrDate[2], $arrDate[0]));

  }

  ";i:1;i:1;}s:12:"content_size";i:799;s:13:"content_lines";i:24;s:6:"atLine";i:1320;}i:19;a:7:{s:6:"header";s:47:"function general_stdWrap($str, $arr_tsConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:152:"

Wraps the given string with general_stdWrap from configuration. If $arr_tsConf is an array, $arr_tsConf will be
processed instead of general_stdWrap.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"$string to wrap";}i:1;a:2:{i:0;s:5:"array";i:1;s:42:"$arr_tsConf: Array with a TS configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:14:"Wrapped string";}}s:7:"content";a:2:{i:0;s:531:"    if (is_array($arr_tsConf)) {
      // $arr_tsConf is an array. RETURN $str, wrapped with this TS configuration array.
      $str = $this->pObj->local_cObj->stdWrap($str, $arr_tsConf);
      return $str;
    }

    if (is_array($this->pObj->conf['general_stdWrap.'])) {
      // general_stdWrap is an array. RETURN $str, wrapped with general_stdWrap.
      $str = $this->pObj->local_cObj->stdWrap($str, $this->pObj->conf['general_stdWrap.']);
      return $str;
    }

    // RETURN $str unchanged.
    return $str;
  }






  ";i:1;i:0;}s:12:"content_size";i:531;s:13:"content_lines";i:21;s:6:"atLine";i:1353;}i:21;a:7:{s:6:"header";s:32:"function tableSummary($view)
  {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:55:"

Return the table summary out of the locallang_db.xml
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"view: list or single";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"summary";}}s:7:"content";a:2:{i:0;s:507:"
    $mode = 'mode_'.$this->pObj->piVar_mode;

    $langKey = $GLOBALS['TSFE']->lang;
    if($langKey == 'en') $langKey = 'default';

    $displaySummary = $this->pObj->lDisplay['table.']['summary'];
    switch(true) {
      case($displaySummary):
        $summaryLL = $this->pObj->pi_getLL($view.'_'.$mode.'_summary', '['.$view.'_'.$mode.'_summary]');
        switch(true) {
[...]
      }
        break;
          default:
            $summary = '';
            break;
    }

    return $summary;

  }


  ";i:1;i:1;}s:12:"content_size";i:1381;s:13:"content_lines";i:36;s:6:"atLine";i:1382;}i:23;a:4:{s:6:"header";s:30:"function tableCaption($view) {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:55:"

Return the table caption out of the locallang_db.xml
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"view: list or single";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:7:"summary";}}s:6:"atLine";i:1426;}i:25;a:7:{s:6:"header";s:54:"function wrapTableFields($wrapThisString, $elements) {";s:11:"parentClass";s:22:"tx_browser_pi1_wrapper";s:4:"cDat";a:3:{s:4:"text";s:68:"

Substitute marker ###TABLE.FIELD### with the value of table.field
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"String with one or more table field markers";}i:1;a:2:{i:0;s:5:"array";i:1;s:17:"The single record";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:43:"String with one ore more table field values";}}s:7:"content";a:2:{i:0;s:507:"
    if (!is_array($elements)) {
      return $wrapThisString;
    }
    // Marker Array
    // Tecklenborg-Werft: ###TX_SHIPS_MAIN.G2_NAME### - Geschichte und Bilder
    foreach((array) $elements as $key => $value) {
      $markerArray['###'.strtoupper($key).'###'] = $value;
    }
    return $this->pObj->cObj->substituteMarkerArray($wrapThisString, $markerArray);
  }





[...]
r.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_wrapper.php']);
}

?>
";i:1;i:1;}s:12:"content_size";i:631;s:13:"content_lines";i:38;s:6:"atLine";i:1466;}}}s:14:"MD5_37e67e1c02";a:4:{s:8:"filename";s:31:"pi1/class.tx_browser_pi1_zz.php";s:8:"filesize";i:89007;s:6:"header";a:5:{s:4:"text";s:75:"

The class tx_browser_pi1_zz bundles zz methods for the extension browser
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:5:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:14:"@version 3.9.3";i:4;s:12:"@since 1.0.0";}s:11:"other_index";a:5:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:3:"DAT";a:29:{i:1;a:8:{s:6:"header";s:27:"class tx_browser_pi1_zz
  {";s:5:"class";i:1;s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:2149:"

[CLASS/FUNCTION INDEX of SCRIPT]



  98: class tx_browser_pi1_zz
 144:     function __construct($parentObj)

             SECTION: piVars
 178:     function prepairePiVars()
 818:     function removeFiltersFromPiVars($inputPiVars, $filterConf)
 874:     function advanced_remove_piVars($keepFilters=0)
 980:     function advanced_remove_piVars_filter()

             SECTION: $GLOBAL markers
1108:     function get_t3globals_value($marker)
1183:     function substitute_t3globals_recurs($arr_multi_dimensional)

             SECTION: CSV process and format time
1353:     function getCSVasArray($csvValues)
1369:     function getCSVtablefieldsAsArray($csvTableFields)
1390:     function cleanUp_lfCr_doubleSpace($csvValue)
1414:     function setTsStrftime()

             SECTION: Link
1464:     function linkTP($str, $typolink=array(), $urlParameters=array(), $cache=0, $altPageId=0)
1499:     function linkTP_keepPIvars($str, $typolink=array(), $overrulePIvars=array(), $cache=0, $clearAnyway=0, $altPageId=0)
1533:     function get_absUrl($str_relUrl)
1568:     function get_singlePid_for_listview()
1628:     function get_cHash($str_params)
1651:     function get_pathWoEXT($str_TYPO3_EXT_path)

             SECTION: Markers
1704:     function extend_marker_wi_pivars($markerArray)

             SECTION: TypoScript children records
1749:     function children_tsconf_recurs($key, $arr_multi_dimensional, $str_devider)

             SECTION: Languages, _LOCAL_LANG
1841:     function getTableFieldLL($tableField)
1933:     function initLang()

             SECTION: Sword and Search respectively
1977:     function search_values($str_sword_phrase)
2421:     function color_swords($tableField, $value)

             SECTION: Security
2514:     function secure_piVar($str_value, $str_type)

             SECTION: TCA
2662:     function loadTCA($str_table)

             SECTION: TypoScript
2699:     function cleanup_views($conf)

             SECTION: UTF-8
2754:     function b_TYPO3_utf8()
2832:     function char_single_multi_byte($str_char)

TOTAL FUNCTIONS: 28
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:943:"





  //////////////////////////////////////////////////////
  //
  // Variables set by the pObj (by class.tx_browser_pi1.php)


    //////////////////////////////////////////////////////
    //
    // Variables set by this class

    // [Array] The current TypoScript configuration array
  var $conf       = false;
    // [Array] Temporarily array for storing piVars
  var $tmp_piVars   = false;
    // [Array] Array with all keys of the TYPO3 array $GLOBALS
  var $arr_t3global_keys = false;

    #10116
    // [Boolean] Don't replace $GLOBALS
  var $bool_advanced_dontReplace    = true;
    // [Integer] Maximum Number for recursive loops
  var $int_advanced_recursionGard   = 10000;
    // [Array] Array with security configuration for the search word
  var $arr_advanced_securitySword   = null;
    // #12528, dwildt, 110125
    // [Boolean] Empty marker in TypoScript will be removed
  var $bool_advanced_3_6_0_rmMarker = false;






";i:1;i:-1;}s:12:"content_size";i:943;s:13:"content_lines";i:38;s:6:"atLine";i:96;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:211:"    $this->pObj = $parentObj;
    $this->conf = $this->pObj->conf;
  }










  /***********************************************
  *
  * piVars
  *
  **********************************************/








  ";i:1;i:0;}s:12:"content_size";i:211;s:13:"content_lines";i:26;s:6:"atLine";i:142;}i:5;a:8:{s:6:"header";s:29:"function prepairePiVars()
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:6:"piVars";}s:4:"cDat";a:5:{s:4:"text";s:80:"

Prepaire piVars. Allocates values to $this->piVars and $this->pi_isOnlyFields
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:1:{i:0;s:14:"@version 3.7.3";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.7.3 ";}}}s:7:"content";a:2:{i:0;s:507:"      //////////////////////////////////////
      //
      // DRS message?

    if (isset($this->pObj->piVars['drs']))
    {
      if ($this->pObj->b_drs_warn)
      {
        $prompt = $this->pObj->piVars['drs'];
        t3lib_div::devlog('[WARN/DRS] Page was reloaded because of \''.$prompt.'\'', $this->pObj->extKey, 2);
      }
      unset($this->pObj->piVars['drs']);
 
[...]
}
    // DRS - Development Reporting System

  }













// 100709, frank.sander (new function removeFiltersFromPiVars)
";i:1;i:1;}s:12:"content_size";i:21800;s:13:"content_lines";i:628;s:6:"atLine";i:176;}i:7;a:7:{s:6:"header";s:63:"function removeFiltersFromPiVars($inputPiVars, $filterConf)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:5:{s:4:"text";s:50:"

Remove all filter entries off the PiVars array.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:28:"$inputPiVars: current piVars";}i:1;a:2:{i:0;s:5:"array";i:1;s:50:"$filterConf: TypoScript filter configuration array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:47:"The modified piVars Array (without filters now)";}s:5:"other";a:3:{i:0;s:23:"@author    Frank Sander";i:1;s:16:"@version   3.4.2";i:2;s:27:"@internal  Suggestion #9495";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:12:"Frank Sander";}s:8:"@version";a:1:{i:0;s:6:"3.4.2 ";}s:9:"@internal";a:1:{i:0;s:16:"Suggestion #9495";}}}s:7:"content";a:2:{i:0;s:507:"    // Get the filter fields
    if(is_array($filterConf) && is_array($inputPiVars))
    {
      foreach((array) $filterConf as $tableWiDot => $arrFields)
      {
        foreach((array) $arrFields as $fieldWiWoDot => $dummy)
        {
         if(substr($fieldWiWoDot, -1) != '.')
         {
           $arr_tableFilter[] = $tableWiDot.$fieldWiWoDot;
         }
        }
  
[...]
)
    {
      return (false);
    }
    // RETURN false in case of any piVar

    return $outputPiVars;
  }













    ";i:1;i:1;}s:12:"content_size";i:833;s:13:"content_lines";i:45;s:6:"atLine";i:816;}i:9;a:7:{s:6:"header";s:51:"function advanced_remove_piVars($keepFilters=0)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:5:{s:4:"text";s:197:"

advanced_remove_piVars():  Method is controlled by TypoSCript advanced.realUrl.linkToSingle.dont_display_piVars
                           Original piVars will stored in the global $this->piVars
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"boolean";i:1;s:12:"$keepFilters";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}s:5:"other";a:2:{i:0;s:16:"@version   3.4.2";i:1;s:43:"@internal  Suggestion #9495 by Frank Sander";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.4.2 ";}s:9:"@internal";a:1:{i:0;s:32:"Suggestion #9495 by Frank Sander";}}}s:7:"content";a:2:{i:0;s:507:"    // #9495, fsander
    //function advanced_remove_piVars()
    static $bool_firsttime = true;

    $conf = $this->pObj->conf;
    // #9495, fsander
    $mode       = $this->pObj->piVar_mode;
    $view       = $this->pObj->view;
    $viewWiDot  = $view.'.';
    $conf_view  = $conf['views.'][$viewWiDot][$mode.'.'];
    // #9495, fsander



    ////////////////////////////
[...]
->pObj->extKey, 0);
      }
    }
    $bool_firsttime = false;
    // DRS - Development Reporting System

  }













  ";i:1;i:1;}s:12:"content_size";i:2823;s:13:"content_lines";i:98;s:6:"atLine";i:872;}i:11;a:7:{s:6:"header";s:46:"function advanced_remove_piVars_filter()
    {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:116:"

advanced_remove_piVars_filter: Remove piVars, which are set by filter
                               Bugfix #8368
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"      static $bool_firstCall = true;

      ///////////////////////////////////////////////////////////
      //
      // RETURN if we have a second call

      if(!$bool_firstCall)
      {
        return;
      }
      // RETURN if we have a second call



      $bool_firstCall = false;

      $conf = $this->pObj->conf;
      $mode = $this->pObj->piVar_mode;

      $view 
[...]
*********************************
    *
    * $GLOBAL markers
    *
    **********************************************/

    ";i:1;i:1;}s:12:"content_size";i:2197;s:13:"content_lines";i:120;s:6:"atLine";i:978;}i:13;a:8:{s:6:"header";s:41:"function get_t3globals_value($marker)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:15:"$GLOBAL markers";}s:4:"cDat";a:3:{s:4:"text";s:42:"

Returns the value for a $GLOBALS marker
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:69:"Marker: The TSFE marker like ###TSFE:fe_user|enablecolumns|deleted###";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"The value from the TSFE array";}}s:7:"content";a:2:{i:0;s:507:"
    //////////////////////////////////////////////////////////////////////
    //
    // Get $GLOBAL['xxx']

    $marker     = str_replace('###', '', $marker);            // ###TSFE:fe_user|enablecolumns|deleted###
    $arr_marker = explode(':', $marker);                      // TSFE:fe_user|enablecolumns|deleted
    $arr_t3globals   = explode('|', $arr_marker[1]);       
[...]
   unset($arr_next_level);
    }
    // Loop through the $GLOBAL['TSFE'] array

    return $arr_curr_level;

  }










  ";i:1;i:1;}s:12:"content_size";i:1946;s:13:"content_lines";i:64;s:6:"atLine";i:1106;}i:15;a:7:{s:6:"header";s:64:"function substitute_t3globals_recurs($arr_multi_dimensional)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:324:"

Get access to the TYPO3 $GLOBALS array: Replace all markers in a multi-dimensional array like an TypoScript array
with the values from the $GLOBALS array.
Syntax for $GLOBALS markers is: ###$GLOBALS KEY:element_firstLevel|element_secondLevel|...###
I.e:                            ###TSFE:fe_user|enablecolumns|deleted###
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_multi_dimensional: Multi-dimensional array like an TypoScript array";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"$arr_multi_dimensional: The current Multi-dimensional array with substituted markers";}}s:7:"content";a:2:{i:0;s:507:"    $conf       = $this->pObj->conf;
    $conf_view  = $this->pObj->conf['views.'][$this->pObj->view.'.'][$this->pObj->piVar_mode.'.'];

//var_dump('zz 710', $GLOBALS['HTTP_ACCEPT_LANGUAGE']);
// string(35) "de-de,de;q=0.8,en;q=0.5,en-us;q=0.3"
//var_dump('zz 710', $GLOBALS['TSFE']);
//exit;
// string(35) "de-de,de;q=0.8,en;q=0.5,en-us;q=0.3"

    /////////////////////////
[...]
*******************
    *
    * CSV process and format time
    *
    **********************************************/



    ";i:1;i:1;}s:12:"content_size";i:5766;s:13:"content_lines";i:162;s:6:"atLine";i:1181;}i:17;a:8:{s:6:"header";s:38:"function getCSVasArray($csvValues)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:27:"CSV process and format time";}s:4:"cDat";a:3:{s:4:"text";s:58:"

Returns a comma seperated list as an array of elements.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"Comma seperated list of values";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"The array with the values";}}s:7:"content";a:2:{i:0;s:188:"    $tmpArrCSV = explode(',', $csvValues);
    foreach((array) $tmpArrCSV as $valueCSV) {
      $arrCSV[] = $this->cleanUp_lfCr_doubleSpace($valueCSV);
    }
    return $arrCSV;
  }


    ";i:1;i:0;}s:12:"content_size";i:188;s:13:"content_lines";i:8;s:6:"atLine";i:1351;}i:19;a:7:{s:6:"header";s:54:"function getCSVtablefieldsAsArray($csvTableFields)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:73:"

Returns a comma seperated list of table.field as an array of elements.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:58:"Comma seperated list of values in this format: table.field";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:37:"The array with the table.field values";}}s:7:"content";a:2:{i:0;s:300:"    $tmpArrCSV = explode(',', $csvTableFields);
    foreach((array) $tmpArrCSV as $valueCSV) {
      list($table, $field) = explode('.', trim($csvTableFields));
      $tableField = $table.'.'.$field;
      $arrCSV[] = $this->cleanUp_lfCr_doubleSpace($tableField);
    }
    return $arrCSV;
  }


    ";i:1;i:0;}s:12:"content_size";i:300;s:13:"content_lines";i:10;s:6:"atLine";i:1367;}i:21;a:7:{s:6:"header";s:48:"function cleanUp_lfCr_doubleSpace($csvValue)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:5:{s:4:"text";s:132:"

Removes linefeed, carriage returns and double spaces form a string.
We need it for TypoScript, if a user is using () instead of =
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"Comma seperated list of values";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:41:"Cleaned up comma seperated list of values";}s:5:"other";a:2:{i:0;s:14:"@version 3.9.3";i:1;s:12:"@since 1.0.0";}s:11:"other_index";a:2:{s:8:"@version";a:1:{i:0;s:6:"3.9.3 ";}s:6:"@since";a:1:{i:0;s:6:"1.0.0 ";}}}s:7:"content";a:2:{i:0;s:543:"    $csvValue = str_replace(chr(10), '', $csvValue); // Linefeed
    $csvValue = str_replace(chr(13), '', $csvValue); // Carriage return

    //$int_levelRecursMax = $this->int_advanced_recursionGard;
    $int_levelRecurs = 0;
    do
    {
      $csvValue = str_replace('  ', ' ', $csvValue);
      $int_levelRecurs++;
    }
    //while (!(strpos($csvValue, '  ') === false) && ($int_levelRecurs < $int_levelRecursMax));
    while ( ! ( strpos( $csvValue, '  ' ) === false ) );
    $csvValue = trim($csvValue);
    return $csvValue;
  }


    ";i:1;i:0;}s:12:"content_size";i:543;s:13:"content_lines";i:17;s:6:"atLine";i:1388;}i:23;a:7:{s:6:"header";s:28:"function setTsStrftime()
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:79:"

Sets the human readable format for timestamps in the global var $tsStrftime.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"The format for a local date/time";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;

    $view = $this->pObj->view;
    $mode = $this->pObj->piVar_mode;

    $viewWiDot      = $view.'.';
    $str_tsStrftime = '';

    if ($conf['views.'][$view.'.'][$mode.'.']['format.']['strftime'] != '')
    {
      $str_tsStrftime = $conf['views.'][$view.'.'][$mode.'.']['strftime.']['date'];
      // Local format for human readable timesta
[...]


  /***********************************************
  *
  * Link
  *
  **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:645;s:13:"content_lines";i:36;s:6:"atLine";i:1412;}i:25;a:8:{s:6:"header";s:92:"function linkTP($str, $typolink=array(), $urlParameters=array(), $cache=0, $altPageId=0)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:4:"Link";}s:4:"cDat";a:5:{s:4:"text";s:167:"

Link string to the current page.
Returns the $str wrapped in <a>-tags with a link to the CURRENT page, but with $urlParameters set as extra parameters for the page.
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:5:"array";i:1;s:14:"Typolink array";}i:2;a:2:{i:0;s:5:"array";i:1;s:194:"Array with URL parameters as key/value pairs. They will be "imploded" and added to the list of parameters defined in the plugins TypoScript property "parent.addParams" plus $this->pi_moreParams.";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:193:"If $cache is set (0/1), the page is asked to be cached by a &cHash value (unless the current plugin using this class is a USER_INT). Otherwise the no_cache-parameter will be a part of the link.";}i:4;a:2:{i:0;s:7:"integer";i:1;s:84:"Alternative page ID for the link. (By default this function links to the SAME page!)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"The input string wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:51:"@see pi_linkTP_keepPIvars(), tslib_cObj::typoLink()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:46:"pi_linkTP_keepPIvars(), tslib_cObj::typoLink()";}}}s:7:"content";a:2:{i:0;s:507:"    // Based on class.tslib_pibase.php::pi_linkTP: We added params $typolink

    $typolink['useCacheHash'] = $this->pObj->pi_USER_INT_obj ? 0 : $cache;
    $typolink['no_cache']     = $this->pObj->pi_USER_INT_obj ? 0 : !$cache;

    if(!$typolink['parameter'])
    {
      $tmpPageId              = $this->pObj->pi_tmpPageId;
      $typolink['parameter']  = $altPageId ? $al
[...]
Obj->pi_moreParams;
    $str_typolink = $this->pObj->cObj->typoLink($str, $typolink);
    return $str_typolink;
  }




     ";i:1;i:1;}s:12:"content_size";i:704;s:13:"content_lines";i:19;s:6:"atLine";i:1462;}i:27;a:7:{s:6:"header";s:120:"function linkTP_keepPIvars($str, $typolink=array(), $overrulePIvars=array(), $cache=0, $clearAnyway=0, $altPageId=0)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:5:{s:4:"text";s:368:"

Link a string to the current page while keeping currently set values in piVars.
Like pi_linkTP, but $urlParameters is by default set to $this->piVars with $overrulePIvars overlaid.
This means any current entries from this->piVars are passed on (except the key "DATA" which will be unset before!) and entries in $overrulePIvars will OVERRULE the current in the link.
";s:5:"param";a:6:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The content string to wrap in <a> tags";}i:1;a:2:{i:0;s:5:"array";i:1;s:14:"Typolink array";}i:2;a:2:{i:0;s:5:"array";i:1;s:305:"Array of values to override in the current piVars. Contrary to pi_linkTP the keys in this array must correspond to the real piVars array and therefore NOT be prefixed with the $this->pObj->prefixId string. Further, if a value is a blank string it means the piVar key will not be a part of the link (unset)";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:187:"If $cache is set, the page is asked to be cached by a &cHash value (unless the current plugin using this class is a USER_INT). Otherwise the no_cache-parameter will be a part of the link.";}i:4;a:2:{i:0;s:7:"boolean";i:1;s:177:"If set, then the current values of piVars will NOT be preserved anyways... Practical if you want an easy way to set piVars without having to worry about the prefix, "tx_xxxxx[]"";}i:5;a:2:{i:0;s:7:"integer";i:1;s:84:"Alternative page ID for the link. (By default this function links to the SAME page!)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"The input string wrapped in <a> tags";}s:5:"other";a:1:{i:0;s:13:"@see linkTP()";}s:11:"other_index";a:1:{s:4:"@see";a:1:{i:0;s:9:"linkTP() ";}}}s:7:"content";a:2:{i:0;s:581:"    // Based on class.tslib_pibase.php::pi_linkTP: We added params $typolink

    $piVars = $this->pObj->piVars;

    if (is_array($piVars) && is_array($overrulePIvars) && !$clearAnyway)
    {
      unset($piVars['DATA']);
      $overrulePIvars = t3lib_div::array_merge_recursive_overrule($piVars, $overrulePIvars);
      if ($this->pObj->pi_autoCacheEn)
      {
        $cache = $this->pObj->pi_autoCache($overrulePIvars);
      }
    }
    $res = $this->linkTP($str, $typolink, array($this->pObj->prefixId=>$overrulePIvars), $cache, $altPageId);
    return $res;
  }










  ";i:1;i:0;}s:12:"content_size";i:581;s:13:"content_lines";i:26;s:6:"atLine";i:1497;}i:29;a:7:{s:6:"header";s:36:"function get_absUrl($str_relUrl)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:40:"

get_absUrl: Get the absolute URL path
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"$str_relUrl: relative URL path";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:30:"$str_absUrl: Absolute URL path";}}s:7:"content";a:2:{i:0;s:515:"    $str_site_url = t3lib_div::getIndpEnv('TYPO3_SITE_URL');
    $str_absUrl   = $str_site_url.$str_relUrl;

    // Prevent simulateStatic bug
    $tmp_site_url = substr($str_relUrl, 0, strlen($str_site_url));
    if ($tmp_site_url == $str_site_url)
    {
      // $str_relUrl got a full qualified URL
      $str_absUrl = $str_relUrl;
    }
    if ($tmp_site_url != $str_site_url)
    {
      $str_absUrl = $str_site_url.$str_relUrl;
    }
    // Prevent simulateStatic bug

    return $str_absUrl;
  }










  ";i:1;i:0;}s:12:"content_size";i:515;s:13:"content_lines";i:28;s:6:"atLine";i:1531;}i:31;a:7:{s:6:"header";s:41:"function get_singlePid_for_listview()
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:68:"

get_singlePid_for_listview: The singlePid for links in list views
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:15:"$singlePid: uid";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;
    $mode = $this->pObj->piVar_mode;
    $view = $this->pObj->view;

    $viewWiDot = $view.'.';
    $conf_view = $conf['views.'][$viewWiDot][$mode.'.'];


    $singlePid = false;
    // Get the page id of the page with the single view from the local value
    if(isset($conf_view['displayList.']['singlePid']))
    {
      $singlePid = $conf_v
[...]
      }
    }
    // Get id of the current page
    $singlePid = intval($singlePid);

    return $singlePid;
  }










  ";i:1;i:1;}s:12:"content_size";i:1577;s:13:"content_lines";i:52;s:6:"atLine";i:1566;}i:33;a:7:{s:6:"header";s:35:"function get_cHash($str_params)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:32:"

Calculate the cHash md5 value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:89:"$str_params: URL parameter string like &tx_browser_pi1[showUid]=12&&tx_browser_pi1[cat]=1";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:37:"$cHash_md5: md5 value like d218cfedf9";}}s:7:"content";a:2:{i:0;s:163:"    $cHash_array  = t3lib_div::cHashParams($str_params);
    $cHash_md5    = t3lib_div::shortMD5(serialize($cHash_array));

    return $cHash_md5;
  }










  ";i:1;i:0;}s:12:"content_size";i:163;s:13:"content_lines";i:15;s:6:"atLine";i:1626;}i:35;a:7:{s:6:"header";s:47:"function get_pathWoEXT($str_TYPO3_EXT_path)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:77:"

get_pathWoEXT: Delivers a proper relative path, if path has an EXT: prefix
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$str_TYPO3_EXT_path: With or without EXT: prefix";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:41:"$str_TYPO3_EXT_path: Proper relative path";}}s:7:"content";a:2:{i:0;s:507:"    if ($str_TYPO3_EXT_path && substr($str_TYPO3_EXT_path, 0, 4) == 'EXT:')
    {
      $str_path_wo_EXT = substr($str_TYPO3_EXT_path, 4);
      list($str_extKey, $str_path) = explode('/', $str_path_wo_EXT, 2);
      $str_extKey = strtolower($str_extKey);
      if ($str_extKey == $this->pObj->extKey || t3lib_extMgm::isLoaded($str_extKey))
      {
        $str_TYPO3_EXT_pat
[...]
*************************************
    *
    * Markers
    *
    **********************************************/







  ";i:1;i:1;}s:12:"content_size";i:638;s:13:"content_lines";i:43;s:6:"atLine";i:1649;}i:37;a:8:{s:6:"header";s:50:"function extend_marker_wi_pivars($markerArray)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:7:"Markers";}s:4:"cDat";a:3:{s:4:"text";s:173:"

Replace all markers in a multi-dimensional array like an TypoScript array with the real values from the SQL result
The method extends the SQL result with all piVar values
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:72:"$arr_multi_dimensional: Multi-dimensional array like an TypoScript array";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$elements: The current row of the SQL result";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:84:"$arr_multi_dimensional: The current Multi-dimensional array with substituted markers";}}s:7:"content";a:2:{i:0;s:507:"
    /////////////////////////////////////
    //
    // Add to the marker array the piVars

    foreach ($this->pObj->piVars as $key_pivar => $value_pivar)
    {
      $markerArray['###'.strtoupper($key_pivar).'###'] = $value_pivar;
      if ($this->pObj->boolFirstRow && $this->pObj->b_drs_templating)
      {
        t3lib_div::devlog('[INFO/TEMPLATING] The piVar ['.$key_
[...]
*************************
   *
   * TypoScript children records
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:788;s:13:"content_lines";i:35;s:6:"atLine";i:1702;}i:39;a:8:{s:6:"header";s:79:"function children_tsconf_recurs($key, $arr_multi_dimensional, $str_devider)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:27:"TypoScript children records";}s:4:"cDat";a:3:{s:4:"text";s:26:"

children_tsconf_recurs:
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:59:"$key: key of the current child in the string with childrens";}i:1;a:2:{i:0;s:5:"array";i:1;s:58:"$arr_multi_dimensional: Multi-dimensional TypoScript array";}i:2;a:2:{i:0;s:6:"string";i:1;s:64:"$str_devider: The devider of the childrens in the current string";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:71:"$arr_multi_dimensional: A proper TypoScript array for the current child";}}s:7:"content";a:2:{i:0;s:507:"    $conf = $this->pObj->conf;



    ////////////////////////////////////////////////
    //
    // Security: recursionGuard

    static $int_levelRecurs = 0;

    $int_levelRecursMax = $this->int_advanced_recursionGard;
    $int_levelRecurs++;
    if ($int_levelRecurs > $int_levelRecursMax)
    {
      if ($this->pObj->b_drs_error)
      {
        t3lib_div::devlog('[ERR
[...]
******************************
   *
   * Languages, _LOCAL_LANG
   *
   **********************************************/



  ";i:1;i:1;}s:12:"content_size";i:2252;s:13:"content_lines";i:84;s:6:"atLine";i:1747;}i:41;a:8:{s:6:"header";s:39:"function getTableFieldLL($tableField) {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:22:"Languages, _LOCAL_LANG";}s:4:"cDat";a:3:{s:4:"text";s:157:"

Returns the label for a fieldname from local language array. First it tries to get a llValue out of the _local_lang, if it failed, take a look in the TCA.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:55:"Fieldname in the _LOCAL_LANG array or the locallang.xml";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:79:"Return the translated label in case of success. Otherwise the given table.field";}}s:7:"content";a:2:{i:0;s:507:"
    ////////////////////////////////////
    //
    // _LOCAL_LANG

    // We don't like the dots between a SQL table and field, i.e: maintable.title should be maintable_title
    $tableFieldWoDot = str_replace('.', '_', $tableField);
    $llFieldName = $this->pObj->pi_getLL($tableFieldWoDot, '['.$tableFieldWoDot.']');
    if($llFieldName != '['.$tableFieldWoDot.']') {
  
[...]
ease configure _LOCAL_LANG.'.$langKey.'.'.$tableFieldWoDot, $this->pObj->extKey, 1);
    }

    return $tableField;
  }



  ";i:1;i:1;}s:12:"content_size";i:2583;s:13:"content_lines";i:85;s:6:"atLine";i:1839;}i:43;a:7:{s:6:"header";s:23:"function initLang()
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:29:"

Inits the class 'language'
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:55:"Fieldname in the _LOCAL_LANG array or the locallang.xml";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:507:"    require_once(PATH_typo3.'sysext/lang/lang.php');
    $this->pObj->lang = t3lib_div::makeInstance('language');
    $this->pObj->lang->init($GLOBALS['TSFE']->lang);
    if($this->pObj->b_drs_localisation)
    {
      t3lib_div::devlog('[INFO/LOCALISATION] Init a language object.', $this->pObj->extKey, 0);
      t3lib_div::devlog('[INFO/LOCALISATION] Value of $GLOBALS[TSF
[...]
*****************
    *
    * Sword and Search respectively
    *
    **********************************************/



    ";i:1;i:1;}s:12:"content_size";i:623;s:13:"content_lines";i:34;s:6:"atLine";i:1931;}i:45;a:8:{s:6:"header";s:45:"function search_values($str_sword_phrase)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:29:"Sword and Search respectively";}s:4:"cDat";a:3:{s:4:"text";s:193:"

Returns an array with search values out of the given search phrase.
Example for a phrase: "Dirk Wildt" Pressesprecher Berlin
This will return the elements: Dirk Wildt, Pressesprecher, Berlin
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$str_search_phrase: piVar value";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:13:"search values";}}s:7:"content";a:2:{i:0;s:507:"    $conf_sword           = $this->arr_advanced_securitySword;
    $lSearchform          = $this->conf['displayList.']['display.']['searchform.'];
    $int_minLen           = $conf_sword['minLenWord'];
    $csv_swordAddSlashes  = $conf_sword['addSlashes.']['csvChars'];
      // Example phrase: Helmut und Schmidt und Bundeskanzler nicht Entertainer "Helmut Kohl"


      ///
[...]
rn['data']['arr_resultphrase']['str_mask']   = $str_resultphrase_mask;
    return $arr_return;
      // RETURN result
  }



";i:1;i:1;}s:12:"content_size";i:15895;s:13:"content_lines";i:433;s:6:"atLine";i:1975;}i:47;a:7:{s:6:"header";s:46:"function color_swords($tableField, $value)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:238:"

Colors sword words and phrases. RETURN word and phrase with an HTML wrap. Depending on TypoScript configuration.
Example for a phrase: "Dirk Wildt" Pressesprecher Berlin
This will return the elements: Dirk Wildt, Pressesprecher, Berlin
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"$tableField: Syntax table.field";}i:1;a:2:{i:0;s:6:"string";i:1;s:68:"$value: Content. Maybe with or maybe without a value like the sword.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:62:"$value: Wrapped swords. Depending on TypoScript configuration.";}}s:7:"content";a:2:{i:0;s:507:"    /**
     * This method correspondends with tx_browser_pi1_template::resultphrase()
     */

    $view = $this->pObj->view;

      // There isn't any sword. RETURN.
    if (!is_array($this->pObj->arr_swordPhrasesTableField))
    {
  // 3.3.4
  //if(t3lib_div::_GP('dev')) var_dump('zz 2205: RETURN no sword phrase');
      return $value;
    }
      // There isn't any swo
[...]
******************************************
    *
    * Security
    *
    **********************************************/



";i:1;i:1;}s:12:"content_size";i:1609;s:13:"content_lines";i:84;s:6:"atLine";i:2419;}i:49;a:8:{s:6:"header";s:48:"function secure_piVar($str_value, $str_type)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:8:"Security";}s:4:"cDat";a:3:{s:4:"text";s:101:"

Checks the value of a piVar for security. Get magic quotes, stripslashes, mysql_real_escape_string
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"$str_value: piVar value";}i:1;a:2:{i:0;s:6:"string";i:1;s:62:"$str_type: Type for evaluation like string, integer or boolean";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"piVar value";}}s:7:"content";a:2:{i:0;s:507:"
    $str_value_in         = $str_value;
    $conf_sword           = $this->arr_advanced_securitySword;
    $csv_swordAddSlashes  = $conf_sword['addSlashes.']['csvChars'];


      ////////////////////////////////////
      //
      // Get Magic Quotes

      // PHP/MySQL-Documentation: file:///usr/share/doc/packages/php-doc/html/security.database.sql-injection.html

    if
[...]
***********************************************
    *
    * TCA
    *
    **********************************************/



";i:1;i:1;}s:12:"content_size";i:3032;s:13:"content_lines";i:140;s:6:"atLine";i:2512;}i:51;a:8:{s:6:"header";s:32:"function loadTCA($str_table)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:3:"TCA";}s:4:"cDat";a:3:{s:4:"text";s:56:"

Load the TCA, if we don't have an table.columns array
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"$str_table: name of table";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:430:"
    if (!is_array($GLOBALS['TCA'][$str_table]['columns']))
    {
      t3lib_div::loadTCA($str_table);
      if ($this->pObj->b_drs_tca)
      {
        t3lib_div::devlog('[INFO/DISCOVER] $GLOBALS[\'TCA\'][\''.$str_table.'\'] is loaded.', $this->pObj->extKey, 0);
      }
    }

  }









    /***********************************************
    *
    * TypoScript
    *
    **********************************************/



";i:1;i:0;}s:12:"content_size";i:430;s:13:"content_lines";i:28;s:6:"atLine";i:2660;}i:53;a:8:{s:6:"header";s:33:"function cleanup_views($conf)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:10:"TypoScript";}s:4:"cDat";a:5:{s:4:"text";s:63:"

cleanup_views(): Clean up the views. Removes the view names.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:39:"$conf: current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:5:"$conf";}s:5:"other";a:1:{i:0;s:14:"@version 3.6.1";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.6.1 ";}}}s:7:"content";a:2:{i:0;s:507:"      // #11981, 110106, dwildt
      // Remove any value, keep arrays
    foreach((array) $conf['views.']['list.'] as $key => $view)
    {
      if(substr($key, -1, 1) != '.')
      {
        unset($conf['views.']['list.'][$key]);
      }
    }
    foreach((array) $conf['views.']['single.'] as $key => $view)
    {
      if(substr($key, -1, 1) != '.')
      {
        unset
[...]
*****************************************
    *
    * UTF-8
    *
    **********************************************/



    ";i:1;i:1;}s:12:"content_size";i:813;s:13:"content_lines";i:45;s:6:"atLine";i:2697;}i:55;a:5:{s:6:"header";s:27:"function b_TYPO3_utf8()
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:11:"sectionText";a:1:{i:0;s:5:"UTF-8";}s:4:"cDat";a:3:{s:4:"text";s:217:"

Checks the TYPO3 utf-8 configuration.

                     $GLOBALS[TSFE]->metaCharset, $GLOBALS[TSFE]->renderCharset
                     Result can be overriden by $conf['navigation.']['a-z_Browser.']['charset']
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:95:"TRUE, if one of the following variables has the value utf-8: $TYPO3_CONF_VARS[BE][forceCharset]";}}s:6:"atLine";i:2752;}i:57;a:7:{s:6:"header";s:46:"function char_single_multi_byte($str_char)
  {";s:11:"parentClass";s:17:"tx_browser_pi1_zz";s:4:"cDat";a:3:{s:4:"text";s:87:"

Translate a char to one-byte and multi-byte notation for both cases lower and upper.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:91:"The char, we want back in lower and upper case and with single byte and multi-byte notation";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:76:"Array with for for elements. false, if it $str_char isn't a multi-byte char.";}}s:7:"content";a:2:{i:0;s:507:"
    // We don't have multi-byte chars in the MySQL database only.
    // It's possible, that files in PHP stored multi-byte chars too.

    if (strlen($str_char) == strlen(mb_strtolower($str_char, 'UTF-8')))
    {
      // Initial in a multi-byte notation. We want all chars like Ã¤ or Ã„
      if (strlen(mb_strtolower($str_char, "UTF-8")) < 2)
      {
        // Len 
[...]
_pi1_zz.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi1/class.tx_browser_pi1_zz.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:2266;s:13:"content_lines";i:55;s:6:"atLine";i:2830;}}}s:14:"MD5_797917575c";a:4:{s:8:"filename";s:26:"pi1/flexform_locallang.php";s:8:"filesize";i:70244;s:6:"header";N;s:3:"DAT";a:0:{}}s:14:"MD5_dbea598ae8";a:4:{s:8:"filename";s:28:"pi2/class.tx_browser_pi2.php";s:8:"filesize";i:4192;s:6:"header";a:5:{s:4:"text";s:104:"

Plugin 'Browser' for the 'browser' extension - the fastest way for your data into the TYPO3 frontend.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:43:"class tx_browser_pi2 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:14:"tx_browser_pi2";s:4:"cDat";a:3:{s:4:"text";s:266:"

[CLASS/FUNCTION INDEX of SCRIPT]



  49: class tx_browser_pi2 extends tslib_pibase

             SECTION: Main Process
 109:     function main($content, $conf, $pObj)

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:47;}i:3;a:8:{s:6:"header";s:39:"function main($content, $conf, $pObj) {";s:11:"parentClass";s:14:"tx_browser_pi2";s:11:"sectionText";a:1:{i:0;s:12:"Main Process";}s:4:"cDat";a:3:{s:4:"text";s:29:"

Main method of your PlugIn
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:35:"$content: The content of the PlugIn";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn Configuration";}i:2;a:2:{i:0;s:5:"array";i:1;s:24:"$pObj: The parent object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"The content that should be displayed on the website";}}s:7:"content";a:2:{i:0;s:507:"
    //var_dump(get_defined_constants());

    $this->conf = $conf;
    $this->pObj = $pObj;

    $this->pi_loadLL();



    //////////////////////////////////////////////////////////////////////
    //
    // Instantiate the pi2 classes

    require_once('class.tx_browser_pi2_checker.php');
    // Class with the functions for checking TypoScript update
    $this->objCheck
[...]
rowser_pi2.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi2/class.tx_browser_pi2.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:1548;s:13:"content_lines";i:66;s:6:"atLine";i:107;}}}s:14:"MD5_38810eae45";a:4:{s:8:"filename";s:36:"pi2/class.tx_browser_pi2_checker.php";s:8:"filesize";i:45591;s:6:"header";a:5:{s:4:"text";s:82:"

The class tx_browser_pi2_checker bundles classes for checking TypoScript update
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:50:"@author    Dirk Wildt <wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:22:"@subpackage    browser";i:3;s:14:"@version 3.7.0";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:39:"Dirk Wildt <wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:8:"browser ";}s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}}}s:3:"DAT";a:13:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi2_checker
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:1234:"

[CLASS/FUNCTION INDEX of SCRIPT]



  61: class tx_browser_pi2_checker
  76:     function __construct($parentObj)

             SECTION: Main
 112:     function loop_tickets( )
 214:     function get_image_path($int_status)

             SECTION: Checker Methods
 292:     function str_to_int($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
 414:     function value_is_out_of_date($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
 540:     function moved_value_into_array($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
 661:     function moved_array($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
 796:     function moved_value($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
 910:     function remove_value($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
1018:     function moved_from_ts_to_plugin($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
1124:     function moved_from_plugin_to_plugin($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
1244:     function prompt_otherBrowserPlugins()

TOTAL FUNCTIONS: 12
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:71:"


  var $str_style_ts;
  // HTML style property for TypoScript Code


";i:1;i:-1;}s:12:"content_size";i:71;s:13:"content_lines";i:7;s:6:"atLine";i:59;}i:3;a:7:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";a:2:{i:0;s:310:"    $this->pObj = $parentObj;
    $this->conf = $this->pObj->conf;

    $this->str_style_ts = ' style="font-size:small;color:blue;padding:0 0 0 1em;background:#EEE;"';

  }










  /***********************************************
  *
  * Main
  *
  **********************************************/








 ";i:1;i:0;}s:12:"content_size";i:310;s:13:"content_lines";i:29;s:6:"atLine";i:74;}i:5;a:8:{s:6:"header";s:28:"function loop_tickets( )
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:11:"sectionText";a:1:{i:0;s:4:"Main";}s:4:"cDat";a:3:{s:4:"text";s:81:"

loop_tickets: Check the current TypoScript configuration. Returns HTML report.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:11:"HTML report";}}s:7:"content";a:2:{i:0;s:507:"    //////////////////////////////////////////////////////////
    //
    // Get the Ticket array and the current Typoscript configuration

    $arr_release_tickets    = $this->pObj->arr_tickets;
    $arr_conf_oneDimension  = t3lib_BEfunc::implodeTSParams($this->conf, $prefixId = '');
    // Get the Ticket array and the current Typoscript configuration


    //////////////
[...]
p>
      '.$template.'
      </div>
      <p></p>
      ';
    // The whole result



    return $template;
  }












 ";i:1;i:1;}s:12:"content_size";i:2318;s:13:"content_lines";i:94;s:6:"atLine";i:110;}i:7;a:7:{s:6:"header";s:40:"function get_image_path($int_status)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:30:"

Get teh path to a gif image
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:47:"$int_status: The constant of the status message";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:21:"Path to the GIF image";}}s:7:"content";a:2:{i:0;s:507:"    switch($int_status)
    {
      case(PI2_STATUS_OK):
        $str_gif  = 'icon_ok.gif';
        $int_w    = 18;
        $int_h    = 16;
        break;
      case(PI2_STATUS_INFO):
        $str_gif  = 'info.gif';
        $int_w    = 17;
        $int_h    = 12;
        break;
      case(PI2_STATUS_HELP):
        $str_gif  = 'icon_note.gif';
        $int_w    = 18;
      
[...]
************************************
  *
  * Checker Methods
  *
  **********************************************/








  ";i:1;i:1;}s:12:"content_size";i:911;s:13:"content_lines";i:67;s:6:"atLine";i:212;}i:9;a:8:{s:6:"header";s:89:"function str_to_int($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:11:"sectionText";a:1:{i:0;s:15:"Checker Methods";}s:4:"cDat";a:3:{s:4:"text";s:101:"

Check if the current TypoScript code value is a string and not an integer. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_code = $arr_ticket['srce']['typoscript']['code'];

    // If there is no code to update RETURN
    if (!array_key_exists($str_srce_code, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
      {
        t3lib_div::devlog('[INFO/UPDATE] '.$str_srce_code.' isn\'t a part of TypoSript.', $this->pObj->extKey, 0);
      }
      return fals
[...]
l_return  = str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }








  ";i:1;i:1;}s:12:"content_size";i:3902;s:13:"content_lines";i:111;s:6:"atLine";i:290;}i:11;a:7:{s:6:"header";s:99:"function value_is_out_of_date($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:67:"

Check if the given value exist. If yes, the value is out of date
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_code          = $arr_ticket['srce']['typoscript']['code'];
    $str_value_out_of_date  = $arr_ticket['srce']['value_out_of_date'];
    $str_new_value          = $arr_ticket['srce']['new_value'];

      // If there is no code to update RETURN
    if (!array_key_exists($str_srce_code, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
 
[...]
eturn  = str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }









    ";i:1;i:1;}s:12:"content_size";i:4270;s:13:"content_lines";i:115;s:6:"atLine";i:412;}i:13;a:7:{s:6:"header";s:101:"function moved_value_into_array($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:102:"

Check if the current TypoScript value isn't moved to the destination array. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_code = $arr_ticket['srce']['typoscript']['code'];
    $str_dest_code = $arr_ticket['dest']['typoscript']['code'];

    // If we have the destination code RETURN
    if (array_key_exists($str_dest_code, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
      {
        t3lib_div::devlog('[INFO/UPDATE] '.$str_dest_code.' is a part of th
[...]
eturn  = str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }









    ";i:1;i:1;}s:12:"content_size";i:3979;s:13:"content_lines";i:109;s:6:"atLine";i:538;}i:15;a:7:{s:6:"header";s:90:"function moved_array($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:5:{s:4:"text";s:102:"

Check if the current TypoScript array isn't moved to the destination array. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}s:5:"other";a:1:{i:0;s:14:"@version 3.7.0";}s:11:"other_index";a:1:{s:8:"@version";a:1:{i:0;s:6:"3.7.0 ";}}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_path = $arr_ticket['srce']['typoscript']['path'];
    $str_dest_path = $arr_ticket['dest']['typoscript']['path'];

//      // If we have the destination code RETURN
//    foreach((array) $arr_conf_oneDimension as $key => $value)
//    {
//      $pos = strpos($key, $str_dest_path);
////      if (!($pos === false))
//      if ($pos === 0)
//      {
//        if
[...]
eturn  = str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }









    ";i:1;i:1;}s:12:"content_size";i:4269;s:13:"content_lines";i:124;s:6:"atLine";i:659;}i:17;a:7:{s:6:"header";s:90:"function moved_value($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:102:"

Check if the current TypoScript array isn't moved to the destination array. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_path = $arr_ticket['srce']['typoscript']['path'];
    $str_dest_path = $arr_ticket['dest']['typoscript']['path'];

    // If we have the destination code RETURN
    if (array_key_exists($str_dest_path, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
      {
        t3lib_div::devlog('[INFO/UPDATE] '.$str_dest_path.' is a part of th
[...]
  = str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }














    ";i:1;i:1;}s:12:"content_size";i:3620;s:13:"content_lines";i:103;s:6:"atLine";i:794;}i:19;a:7:{s:6:"header";s:91:"function remove_value($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:108:"

remove_value: Check if the current TypoScript value or array is existing. Than it returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    // Get the source value
    $str_srce_path  = $arr_ticket['srce']['typoscript']['path'];

    // If we don't have any source code RETURN
    if (!array_key_exists($str_srce_path, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
      {
        t3lib_div::devlog('[INFO/UPDATE] TypoScript code is removed:<br />'.$str_srce_path.' >', $this->pObj
[...]
str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }


















    ";i:1;i:1;}s:12:"content_size";i:3089;s:13:"content_lines";i:97;s:6:"atLine";i:908;}i:21;a:7:{s:6:"header";s:102:"function moved_from_ts_to_plugin($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:102:"

Check if the current TypoScript value isn't moved to the destination array. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_srce_code = $arr_ticket['srce']['typoscript']['code'];

    // If there is no code to update RETURN
    if (!array_key_exists($str_srce_code, $arr_conf_oneDimension))
    {
      if ($this->pObj->pObj->b_drs_tsUpdate)
      {
        t3lib_div::devlog('[INFO/UPDATE] '.$str_srce_code.' isn\'t a part of TypoSript.', $this->pObj->extKey, 0);
      }
      return fals
[...]
str_replace('%version%', $arr_ticket['version'], $str_html_return);

    return $str_html_return;

  }


















    ";i:1;i:1;}s:12:"content_size";i:3062;s:13:"content_lines";i:94;s:6:"atLine";i:1016;}i:23;a:4:{s:6:"header";s:106:"function moved_from_plugin_to_plugin($int_release, $int_ticketNo, $arr_ticket, $arr_conf_oneDimension)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:156:"

moved_from_plugin_to_plugin: Check if the current TypoScript value isn't moved to the destination array.
                         Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:6:"atLine";i:1122;}i:25;a:7:{s:6:"header";s:41:"function prompt_otherBrowserPlugins()
  {";s:11:"parentClass";s:22:"tx_browser_pi2_checker";s:4:"cDat";a:3:{s:4:"text";s:102:"

Check if the current TypoScript value isn't moved to the destination array. Returns an HTML report.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:7:"integer";i:1;s:60:"$int_release: The number of the release like 0, 1, 2, 3, ...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$int_ticketNo: The number of the ticket like 0, 123, 4567";}i:2;a:2:{i:0;s:5:"array";i:1;s:48:"$arr_ticket: The array with the tiket properties";}i:3;a:2:{i:0;s:5:"array";i:1;s:60:"$arr_conf_oneDimension: The current TypoScript configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"$str_html_return: HTML report";}}s:7:"content";a:2:{i:0;s:507:"    $str_html_return = false;
    $int_currentPage = $GLOBALS['TSFE']->id;


    //////////////////////////////////////////////////////////
    //
    // Get all browser plugins with uid, pid and hidden

    $select_fields = '`uid`, `pid`, `header`, `hidden`';
    $from_table    = 'tt_content';
    //$where_clause  = '`list_type` = \'browser_pi1\' AND `deleted` = 0 AND `pi
[...]
er.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi2/class.tx_browser_pi2_checker.php']);
}

?>";i:1;i:1;}s:12:"content_size";i:4007;s:13:"content_lines";i:135;s:6:"atLine";i:1242;}}}s:14:"MD5_20651afd84";a:4:{s:8:"filename";s:36:"pi2/class.tx_browser_pi2_tickets.php";s:8:"filesize";i:50426;s:6:"header";a:5:{s:4:"text";s:71:"

The class tx_browser_pi2_tickets contains the array with the tickets
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:16:"@version   3.9.6";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:8:"@version";a:1:{i:0;s:6:"3.9.6 ";}}}s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi2_tickets
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi2_tickets";s:4:"cDat";a:3:{s:4:"text";s:292:"

[CLASS/FUNCTION INDEX of SCRIPT]



  49: class tx_browser_pi2_tickets
  63:     function __construct($parentObj)

             SECTION: Array with all Tickets
 128:     function init_tickets()

TOTAL FUNCTIONS: 2
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:8:"





  ";i:1;i:-1;}s:12:"content_size";i:8;s:13:"content_lines";i:6;s:6:"atLine";i:47;}i:3;a:4:{s:6:"header";s:36:"function __construct($parentObj)
  {";s:11:"parentClass";s:22:"tx_browser_pi2_tickets";s:4:"cDat";a:3:{s:4:"text";s:53:"

Constructor. The method initiate the parent object
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:17:"The parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:61;}i:5;a:8:{s:6:"header";s:25:"function init_tickets() {";s:11:"parentClass";s:22:"tx_browser_pi2_tickets";s:11:"sectionText";a:1:{i:0;s:22:"Array with all Tickets";}s:4:"cDat";a:3:{s:4:"text";s:37:"

Initiate an array with the tickets
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:22:"Array with the Tickets";}}s:7:"content";a:2:{i:0;s:507:"
    /////////////////////////////////////////////////////
    //
    // Set the Ticket array

    // Syntax:  Release|TicketNo|Properties
    // Example: 3      |123     |The Ticket Array
    $int_v = 2;
    // Version
    $int_t = 0;
    //Ticket

    $int_t++;
    $arr_release[$int_v][$int_t]['header']['default']               = 'A-Z-Browser Default Tab';
    $arr_relea
[...]
hp']) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi2/class.tx_browser_pi2_tickets.php']);
  }

?>";i:1;i:1;}s:12:"content_size";i:47353;s:13:"content_lines";i:504;s:6:"atLine";i:126;}}}s:14:"MD5_f187f7239a";a:4:{s:8:"filename";s:28:"pi3/class.tx_browser_pi3.php";s:8:"filesize";i:2296;s:6:"header";a:5:{s:4:"text";s:38:"

Plugin '' for the 'test' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:47:"@author    Dirk Wildt <wildt@die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:36:"Dirk Wildt <wildt@die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:43:"class tx_browser_pi3 extends tslib_pibase
{";s:5:"class";i:1;s:11:"parentClass";s:14:"tx_browser_pi3";s:4:"cDat";a:5:{s:4:"text";s:38:"

Plugin '' for the 'test' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:47:"@author    Dirk Wildt <wildt@die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:36:"Dirk Wildt <wildt@die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:6:"atLine";i:45;}i:3;a:7:{s:6:"header";s:34:"function main($content, $conf)
  {";s:11:"parentClass";s:14:"tx_browser_pi3";s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$content: The PlugIn content";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"The content that is displayed on the website";}}s:7:"content";a:2:{i:0;s:324:"    $str_manuals = $this->cObj->COBJ_ARRAY($conf['manuals.'],$ext='');
    return $str_manuals;
  }
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi3/class.tx_browser_pi3.php'])    {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi3/class.tx_browser_pi3.php']);
}";i:1;i:0;}s:12:"content_size";i:324;s:13:"content_lines";i:9;s:6:"atLine";i:62;}}}s:14:"MD5_7767433c96";a:4:{s:8:"filename";s:44:"pi3/class.tx_browser_pi3_backend_wizicon.php";s:8:"filesize";i:2532;s:6:"header";a:5:{s:4:"text";s:35:"

Class that adds the wizard icon.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:38:"class tx_browser_pi3_backend_wizicon
{";s:5:"class";i:1;s:11:"parentClass";s:30:"tx_browser_pi3_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:204:"

[CLASS/FUNCTION INDEX of SCRIPT]



  46: class tx_browser_pi3_backend_wizicon
  69:     function getLL()

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:44;}i:3;a:7:{s:6:"header";s:19:"function getLL()
	{";s:11:"parentClass";s:30:"tx_browser_pi3_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:53:"

Get the locallang for class use out of an XML file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"Array of the locallang data";}}s:7:"content";a:2:{i:0;s:517:"  	$path2llXml = t3lib_extMgm::extPath('browser').'locallang_db.xml';
    $llXml 			= implode('', file($path2llXml));
		$arr_ll			= t3lib_div::xml2array($llXml, $NSprefix='', $reportDocTag=false);
    $LOCAL_LANG	= $arr_ll['data'];
    return $LOCAL_LANG;
  }
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi3/class.tx_browser_pi3_backend_wizicon.php'])
{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi3/class.tx_browser_pi3_backend_wizicon.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:517;s:13:"content_lines";i:16;s:6:"atLine";i:67;}}}s:14:"MD5_0614a446d8";a:4:{s:8:"filename";s:20:"pi3/flexform_tca.php";s:8:"filesize";i:625;s:6:"header";N;s:3:"DAT";a:0:{}}s:14:"MD5_f61a0818ac";a:4:{s:8:"filename";s:28:"pi4/class.tx_browser_pi4.php";s:8:"filesize";i:3318;s:6:"header";a:5:{s:4:"text";s:104:"

Plugin 'Browser' for the 'browser' extension - the fastest way for your data into the TYPO3 frontend.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:57:"@author    Dirk Wildt <http://wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:46:"Dirk Wildt <http://wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:1:{i:1;a:8:{s:6:"header";s:45:"class tx_browser_pi4 extends tx_browser_pi1 {";s:5:"class";i:1;s:11:"parentClass";s:14:"tx_browser_pi4";s:4:"cDat";a:3:{s:4:"text";s:184:"

[CLASS/FUNCTION INDEX of SCRIPT]



  90: class tx_browser_pi4 extends tx_browser_pi1

TOTAL FUNCTIONS: 0
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:241:"
}

















if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi4/class.tx_browser_pi4.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi4/class.tx_browser_pi4.php']);
}

?>
";i:1;i:-1;}s:12:"content_size";i:241;s:13:"content_lines";i:24;s:6:"atLine";i:88;}}}s:14:"MD5_e1526fe144";a:4:{s:8:"filename";s:44:"pi4/class.tx_browser_pi4_backend_wizicon.php";s:8:"filesize";i:2532;s:6:"header";a:5:{s:4:"text";s:35:"

Class that adds the wizard icon.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:38:"class tx_browser_pi4_backend_wizicon
{";s:5:"class";i:1;s:11:"parentClass";s:30:"tx_browser_pi4_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:204:"

[CLASS/FUNCTION INDEX of SCRIPT]



  46: class tx_browser_pi4_backend_wizicon
  69:     function getLL()

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:44;}i:3;a:7:{s:6:"header";s:19:"function getLL()
	{";s:11:"parentClass";s:30:"tx_browser_pi4_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:53:"

Get the locallang for class use out of an XML file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"Array of the locallang data";}}s:7:"content";a:2:{i:0;s:517:"  	$path2llXml = t3lib_extMgm::extPath('browser').'locallang_db.xml';
    $llXml 			= implode('', file($path2llXml));
		$arr_ll			= t3lib_div::xml2array($llXml, $NSprefix='', $reportDocTag=false);
    $LOCAL_LANG	= $arr_ll['data'];
    return $LOCAL_LANG;
  }
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi4/class.tx_browser_pi4_backend_wizicon.php'])
{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi4/class.tx_browser_pi4_backend_wizicon.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:517;s:13:"content_lines";i:16;s:6:"atLine";i:67;}}}s:14:"MD5_66bee984f3";a:4:{s:8:"filename";s:36:"pi5/class.tx_browser_pi5_backend.php";s:8:"filesize";i:38555;s:6:"header";a:5:{s:4:"text";s:90:"

The class tx_browser_pi1_backend bundles methods for backend support like itemsProcFunc
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:4:{i:0;s:55:"@author    Dirk Wildt http://wildt.at.die-netzmacher.de";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";i:3;s:12:"@since 4.0.0";}s:11:"other_index";a:4:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt http://wildt.at.die-netzmacher.de";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}s:6:"@since";a:1:{i:0;s:6:"4.0.0 ";}}}s:3:"DAT";a:16:{i:1;a:8:{s:6:"header";s:30:"class tx_browser_pi5_backend
{";s:5:"class";i:1;s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:1146:"

[CLASS/FUNCTION INDEX of SCRIPT]



  62: class tx_browser_pi5_backend
  92:     public function sDef_getArrViewsList($arr_pluginConf)
 243:     public function sDEF_getExtensionTemplates($arr_pluginConf)
 302:     public function evaluate_externalLinks($arr_pluginConf, $obj_TCEform)
 340:     public function evaluate_plugin($arr_pluginConf, $obj_TCEform)
 492:     public function day_selectRelative($arr_pluginConf)
 654:     public function month_selectRelative($arr_pluginConf)
 720:     public function week_selectRelative($arr_pluginConf)
 787:     public function year_selectRelative($arr_pluginConf)
 847:     public function socialmedia_getArrBookmarks($arr_pluginConf)
 906:     public function templating_getArrDataQuery($arr_pluginConf)

             SECTION: Helper Methods
 990:     function init($arr_pluginConf)
1031:     function init_pageObj($arr_pluginConf)
1063:     function init_pageUid($arr_pluginConf)
1113:     function init_tsObj($arr_rows_of_all_pages_inRootLine)
1145:     public function zz_hours( $arr_pluginConf )

TOTAL FUNCTIONS: 15
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";a:2:{i:0;s:215:"



  var $pid  = null;
  // [Integer] Pid of the current page
  var $obj_page = null;
  // [Object] Current t3-page object
  var $obj_TypoScript = null;
  // [Object] TypoScript object of current page











  ";i:1;i:-1;}s:12:"content_size";i:215;s:13:"content_lines";i:21;s:6:"atLine";i:60;}i:3;a:7:{s:6:"header";s:57:"public function sDef_getArrViewsList($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:115:"

sDef_getArrViewsList: Get data query (and andWhere) for all list views of the current plugin.
Tab [General/sDEF]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:44:"$arr_pluginConf: Configuration of the plugin";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"with the names of the views list";}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }


      ///////////////////////////////////////////////////////////////////////////////
      //
      // Get Flexform

    $arr_views  = array();
    $arr_xml    = t3lib_div::xml2array(
[...]
array('Did you configured a view?', '');
    }
      // We don't have any item

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:4288;s:13:"content_lines";i:142;s:6:"atLine";i:90;}i:5;a:7:{s:6:"header";s:63:"public function sDEF_getExtensionTemplates($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:99:"

sDEF_getExtensionTemplates: Get templates from the browser and third party extensions
Tab [sDEF]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"$arr_pluginConf: Extended with the templates";}}s:7:"content";a:2:{i:0;s:507:"      // Default value
    $arr_pluginConf['items'][] = array('From TypoScript (old fashion)', 'typoscript');
    $arr_pluginConf['items'][] = array('Upload own Template', 'adjusted');
    $arr_pluginConf['items'][] = array('-------------------------------------------', '');


      // Require classes, init page id, page object and TypoScript object
    $bool_success = $th
[...]
el, $value);
      }
    }
      // Loop through all extensions and templates

    return $arr_pluginConf;

  }











  ";i:1;i:1;}s:12:"content_size";i:1286;s:13:"content_lines";i:48;s:6:"atLine";i:241;}i:7;a:7:{s:6:"header";s:73:"public function evaluate_externalLinks($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:75:"

evaluate_externalLinks: HTML content with external links

Tab [evaluate]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$str_prompt: HTML prompt";}}s:7:"content";a:2:{i:0;s:372:"      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error
    $str_prompt = null;

    $str_prompt = $str_prompt.'
      <div class="message-body">
        ' . $GLOBALS['LANG']->sL('LLL:EXT:browser/lib/locallang.xml:promptExternalLinksBody'). '
      </div>
      ';

    return $str_prompt;
  }











  ";i:1;i:0;}s:12:"content_size";i:372;s:13:"content_lines";i:26;s:6:"atLine";i:300;}i:9;a:7:{s:6:"header";s:66:"public function evaluate_plugin($arr_pluginConf, $obj_TCEform)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:117:"

evaluate_plugin: Evaluates the plugin, flexform, TypoScript
                 Returns a HTML report

Tab [evaluate]
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:55:"$arr_pluginConf:  Current plugin/flexform configuration";}i:1;a:2:{i:0;s:5:"array";i:1;s:41:"$obj_TCEform:     Current TCE form object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"$str_prompt: HTML prompt";}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);

      // RETURN error with init()
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      //.message-notice
      //.message-information
      //.message-ok
      //.message-warning
      //.message-error
    $str_prompt = null;



  
[...]
tr_prompt_info_drs . $str_prompt_warning_version_420;
      // RETURN the prompt



    return $str_prompt;
  }











  ";i:1;i:1;}s:12:"content_size";i:4253;s:13:"content_lines";i:141;s:6:"atLine";i:338;}i:11;a:7:{s:6:"header";s:55:"public function day_selectRelative($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:181:"

day_selectRelative:  Get items for a select box.
                     Returns a list with items like this:
                     10, ... , -1, current week, +1, ..., +10
Tab [day]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"$arr_pluginConf: Extended with the items";}}s:7:"content";a:2:{i:0;s:507:"      // Localise lables
    $ll_default       = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.default');
    $ll_dayNom        = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.day.nom');
    $ll_currDayDat    = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.day.current.dat');
    $ll_takeItFromTs 
[...]
);
    }
      // LOOP items from ( current day ./. 10 ) to (current day + 10)

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:8324;s:13:"content_lines";i:151;s:6:"atLine";i:490;}i:13;a:7:{s:6:"header";s:57:"public function month_selectRelative($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:189:"

month_selectRelative:  Get items for a select box.
                       Returns a list with items like this:
                     - 10, ... , -1, current month, +1, ..., +10
Tab [year]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"$arr_pluginConf: Extended with the items";}}s:7:"content";a:2:{i:0;s:507:"      // Localise lables
    $ll_default       = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.default');
    $ll_currMonthDat  = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.month.current.dat');
    $ll_takeItFromTs  = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.takeItFromTs');
    $ll_wouldB
[...]
   }
      // LOOP items from ( current month ./. 11 ) to (current month + 11)

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:2195;s:13:"content_lines";i:55;s:6:"atLine";i:652;}i:15;a:7:{s:6:"header";s:56:"public function week_selectRelative($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:187:"

week_selectRelative:  Get items for a select box.
                       Returns a list with items like this:
                     - 10, ... , -1, current week, +1, ..., +10
Tab [year]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"$arr_pluginConf: Extended with the items";}}s:7:"content";a:2:{i:0;s:507:"      // Localise lables
    $ll_default       = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.default');
    $ll_weekNom       = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.week.nom');
    $ll_currWeekDat   = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.week.current.dat');
    $ll_takeItFromT
[...]

    }
      // LOOP items from ( current week ./. 10 ) to (current week + 10)

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:2307;s:13:"content_lines";i:56;s:6:"atLine";i:718;}i:17;a:7:{s:6:"header";s:56:"public function year_selectRelative($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:183:"

year_selectRelative: Get items for a select box.
                     Returns a list with items like this:
                     -10, ... , -1, current year, +1, ..., +10
Tab [year]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"$arr_pluginConf: Extended with the items";}}s:7:"content";a:2:{i:0;s:507:"      // Localise lables
    $ll_default       = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.default');
    $ll_currYearDat   = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.year.current.dat');
    $ll_takeItFromTs  = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.takeItFromTs');
    $ll_wouldBe
[...]
);
    }
      // LOOP items from ( current year ./. 10 ) to (current year + 10)

    return $arr_pluginConf;

  }








  ";i:1;i:1;}s:12:"content_size";i:2006;s:13:"content_lines";i:52;s:6:"atLine";i:785;}i:19;a:7:{s:6:"header";s:64:"public function socialmedia_getArrBookmarks($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:77:"

socialmedia_getArrBookmarks: Get bookmarks for flexform. Tab [Socialmedia]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:44:"$arr_pluginConf: Configuration of the plugin";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:18:"with the bookmarks";}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      // TypoScript configuration for bookmarks
    $arr_bookmarks = $this->obj_TypoScript->setup['plugin.']['tx_browser_pi1.']['flexform.']['socialmedia.']['socialbookmarks.']['bookmar
[...]
multisort($arr_sort, $arr_pluginConf['items']);
    }
      // Order bookmarks

    return $arr_pluginConf;
  }











  ";i:1;i:1;}s:12:"content_size";i:1203;s:13:"content_lines";i:50;s:6:"atLine";i:845;}i:21;a:7:{s:6:"header";s:63:"public function templating_getArrDataQuery($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:119:"

templating_getArrDataQuery: Get data query (and andWhere) for all list views of the current plugin.
Tab [Templating]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:44:"$arr_pluginConf: Configuration of the plugin";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:18:"with the bookmarks";}}s:7:"content";a:2:{i:0;s:507:"      // Require classes, init page id, page object and TypoScript object
    $bool_success = $this->init($arr_pluginConf);
    if(!$bool_success)
    {
      return $arr_pluginConf;
    }

      // TypoScript configuration for dataQueries
    $arr_dataQuery = $this->obj_TypoScript->setup['plugin.']['tx_browser_pi1.']['flexform.']['templating.']['arrDataQuery.']['items.'];
[...]
****************************
   *
   * Helper Methods
   *
   **********************************************/













  ";i:1;i:1;}s:12:"content_size";i:1710;s:13:"content_lines";i:74;s:6:"atLine";i:904;}i:23;a:8:{s:6:"header";s:34:"function init($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:11:"sectionText";a:1:{i:0;s:14:"Helper Methods";}s:4:"cDat";a:5:{s:4:"text";s:31:"

init(): Initiate this class.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:28:"TRUE: success. FALSE: error.";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:507:"      // Require classes
    require_once(PATH_t3lib.'class.t3lib_page.php');
    require_once(PATH_t3lib.'class.t3lib_tstemplate.php');
    require_once(PATH_t3lib.'class.t3lib_tsparser_ext.php');

      // Init page id and the page object
    $this->init_pageUid($arr_pluginConf);
    $this->init_pageObj($arr_pluginConf);

      // Init agregrated TypoScript
    $arr_rows
[...]
   {
      return false;
    }
    $this->init_tsObj($arr_rows_of_all_pages_inRootLine);

    return true;
  }












  ";i:1;i:1;}s:12:"content_size";i:620;s:13:"content_lines";i:31;s:6:"atLine";i:988;}i:25;a:7:{s:6:"header";s:42:"function init_pageObj($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:5:{s:4:"text";s:43:"

init_pageObj(): Initiate an page object.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:202:"    if(!empty($this->obj_page))
    {
      return false;
    }

      // Set current page object
    $this->obj_page = t3lib_div::makeInstance('t3lib_pageSelect');

    return false;
  }












  ";i:1;i:0;}s:12:"content_size";i:202;s:13:"content_lines";i:22;s:6:"atLine";i:1029;}i:27;a:7:{s:6:"header";s:42:"function init_pageUid($arr_pluginConf)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:5:{s:4:"text";s:41:"

init_pageUid(): Initiate the page uid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:7:"content";a:2:{i:0;s:507:"    if(!empty($this->pid))
    {
      return false;
    }

      // Update: Get current page id from the plugin
    $int_pid = false;
    if($arr_pluginConf['row']['pid'] > 0)
    {
      $int_pid = $arr_pluginConf['row']['pid'];
    }
      // Update: Get current page id from the plugin

      // New: Get current page id from the current URL
    if(!$int_pid)
    {
     
[...]
e id from the current URL

      // Set current page id
    $this->pid      = $int_pid;

    return false;
  }












  ";i:1;i:1;}s:12:"content_size";i:817;s:13:"content_lines";i:40;s:6:"atLine";i:1061;}i:29;a:4:{s:6:"header";s:58:"function init_tsObj($arr_rows_of_all_pages_inRootLine)
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:5:{s:4:"text";s:61:"

init_tsObj(): Initiate the TypoScript of the current page.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:87:"$arr_rows_of_all_pages_inRootLine: Agregate the TypoScript of all pages in the rootline";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:5:"FALSE";}s:5:"other";a:2:{i:0;s:12:"@since 3.4.5";i:1;s:14:"@version 3.4.5";}s:11:"other_index";a:2:{s:6:"@since";a:1:{i:0;s:6:"3.4.5 ";}s:8:"@version";a:1:{i:0;s:6:"3.4.5 ";}}}s:6:"atLine";i:1111;}i:31;a:7:{s:6:"header";s:47:"public function zz_hours( $arr_pluginConf )
  {";s:11:"parentClass";s:22:"tx_browser_pi5_backend";s:4:"cDat";a:3:{s:4:"text";s:140:"

zz_hours:  Get the hours of one day
           Returns a list with items like this:
           00:00, 01:00, ..., 23:00, 24:00
Tab [year]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:54:"$arr_pluginConf: Current plugin/flexform configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"$arr_pluginConf: Extended with the items";}}s:7:"content";a:2:{i:0;s:507:"      // Localise lables
    $ll_takeItFromTs  = $GLOBALS['LANG']->sL('LLL:EXT:browser/pi5/flexform_locallang.xml:labels.takeItFromTs');

      // Default items for select box
    $arr_pluginConf['items'][] = array($ll_takeItFromTs,                              'ts'  );
    $arr_pluginConf['items'][] = array('-------------------------------------------', null  );

      //
[...]
nd.php']) {
  include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi5/class.tx_browser_pi5_backend.php']);
}
?>
";i:1;i:1;}s:12:"content_size";i:1087;s:13:"content_lines";i:43;s:6:"atLine";i:1143;}}}s:14:"MD5_a621893798";a:4:{s:8:"filename";s:44:"pi5/class.tx_browser_pi5_backend_wizicon.php";s:8:"filesize";i:2532;s:6:"header";a:5:{s:4:"text";s:35:"

Class that adds the wizard icon.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:55:"@author    Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";i:1;s:17:"@package    TYPO3";i:2;s:25:"@subpackage    tx_browser";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:44:"Dirk Wildt <dirk.wildt.at.die-netzmacher.de>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:11:"tx_browser ";}}}s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:38:"class tx_browser_pi5_backend_wizicon
{";s:5:"class";i:1;s:11:"parentClass";s:30:"tx_browser_pi5_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:204:"

[CLASS/FUNCTION INDEX of SCRIPT]



  46: class tx_browser_pi5_backend_wizicon
  69:     function getLL()

TOTAL FUNCTIONS: 1
(This index is automatically created/updated by the extension "extdeveval")
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:44;}i:3;a:7:{s:6:"header";s:19:"function getLL()
	{";s:11:"parentClass";s:30:"tx_browser_pi5_backend_wizicon";s:4:"cDat";a:3:{s:4:"text";s:53:"

Get the locallang for class use out of an XML file
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:27:"Array of the locallang data";}}s:7:"content";a:2:{i:0;s:517:"  	$path2llXml = t3lib_extMgm::extPath('browser').'locallang_db.xml';
    $llXml 			= implode('', file($path2llXml));
		$arr_ll			= t3lib_div::xml2array($llXml, $NSprefix='', $reportDocTag=false);
    $LOCAL_LANG	= $arr_ll['data'];
    return $LOCAL_LANG;
  }
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi5/class.tx_browser_pi5_backend_wizicon.php'])
{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/browser/pi5/class.tx_browser_pi5_backend_wizicon.php']);
}

?>
";i:1;i:0;}s:12:"content_size";i:517;s:13:"content_lines";i:16;s:6:"atLine";i:67;}}}s:14:"MD5_10f0399a54";a:4:{s:8:"filename";s:24:"res/js/map/test/test.php";s:8:"filesize";i:373;s:6:"header";N;s:3:"DAT";a:0:{}}}}